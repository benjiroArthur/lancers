(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./resources/js/stripe.js":
/*!********************************!*\
  !*** ./resources/js/stripe.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n!function (e) {\n  function t(r) {\n    if (n[r]) return n[r].exports;\n    var o = n[r] = {\n      i: r,\n      l: !1,\n      exports: {}\n    };\n    return e[r].call(o.exports, o, o.exports, t), o.l = !0, o.exports;\n  }\n\n  var n = {};\n  t.m = e, t.c = n, t.d = function (e, n, r) {\n    t.o(e, n) || Object.defineProperty(e, n, {\n      configurable: !1,\n      enumerable: !0,\n      get: r\n    });\n  }, t.n = function (e) {\n    var n = e && e.__esModule ? function () {\n      return e[\"default\"];\n    } : function () {\n      return e;\n    };\n    return t.d(n, \"a\", n), n;\n  }, t.o = function (e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n  }, t.p = \"\", t(t.s = 0);\n}([function (e, t, n) {\n  e.exports = n(1);\n}, function (e, t, n) {\n  \"use strict\";\n\n  function r(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function o(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function i(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function a(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function s(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function c(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function u(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function l(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function p(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function d(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function f(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function h(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function _(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function m(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function y(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function v(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function b(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function g(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function E(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function w(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function S(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function P(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function O(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function k(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function A(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function T(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function R(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function I(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function N(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function C(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function M(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function j(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function L(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function x(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function D(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function q(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function F(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function B(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function U(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function H(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function Y(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function G(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function W(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function z(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function K(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function V(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function J(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function Q(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function $(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function X(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function Z(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function ee(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function te(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function ne(e, t) {\n    if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return !t || \"object\" != _typeof(t) && \"function\" != typeof t ? e : t;\n  }\n\n  function re(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(t));\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n  }\n\n  function oe(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function ie(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function ae(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function se(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function ce(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function ue(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function le(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function pe(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function de(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function fe(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function he(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function _e(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  function me(e, t) {\n    var n = {};\n\n    for (var r in e) {\n      t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n    }\n\n    return n;\n  }\n\n  function ye(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function ve(e) {\n    if (Array.isArray(e)) {\n      for (var t = 0, n = Array(e.length); t < e.length; t++) {\n        n[t] = e[t];\n      }\n\n      return n;\n    }\n\n    return Array.from(e);\n  }\n\n  Object.defineProperty(t, \"__esModule\", {\n    value: !0\n  });\n\n  var be,\n      ge,\n      Ee,\n      we,\n      Se,\n      Pe,\n      Oe,\n      ke,\n      Ae = function (e) {\n    function t(e) {\n      r(this, t);\n      var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));\n      return window.__stripeElementsController && window.__stripeElementsController.reportIntegrationError(e), n.name = \"IntegrationError\", Object.defineProperty(n, \"message\", {\n        value: n.message,\n        enumerable: !0\n      }), n;\n    }\n\n    return i(t, e), t;\n  }(Error),\n      Te = Ae,\n      Re = function Re(e) {\n    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"absurd\";\n    throw new Error(t);\n  },\n      Ie = n(2),\n      Ne = n.n(Ie),\n      Ce = window.Promise ? Promise : Ne.a,\n      Me = Ce,\n      je = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      Le = function Le(e, t) {\n    for (var n = 0; n < e.length; n++) {\n      if (t(e[n])) return e[n];\n    }\n  },\n      xe = function xe(e, t) {\n    for (var n = 0; n < e.length; n++) {\n      if (t(e[n])) return n;\n    }\n\n    return -1;\n  },\n      De = function e(t, n) {\n    if (\"object\" !== (void 0 === t ? \"undefined\" : je(t)) || \"object\" !== (void 0 === n ? \"undefined\" : je(n))) return t === n;\n    if (null === t || null === n) return t === n;\n    var r = Array.isArray(t);\n    if (r !== Array.isArray(n)) return !1;\n    var o = \"[object Object]\" === Object.prototype.toString.call(t);\n    if (o !== (\"[object Object]\" === Object.prototype.toString.call(n))) return !1;\n    if (!o && !r) return !1;\n    var i = Object.keys(t),\n        a = Object.keys(n);\n    if (i.length !== a.length) return !1;\n\n    for (var s = {}, c = 0; c < i.length; c++) {\n      s[i[c]] = !0;\n    }\n\n    for (var u = 0; u < a.length; u++) {\n      s[a[u]] = !0;\n    }\n\n    var l = Object.keys(s);\n    if (l.length !== i.length) return !1;\n\n    var p = t,\n        d = n,\n        f = function f(t) {\n      return e(p[t], d[t]);\n    };\n\n    return l.every(f);\n  },\n      qe = function qe(e, t) {\n    for (var n = {}, r = 0; r < t.length; r++) {\n      n[t[r]] = !0;\n    }\n\n    for (var o = [], i = 0; i < e.length; i++) {\n      n[e[i]] && o.push(e[i]);\n    }\n\n    return o;\n  },\n      Fe = function Fe(e, t) {\n    var n = 0,\n        r = function r(o) {\n      for (var i = Date.now() + 50; n < e.length && Date.now() < i;) {\n        t(e[n]), n++;\n      }\n\n      n === e.length ? o() : setTimeout(function () {\n        return r(o);\n      });\n    };\n\n    return new Me(function (e) {\n      return r(e);\n    });\n  },\n      Be = [\"aed\", \"afn\", \"all\", \"amd\", \"ang\", \"aoa\", \"ars\", \"aud\", \"awg\", \"azn\", \"bam\", \"bbd\", \"bdt\", \"bgn\", \"bhd\", \"bif\", \"bmd\", \"bnd\", \"bob\", \"brl\", \"bsd\", \"btn\", \"bwp\", \"byr\", \"bzd\", \"cad\", \"cdf\", \"chf\", \"clf\", \"clp\", \"cny\", \"cop\", \"crc\", \"cuc\", \"cup\", \"cve\", \"czk\", \"djf\", \"dkk\", \"dop\", \"dzd\", \"egp\", \"ern\", \"etb\", \"eur\", \"fjd\", \"fkp\", \"gbp\", \"gel\", \"ghs\", \"gip\", \"gmd\", \"gnf\", \"gtq\", \"gyd\", \"hkd\", \"hnl\", \"hrk\", \"htg\", \"huf\", \"idr\", \"ils\", \"inr\", \"iqd\", \"irr\", \"isk\", \"jmd\", \"jod\", \"jpy\", \"kes\", \"kgs\", \"khr\", \"kmf\", \"kpw\", \"krw\", \"kwd\", \"kyd\", \"kzt\", \"lak\", \"lbp\", \"lkr\", \"lrd\", \"lsl\", \"ltl\", \"lvl\", \"lyd\", \"mad\", \"mdl\", \"mga\", \"mkd\", \"mmk\", \"mnt\", \"mop\", \"mro\", \"mur\", \"mvr\", \"mwk\", \"mxn\", \"myr\", \"mzn\", \"nad\", \"ngn\", \"nio\", \"nok\", \"npr\", \"nzd\", \"omr\", \"pab\", \"pen\", \"pgk\", \"php\", \"pkr\", \"pln\", \"pyg\", \"qar\", \"ron\", \"rsd\", \"rub\", \"rwf\", \"sar\", \"sbd\", \"scr\", \"sdg\", \"sek\", \"sgd\", \"shp\", \"skk\", \"sll\", \"sos\", \"srd\", \"ssp\", \"std\", \"svc\", \"syp\", \"szl\", \"thb\", \"tjs\", \"tmt\", \"tnd\", \"top\", \"try\", \"ttd\", \"twd\", \"tzs\", \"uah\", \"ugx\", \"usd\", \"uyu\", \"uzs\", \"vef\", \"vnd\", \"vuv\", \"wst\", \"xaf\", \"xag\", \"xau\", \"xcd\", \"xdr\", \"xof\", \"xpf\", \"yer\", \"zar\", \"zmk\", \"zmw\", \"btc\", \"jep\", \"eek\", \"ghc\", \"mtl\", \"tmm\", \"yen\", \"zwd\", \"zwl\", \"zwn\", \"zwr\"],\n      Ue = Be,\n      He = {\n    AE: \"AE\",\n    AT: \"AT\",\n    AU: \"AU\",\n    BE: \"BE\",\n    BG: \"BG\",\n    BR: \"BR\",\n    CA: \"CA\",\n    CH: \"CH\",\n    CI: \"CI\",\n    CR: \"CR\",\n    CY: \"CY\",\n    CZ: \"CZ\",\n    DE: \"DE\",\n    DK: \"DK\",\n    DO: \"DO\",\n    EE: \"EE\",\n    ES: \"ES\",\n    FI: \"FI\",\n    FR: \"FR\",\n    GB: \"GB\",\n    GR: \"GR\",\n    GT: \"GT\",\n    HK: \"HK\",\n    HU: \"HU\",\n    ID: \"ID\",\n    IE: \"IE\",\n    IN: \"IN\",\n    IT: \"IT\",\n    JP: \"JP\",\n    LT: \"LT\",\n    LU: \"LU\",\n    LV: \"LV\",\n    MT: \"MT\",\n    MX: \"MX\",\n    MY: \"MY\",\n    NL: \"NL\",\n    NO: \"NO\",\n    NZ: \"NZ\",\n    PE: \"PE\",\n    PH: \"PH\",\n    PL: \"PL\",\n    PT: \"PT\",\n    RO: \"RO\",\n    SE: \"SE\",\n    SG: \"SG\",\n    SI: \"SI\",\n    SK: \"SK\",\n    SN: \"SN\",\n    TH: \"TH\",\n    TT: \"TT\",\n    US: \"US\",\n    UY: \"UY\"\n  },\n      Ye = Object.keys(He),\n      Ge = {\n    live: \"live\",\n    test: \"test\",\n    unknown: \"unknown\"\n  },\n      We = function We(e) {\n    return /^pk_test_/.test(e) ? Ge.test : /^pk_live_/.test(e) ? Ge.live : Ge.unknown;\n  },\n      ze = function ze(e) {\n    if (e === Ge.unknown) throw new Te(\"It looks like you're using an older Stripe key. In order to use this API, you'll need to use a modern API key, which is prefixed with 'pk_live_' or 'pk_test_'.\\n    You can roll your publishable key here: https://dashboard.stripe.com/account/apikeys\");\n  },\n      Ke = /^(http(s)?):\\/\\//,\n      Ve = function Ve(e) {\n    return Ke.test(e);\n  },\n      Je = function Je(e) {\n    if (!Ve(e)) return null;\n    var t = document.createElement(\"a\");\n    t.href = e;\n    var n = t.protocol,\n        r = t.host,\n        o = t.pathname,\n        i = /:80$/,\n        a = /:443$/;\n    return \"http:\" === n && i.test(r) ? r = r.replace(i, \"\") : \"https:\" === n && a.test(r) && (r = r.replace(a, \"\")), {\n      host: r,\n      protocol: n,\n      origin: n + \"//\" + r,\n      path: o\n    };\n  },\n      Qe = function Qe(e, t) {\n    if (\"/\" === t[0]) {\n      var n = Je(e);\n      return n ? \"\" + n.origin + t : t;\n    }\n\n    return \"\" + e.replace(/\\/[^\\/]*$/, \"/\") + t;\n  },\n      $e = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Xe = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      Ze = function Ze(e, t, n) {\n    return \"Invalid value for \" + n.label + \": \" + (n.path.join(\".\") || \"value\") + \" should be \" + e + \". You specified: \" + t + \".\";\n  },\n      et = function et(e) {\n    return {\n      type: \"valid\",\n      value: e,\n      warnings: arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : []\n    };\n  },\n      tt = function tt(e) {\n    return {\n      error: e,\n      errorType: \"full\",\n      type: \"error\"\n    };\n  },\n      nt = function nt(e, t, n) {\n    var r = new Te(Ze(e, t, n));\n    return tt(r);\n  },\n      rt = function rt(e, t, n) {\n    return {\n      expected: e,\n      actual: String(t),\n      options: n,\n      errorType: \"mismatch\",\n      type: \"error\"\n    };\n  },\n      ot = function ot(e) {\n    return function (t, n) {\n      return void 0 === t ? et(t) : e(t, n);\n    };\n  },\n      it = function it(e, t) {\n    return function (n, r) {\n      var o = function o(e) {\n        var t = e.options.path.join(\".\") || \"value\";\n        return {\n          error: t + \" should be \" + e.expected,\n          actual: t + \" as \" + e.actual\n        };\n      },\n          i = function i(e, t, n) {\n        return tt(new Te(\"Invalid value for \" + e + \": \" + t + \". You specified \" + n + \".\"));\n      },\n          a = e(n, r),\n          s = t(n, r);\n\n      if (\"error\" === a.type && \"error\" === s.type) {\n        if (\"mismatch\" === a.errorType && \"mismatch\" === s.errorType) {\n          var c = o(a),\n              u = c.error,\n              l = c.actual,\n              p = o(s),\n              d = p.error,\n              f = p.actual;\n          return i(r.label, u === d ? u : u + \" or \" + d, l === f ? l : l + \" and \" + f);\n        }\n\n        if (\"mismatch\" === a.errorType) {\n          var h = o(a),\n              _ = h.error,\n              m = h.actual;\n          return i(r.label, _, m);\n        }\n\n        if (\"mismatch\" === s.errorType) {\n          var y = o(s),\n              v = y.error,\n              b = y.actual;\n          return i(r.label, v, b);\n        }\n\n        return tt(a.error);\n      }\n\n      return \"valid\" === a.type ? a : s;\n    };\n  },\n      at = function at(e, t) {\n    return function (n, r) {\n      var o = Le(e, function (e) {\n        return e === n;\n      });\n\n      if (void 0 === o) {\n        var i = t ? \"a recognized string.\" : \"one of the following strings: \" + e.join(\", \");\n        return rt(i, n, r);\n      }\n\n      return et(o);\n    };\n  },\n      st = function st(e) {\n    return function (t, n) {\n      return \"string\" == typeof t && 0 === t.indexOf(e) ? et(t) : rt(\"a string starting with \" + e, t, n);\n    };\n  },\n      ct = function ct() {\n    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) {\n      t[n] = arguments[n];\n    }\n\n    return at(t, !1);\n  },\n      ut = function ut() {\n    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) {\n      t[n] = arguments[n];\n    }\n\n    return at(t, !0);\n  },\n      lt = ct.apply(void 0, s(Ye)),\n      pt = ct.apply(void 0, s(Ue)),\n      dt = (ct.apply(void 0, s(Object.keys(Ge))), function (e, t) {\n    return \"string\" == typeof e ? et(e) : rt(\"a string\", e, t);\n  }),\n      ft = function ft(e, t) {\n    return function (n, r) {\n      return void 0 === n ? et(t()) : e(n, r);\n    };\n  },\n      ht = function ht(e, t) {\n    return \"boolean\" == typeof e ? et(e) : rt(\"a boolean\", e, t);\n  },\n      _t = function _t(e, t) {\n    return \"number\" == typeof e ? et(e) : rt(\"a number\", e, t);\n  },\n      mt = function mt(e) {\n    return function (t, n) {\n      return \"number\" == typeof t && t > e ? et(t) : rt(\"a number greater than \" + e, t, n);\n    };\n  },\n      yt = function yt(e) {\n    return function (t, n) {\n      return \"number\" == typeof t && t === parseInt(t, 10) && (!e || t >= 0) ? et(t) : rt(e ? \"a positive amount in the currency's subunit\" : \"an amount in the currency's subunit\", t, n);\n    };\n  },\n      vt = function vt(e, t) {\n    return yt(!1)(e, t);\n  },\n      bt = function bt(e, t) {\n    return yt(!0)(e, t);\n  },\n      gt = function gt(e, t) {\n    return e && \"object\" === (void 0 === e ? \"undefined\" : Xe(e)) ? et(e) : rt(\"an object\", e, t);\n  },\n      Et = function Et(e) {\n    return function (t, n) {\n      if (Array.isArray(t)) {\n        return t.map(function (t, r) {\n          return e(t, $e({}, n, {\n            path: [].concat(s(n.path), [String(r)])\n          }));\n        }).reduce(function (e, t) {\n          return \"error\" === e.type ? e : \"error\" === t.type ? t : et([].concat(s(e.value), [t.value]), [].concat(s(e.warnings), s(t.warnings)));\n        }, et([]));\n      }\n\n      return rt(\"array\", t, n);\n    };\n  },\n      wt = function wt(e) {\n    return function (t) {\n      return function (n, r) {\n        if (Array.isArray(n)) {\n          var o = t(n, r);\n          if (\"valid\" === o.type) for (var i = {}, a = 0; a < o.value.length; a += 1) {\n            var s = o.value[a];\n\n            if (\"object\" === (void 0 === s ? \"undefined\" : Xe(s)) && s && \"string\" == typeof s[e]) {\n              var c = s[e],\n                  u = \"_\" + c;\n              if (i[u]) return tt(new Te(\"Duplicate value for \" + e + \": \" + c + \". The property '\" + e + \"' of '\" + r.path.join(\".\") + \"' has to be unique.\"));\n              i[u] = !0;\n            }\n          }\n          return o;\n        }\n\n        return rt(\"array\", n, r);\n      };\n    };\n  },\n      St = function St(e) {\n    return function (t, n) {\n      return void 0 === t ? et(void 0) : rt(\"used in \" + e + \" instead\", t, n);\n    };\n  },\n      Pt = function Pt(e) {\n    return function (t) {\n      return function (n, r) {\n        if (n && \"object\" === (void 0 === n ? \"undefined\" : Xe(n)) && !Array.isArray(n)) {\n          var o = n,\n              i = Le(Object.keys(o), function (e) {\n            return !t[e];\n          });\n          if (i && e) return tt(new Te(\"Invalid \" + r.label + \" parameter: \" + [].concat(s(r.path), [i]).join(\".\") + \" is not an accepted parameter.\"));\n          var c = Object.keys(o),\n              u = et({});\n          return i && (u = c.reduce(function (e, n) {\n            return t[n] ? e : et(e.value, [].concat(s(e.warnings), [\"Unrecognized \" + r.label + \" parameter: \" + [].concat(s(r.path), [n]).join(\".\") + \" is not a recognized parameter. This may cause issues with your integration in the future.\"]));\n          }, u)), Object.keys(t).reduce(function (e, n) {\n            if (\"error\" === e.type) return e;\n            var i = t[n],\n                c = i(o[n], $e({}, r, {\n              path: [].concat(s(r.path), [n])\n            }));\n            return \"valid\" === c.type && void 0 !== c.value ? et($e({}, e.value, a({}, n, c.value)), [].concat(s(e.warnings), s(c.warnings))) : \"valid\" === c.type ? et(e.value, [].concat(s(e.warnings), s(c.warnings))) : c;\n          }, u);\n        }\n\n        return rt(\"an object\", n, r);\n      };\n    };\n  },\n      Ot = Pt(!0),\n      kt = Pt(!1),\n      At = function At(e, t) {\n    return $e({}, e, {\n      path: [].concat(s(e.path), [t])\n    });\n  },\n      Tt = function Tt(e, t, n, r) {\n    var o = r || {},\n        i = e(t, {\n      origin: o.origin || \"\",\n      element: o.element || \"\",\n      label: n,\n      path: o.path || []\n    });\n    return \"valid\" === i.type ? i : \"full\" === i.errorType ? i : {\n      type: \"error\",\n      errorType: \"full\",\n      error: new Te(Ze(i.expected, i.actual, i.options))\n    };\n  },\n      Rt = function Rt(e, t, n, r) {\n    var o = Tt(e, t, n, r);\n\n    switch (o.type) {\n      case \"valid\":\n        return {\n          value: o.value,\n          warnings: o.warnings\n        };\n\n      case \"error\":\n        throw o.error;\n\n      default:\n        return Re(o);\n    }\n  },\n      It = {\n    CARD_ELEMENT: \"CARD_ELEMENT\",\n    CONTROLLER: \"CONTROLLER\",\n    METRICS_CONTROLLER: \"METRICS_CONTROLLER\",\n    PAYMENT_REQUEST_ELEMENT: \"PAYMENT_REQUEST_ELEMENT\",\n    PAYMENT_REQUEST_BROWSER: \"PAYMENT_REQUEST_BROWSER\",\n    PAYMENT_REQUEST_GOOGLE_PAY: \"PAYMENT_REQUEST_GOOGLE_PAY\",\n    IBAN_ELEMENT: \"IBAN_ELEMENT\",\n    IDEAL_BANK_ELEMENT: \"IDEAL_BANK_ELEMENT\",\n    AUTHORIZE_WITH_URL: \"AUTHORIZE_WITH_URL\",\n    STRIPE_3DS2_CHALLENGE: \"STRIPE_3DS2_CHALLENGE\",\n    STRIPE_3DS2_FINGERPRINT: \"STRIPE_3DS2_FINGERPRINT\",\n    AU_BANK_ACCOUNT_ELEMENT: \"AU_BANK_ACCOUNT_ELEMENT\",\n    FPX_BANK_ELEMENT: \"FPX_BANK_ELEMENT\"\n  },\n      Nt = It,\n      Ct = Object({\n    NODE_ENV: \"production\",\n    TEST_ENV: !1,\n    SELENIUM_TEST_ENV: !1,\n    PUBLIC_URL: \"\",\n    RELEASE_VERSION: \"d67f6c85\",\n    STRIPE_JS_API_URL: \"https://api.stripe.com/v1/\",\n    STRIPE_JS_HOOKS_URL: \"https://hooks.stripe.com/\",\n    STRIPE_HIP_URL: \"https://invoice.stripe.com\",\n    STRIPE_HIP_DATA_URL: \"\",\n    STRIPE_JS_ALLOW_MUTABLE_API_URL: !1,\n    STRIPE_JS_Q_URL: \"https://q.stripe.com\",\n    STRIPE_JS_M_NETWORK_URL: \"https://m.stripe.network\",\n    STRIPE_JS_ROOT_URL: \"https://js.stripe.com/v3/\",\n    STRIPE_CHECKOUT_URL: \"https://checkout.stripe.com/\",\n    STRIPE_JS_SOURCEMAPS: !1,\n    STRIPE_JS_DEBUG_POSTMESSAGE: !1,\n    STRIPE_JS_DEBUG_LOGGER: !0,\n    ELEMENTS_INNER_CARD_HTML_NAME: \"elements-inner-card-743a1900eebc4d345b0280f62850ffee.html\",\n    ELEMENTS_INNER_IBAN_HTML_NAME: \"elements-inner-iban-b541b7c6753c2d63862beedd72d471dc.html\",\n    ELEMENTS_INNER_IDEAL_BANK_HTML_NAME: \"elements-inner-ideal-bank-635aa100fabe673f9250d1e6c9de5aa4.html\",\n    ELEMENTS_INNER_PAYMENT_REQUEST_HTML_NAME: \"elements-inner-payment-request-cd18a1cea6c33510c1c431d8f9631427.html\",\n    ELEMENTS_INNER_AU_BANK_ACCOUNT_HTML_NAME: \"elements-inner-au-bank-account-3cbae6d299cc107e3e480891b10d6a22.html\",\n    ELEMENTS_INNER_FPX_BANK_HTML_NAME: \"elements-inner-fpx-bank-6b2fd539dd5c1cfe3696c553b95e1fb0.html\",\n    RECAPTCHA_HTML_NAME: \"recaptcha.html\",\n    CONTROLLER_HTML_NAME: \"controller-8ee2231a584d767ddcf0a23ba8642387.html\",\n    PAYMENT_REQUEST_INNER_BROWSER_HTML_NAME: \"payment-request-inner-browser-99c12c447d559ed25732ceb9da2db91c.html\",\n    PAYMENT_REQUEST_INNER_GOOGLE_PAY_HTML_NAME: \"payment-request-inner-google-pay-e3b9394086a516fa20b24720d0f5f0a7.html\",\n    AUTHORIZE_WITH_URL_INNER_HTML_NAME: \"authorize-with-url-inner-d7539a43c59b9422dfc302cd6e8dc690.html\",\n    THREE_DS_2_CHALLENGE_HTML_NAME: \"three-ds-2-challenge-b522884342ea29fa9890dcc82429a07e.html\",\n    THREE_DS_2_FINGERPRINT_HTML_NAME: \"three-ds-2-fingerprint-4ad1aa51414307bb28e6dfd15557f79c.html\",\n    M_OUTER_HTML_NAME: \"m-outer-a0f6c1465b8d9aab778cf2913d1d3c86.html\",\n    STRIPE_JS_NO_DEMOS: !0,\n    STRIPE_JS_NO_REPORTS: !0\n  }),\n      Mt = function Mt(e) {\n    return \"\" + (Ct.STRIPE_JS_ROOT_URL || \"\") + (e || \"\");\n  },\n      jt = function jt(e) {\n    switch (e) {\n      case \"CARD_ELEMENT\":\n        return Mt(Ct.ELEMENTS_INNER_CARD_HTML_NAME);\n\n      case \"CONTROLLER\":\n        return Mt(Ct.CONTROLLER_HTML_NAME);\n\n      case \"METRICS_CONTROLLER\":\n        return Mt(Ct.M_OUTER_HTML_NAME);\n\n      case \"PAYMENT_REQUEST_ELEMENT\":\n        return Mt(Ct.ELEMENTS_INNER_PAYMENT_REQUEST_HTML_NAME);\n\n      case \"PAYMENT_REQUEST_BROWSER\":\n        return Mt(Ct.PAYMENT_REQUEST_INNER_BROWSER_HTML_NAME);\n\n      case \"PAYMENT_REQUEST_GOOGLE_PAY\":\n        return Mt(Ct.PAYMENT_REQUEST_INNER_GOOGLE_PAY_HTML_NAME);\n\n      case \"IBAN_ELEMENT\":\n        return Mt(Ct.ELEMENTS_INNER_IBAN_HTML_NAME);\n\n      case \"IDEAL_BANK_ELEMENT\":\n        return Mt(Ct.ELEMENTS_INNER_IDEAL_BANK_HTML_NAME);\n\n      case \"AUTHORIZE_WITH_URL\":\n        return Mt(Ct.AUTHORIZE_WITH_URL_INNER_HTML_NAME);\n\n      case \"STRIPE_3DS2_CHALLENGE\":\n        return Mt(Ct.THREE_DS_2_CHALLENGE_HTML_NAME);\n\n      case \"STRIPE_3DS2_FINGERPRINT\":\n        return Mt(Ct.THREE_DS_2_FINGERPRINT_HTML_NAME);\n\n      case \"AU_BANK_ACCOUNT_ELEMENT\":\n        return Mt(Ct.ELEMENTS_INNER_AU_BANK_ACCOUNT_HTML_NAME);\n\n      case \"FPX_BANK_ELEMENT\":\n        return Mt(Ct.ELEMENTS_INNER_FPX_BANK_HTML_NAME);\n\n      default:\n        return Re(e);\n    }\n  },\n      Lt = jt,\n      xt = {\n    card: \"card\",\n    cardNumber: \"cardNumber\",\n    cardExpiry: \"cardExpiry\",\n    cardCvc: \"cardCvc\",\n    postalCode: \"postalCode\",\n    iban: \"iban\",\n    idealBank: \"idealBank\",\n    paymentRequestButton: \"paymentRequestButton\",\n    auBankAccount: \"auBankAccount\",\n    fpxBank: \"fpxBank\",\n    idealBankSecondary: \"idealBankSecondary\",\n    auBankAccountNumber: \"auBankAccountNumber\",\n    auBsb: \"auBsb\",\n    fpxBankSecondary: \"fpxBankSecondary\"\n  },\n      Dt = xt,\n      qt = {\n    PAYMENT_INTENT: \"PAYMENT_INTENT\",\n    SETUP_INTENT: \"SETUP_INTENT\"\n  },\n      Ft = qt,\n      Bt = [Dt.card, Dt.cardNumber, Dt.cardExpiry, Dt.cardCvc, Dt.postalCode],\n      Ut = Bt,\n      Ht = \"https://js.stripe.com/v3/\",\n      Yt = Je(Ht),\n      Gt = Yt ? Yt.origin : \"\",\n      Wt = {\n    family: \"font-family\",\n    src: \"src\",\n    unicodeRange: \"unicode-range\",\n    style: \"font-style\",\n    variant: \"font-variant\",\n    stretch: \"font-stretch\",\n    weight: \"font-weight\",\n    display: \"font-display\"\n  },\n      zt = Object.keys(Wt).reduce(function (e, t) {\n    return e[Wt[t]] = t, e;\n  }, {}),\n      Kt = [Dt.idealBank, Dt.idealBankSecondary, Dt.fpxBank, Dt.fpxBankSecondary],\n      Vt = 0,\n      Jt = function Jt(e) {\n    return \"\" + e + Vt++;\n  },\n      Qt = function e() {\n    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\";\n    return t ? (parseInt(t, 10) ^ 16 * Math.random() >> parseInt(t, 10) / 4).toString(16) : \"00000000-0000-4000-8000-000000000000\".replace(/[08]/g, e);\n  },\n      $t = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      Xt = function e(t, n) {\n    var r = [];\n    return Object.keys(t).forEach(function (o) {\n      var i = t[o],\n          a = n ? n + \"[\" + o + \"]\" : o;\n\n      if (i && \"object\" === (void 0 === i ? \"undefined\" : $t(i))) {\n        var s = e(i, a);\n        \"\" !== s && (r = [].concat(c(r), [s]));\n      } else void 0 !== i && null !== i && (r = [].concat(c(r), [a + \"=\" + encodeURIComponent(String(i))]));\n    }), r.join(\"&\").replace(/%20/g, \"+\");\n  },\n      Zt = Xt,\n      en = n(6),\n      tn = n.n(en),\n      nn = function () {\n    function e(e, t) {\n      var n = [],\n          r = !0,\n          o = !1,\n          i = void 0;\n\n      try {\n        for (var a, s = e[Symbol.iterator](); !(r = (a = s.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0) {\n          ;\n        }\n      } catch (e) {\n        o = !0, i = e;\n      } finally {\n        try {\n          !r && s[\"return\"] && s[\"return\"]();\n        } finally {\n          if (o) throw i;\n        }\n      }\n\n      return n;\n    }\n\n    return function (t, n) {\n      if (Array.isArray(t)) return t;\n      if (Symbol.iterator in Object(t)) return e(t, n);\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    };\n  }(),\n      rn = function rn(e, t) {\n    var n = {};\n    t.forEach(function (e) {\n      var t = nn(e, 2),\n          r = t[0],\n          o = t[1];\n      r.split(/\\s+/).forEach(function (e) {\n        e && (n[e] = n[e] || o);\n      });\n    }), e.className = tn()(e.className, n);\n  },\n      on = function on(e, t) {\n    e.style.cssText = Object.keys(t).map(function (e) {\n      return e + \": \" + t[e] + \" !important;\";\n    }).join(\" \");\n  },\n      an = function an(e) {\n    try {\n      return window.parent.frames[e];\n    } catch (e) {\n      return null;\n    }\n  },\n      sn = function sn(e) {\n    if (!document.body) throw new Te(\"Stripe.js requires that your page has a <body> element.\");\n    return e(document.body);\n  },\n      cn = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      un = function un(e) {\n    var t = e.frameId,\n        n = e.controllerId,\n        r = e.type,\n        o = Gt,\n        i = void 0;\n    \"controller\" === r ? i = an(t) : \"group\" === r ? i = an(n) : \"outer\" === r ? i = window.frames[t] : \"inner\" === r && (o = \"*\", i = window.parent), i && i.postMessage(JSON.stringify(cn({}, e, {\n      __stripeJsV3: !0\n    })), o);\n  },\n      ln = function ln(e) {\n    try {\n      var t = \"string\" == typeof e ? JSON.parse(e) : e;\n      return t.__stripeJsV3 ? t : null;\n    } catch (e) {\n      return null;\n    }\n  },\n      pn = (n(7), function (e, t) {\n    var n = e._isUserError || \"IntegrationError\" === e.name;\n    throw t && !n && t.report(\"fatal.uncaught_error\", {\n      iframe: !1,\n      name: e.name,\n      element: \"outer\",\n      message: e.message || e.description,\n      fileName: e.fileName,\n      lineNumber: e.lineNumber,\n      columnNumber: e.columnNumber,\n      stack: e.stack && e.stack.substring(0, 1e3)\n    }), e;\n  }),\n      dn = function dn(e, t) {\n    return function () {\n      try {\n        return e.call(this);\n      } catch (e) {\n        return pn(e, t || this && this._controller);\n      }\n    };\n  },\n      fn = function fn(e, t) {\n    return function (n) {\n      try {\n        return e.call(this, n);\n      } catch (e) {\n        return pn(e, t || this && this._controller);\n      }\n    };\n  },\n      hn = function hn(e, t) {\n    return function (n, r) {\n      try {\n        return e.call(this, n, r);\n      } catch (e) {\n        return pn(e, t || this && this._controller);\n      }\n    };\n  },\n      _n = function _n(e, t) {\n    return function (n, r, o) {\n      try {\n        return e.call(this, n, r, o);\n      } catch (e) {\n        return pn(e, t || this && this._controller);\n      }\n    };\n  },\n      mn = function mn(e, t) {\n    return function () {\n      try {\n        for (var n = arguments.length, r = Array(n), o = 0; o < n; o++) {\n          r[o] = arguments[o];\n        }\n\n        return e.call.apply(e, [this].concat(r));\n      } catch (e) {\n        return pn(e, t || this && this._controller);\n      }\n    };\n  },\n      yn = function e() {\n    var t = this;\n    u(this, e), this._emit = function (e) {\n      for (var n = arguments.length, r = Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) {\n        r[o - 1] = arguments[o];\n      }\n\n      return (t._callbacks[e] || []).forEach(function (e) {\n        var t = e.fn;\n        if (t._isUserCallback) try {\n          t.apply(void 0, r);\n        } catch (e) {\n          throw e._isUserError = !0, e;\n        } else t.apply(void 0, r);\n      }), t;\n    }, this._once = function (e, n) {\n      var r = function r() {\n        t._off(e, r), n.apply(void 0, arguments);\n      };\n\n      return t._on(e, r, n);\n    }, this._removeAllListeners = function () {\n      return t._callbacks = {}, t;\n    }, this._on = function (e, n, r) {\n      return t._callbacks[e] = t._callbacks[e] || [], t._callbacks[e].push({\n        original: r,\n        fn: n\n      }), t;\n    }, this._validateUserOn = function (e, t) {}, this._userOn = function (e, n) {\n      if (\"string\" != typeof e) throw new Te(\"When adding an event listener, the first argument should be a string event name.\");\n      if (\"function\" != typeof n) throw new Te(\"When adding an event listener, the second argument should be a function callback.\");\n      return t._validateUserOn(e, n), n._isUserCallback = !0, t._on(e, n);\n    }, this._hasRegisteredListener = function (e) {\n      return t._callbacks[e] && t._callbacks[e].length > 0;\n    }, this._off = function (e, n) {\n      if (n) {\n        for (var r = t._callbacks[e], o = void 0, i = 0; i < r.length; i++) {\n          if (o = r[i], o.fn === n || o.original === n) {\n            r.splice(i, 1);\n            break;\n          }\n        }\n      } else delete t._callbacks[e];\n\n      return t;\n    }, this._callbacks = {};\n    var n = hn(this._userOn),\n        r = hn(this._off),\n        o = hn(this._once),\n        i = fn(this._hasRegisteredListener),\n        a = fn(this._removeAllListeners),\n        s = mn(this._emit);\n    this.on = this.addListener = this.addEventListener = n, this.off = this.removeListener = this.removeEventListener = r, this.once = o, this.hasRegisteredListener = i, this.removeAllListeners = a, this.emit = s;\n  },\n      vn = yn,\n      bn = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      gn = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      En = function (e) {\n    function t(e, n, r, o) {\n      p(this, t);\n      var i = d(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));\n      return i._sendFAReq = function (e) {\n        var t = Jt(e.tag);\n        return new Me(function (n, r) {\n          i._requests[t] = {\n            resolve: n,\n            reject: r\n          }, i._send({\n            message: {\n              action: \"stripe-frame-action\",\n              payload: {\n                nonce: t,\n                faReq: e\n              }\n            },\n            type: \"outer\",\n            frameId: i.id,\n            controllerId: i._controllerId\n          });\n        });\n      }, i.action = {\n        perform3DS2Challenge: function perform3DS2Challenge(e) {\n          return i._sendFAReq({\n            tag: \"PERFORM_3DS2_CHALLENGE\",\n            value: e\n          });\n        },\n        perform3DS2Fingerprint: function perform3DS2Fingerprint(e) {\n          return i._sendFAReq({\n            tag: \"PERFORM_3DS2_FINGERPRINT\",\n            value: e\n          });\n        },\n        show3DS2Spinner: function show3DS2Spinner(e) {\n          return i._sendFAReq({\n            tag: \"SHOW_3DS2_SPINNER\",\n            value: e\n          });\n        },\n        checkCanMakePayment: function checkCanMakePayment(e) {\n          return i._sendFAReq({\n            tag: \"CHECK_CAN_MAKE_PAYMENT\",\n            value: e\n          });\n        }\n      }, i.type = e, i.loaded = !1, i._controllerId = n, i._persistentMessages = [], i._queuedMessages = [], i._requests = {}, i._listenerRegistry = r, i.id = i._generateId(), i._iframe = i._createIFrame(o), i._on(\"load\", function () {\n        i.loaded = !0, i._ensureMounted(), i.loaded && (i._persistentMessages.forEach(function (e) {\n          return i._send(e);\n        }), i._queuedMessages.forEach(function (e) {\n          return i._send(e);\n        }), i._queuedMessages = []);\n      }), i;\n    }\n\n    return f(t, e), gn(t, [{\n      key: \"_generateId\",\n      value: function value() {\n        return Jt(\"__privateStripeFrame\");\n      }\n    }, {\n      key: \"send\",\n      value: function value(e) {\n        this._send({\n          message: e,\n          type: \"outer\",\n          frameId: this.id,\n          controllerId: this._controllerId\n        });\n      }\n    }, {\n      key: \"sendPersistent\",\n      value: function value(e) {\n        this._ensureMounted();\n\n        var t = {\n          message: e,\n          type: \"outer\",\n          frameId: this.id,\n          controllerId: this._controllerId\n        };\n        this._persistentMessages = [].concat(l(this._persistentMessages), [t]), this.loaded && un(t);\n      }\n    }, {\n      key: \"resolve\",\n      value: function value(e, t) {\n        this._requests[e] && this._requests[e].resolve(t);\n      }\n    }, {\n      key: \"reject\",\n      value: function value(e, t) {\n        this._requests[e] && this._requests[e].reject(t);\n      }\n    }, {\n      key: \"_send\",\n      value: function value(e) {\n        this._ensureMounted(), this.loaded ? un(e) : this._queuedMessages = [].concat(l(this._queuedMessages), [e]);\n      }\n    }, {\n      key: \"appendTo\",\n      value: function value(e) {\n        e.appendChild(this._iframe);\n      }\n    }, {\n      key: \"unmount\",\n      value: function value() {\n        this.loaded = !1, this._emit(\"unload\");\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        this.unmount();\n        var e = this._iframe.parentElement;\n        e && e.removeChild(this._iframe), this._emit(\"destroy\");\n      }\n    }, {\n      key: \"_ensureMounted\",\n      value: function value() {\n        this._isMounted() || this.unmount();\n      }\n    }, {\n      key: \"_isMounted\",\n      value: function value() {\n        return !!document.body && document.body.contains(this._iframe);\n      }\n    }, {\n      key: \"_createIFrame\",\n      value: function value(e) {\n        var t = window.location.href.toString(),\n            n = Je(t),\n            r = n ? n.origin : \"\",\n            o = e.queryString && \"string\" == typeof e.queryString ? e.queryString : Zt(bn({}, e, {\n          origin: r,\n          referrer: t,\n          controllerId: this._controllerId\n        })),\n            i = document.createElement(\"iframe\");\n        return i.setAttribute(\"frameborder\", \"0\"), i.setAttribute(\"allowTransparency\", \"true\"), i.setAttribute(\"scrolling\", \"no\"), i.setAttribute(\"name\", this.id), i.setAttribute(\"allowpaymentrequest\", \"true\"), i.src = Lt(this.type) + \"#\" + o, i;\n      }\n    }]), t;\n  }(vn),\n      wn = En,\n      Sn = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      Pn = function e(t, n, r) {\n    null === t && (t = Function.prototype);\n    var o = Object.getOwnPropertyDescriptor(t, n);\n\n    if (void 0 === o) {\n      var i = Object.getPrototypeOf(t);\n      return null === i ? void 0 : e(i, n, r);\n    }\n\n    if (\"value\" in o) return o.value;\n    var a = o.get;\n    if (void 0 !== a) return a.call(r);\n  },\n      On = {\n    border: \"none\",\n    margin: \"0\",\n    padding: \"0\",\n    width: \"1px\",\n    \"min-width\": \"100%\",\n    overflow: \"hidden\",\n    display: \"block\",\n    visibility: \"hidden\",\n    position: \"fixed\",\n    height: \"1px\",\n    \"pointer-events\": \"none\",\n    \"user-select\": \"none\"\n  },\n      kn = function (e) {\n    function t(e, n, r, o) {\n      h(this, t);\n\n      var i = _(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, n, r, o));\n\n      if (i.autoload = o.autoload || !1, \"complete\" === document.readyState) i._ensureMounted();else {\n        var a = i._ensureMounted.bind(i);\n\n        i._listenerRegistry.addEventListener(document, \"DOMContentLoaded\", a), i._listenerRegistry.addEventListener(window, \"load\", a), setTimeout(a, 5e3);\n      }\n      return i;\n    }\n\n    return m(t, e), Sn(t, [{\n      key: \"_ensureMounted\",\n      value: function value() {\n        Pn(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), \"_ensureMounted\", this).call(this), this._isMounted() || this._autoMount();\n      }\n    }, {\n      key: \"_autoMount\",\n      value: function value() {\n        if (document.body) this.appendTo(document.body);else if (\"complete\" === document.readyState || \"interactive\" === document.readyState) throw new Te(\"Stripe.js requires that your page has a <body> element.\");\n        this.autoload && (this.loaded = !0);\n      }\n    }, {\n      key: \"_createIFrame\",\n      value: function value(e) {\n        var n = Pn(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), \"_createIFrame\", this).call(this, e);\n        return n.setAttribute(\"aria-hidden\", \"true\"), n.setAttribute(\"allowpaymentrequest\", \"true\"), n.setAttribute(\"tabIndex\", \"-1\"), on(n, On), n;\n      }\n    }]), t;\n  }(wn),\n      An = kn,\n      Tn = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      Rn = function (e) {\n    function t() {\n      return y(this, t), v(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));\n    }\n\n    return b(t, e), Tn(t, [{\n      key: \"_generateId\",\n      value: function value() {\n        return this._controllerId;\n      }\n    }]), t;\n  }(An),\n      In = Rn,\n      Nn = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      Cn = function e(t, n, r) {\n    null === t && (t = Function.prototype);\n    var o = Object.getOwnPropertyDescriptor(t, n);\n\n    if (void 0 === o) {\n      var i = Object.getPrototypeOf(t);\n      return null === i ? void 0 : e(i, n, r);\n    }\n\n    if (\"value\" in o) return o.value;\n    var a = o.get;\n    if (void 0 !== a) return a.call(r);\n  },\n      Mn = {\n    border: \"none\",\n    margin: \"0\",\n    padding: \"0\",\n    width: \"1px\",\n    \"min-width\": \"100%\",\n    overflow: \"hidden\",\n    display: \"block\",\n    \"user-select\": \"none\"\n  },\n      jn = function (e) {\n    function t() {\n      return g(this, t), E(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));\n    }\n\n    return w(t, e), Nn(t, [{\n      key: \"update\",\n      value: function value(e) {\n        this.send({\n          action: \"stripe-user-update\",\n          payload: e\n        });\n      }\n    }, {\n      key: \"updateStyle\",\n      value: function value(e) {\n        var t = this;\n        Object.keys(e).forEach(function (n) {\n          t._iframe.style[n] = e[n];\n        });\n      }\n    }, {\n      key: \"focus\",\n      value: function value() {\n        this.loaded && this.send({\n          action: \"stripe-user-focus\",\n          payload: {}\n        });\n      }\n    }, {\n      key: \"blur\",\n      value: function value() {\n        this.loaded && (this._iframe.contentWindow.blur(), this._iframe.blur());\n      }\n    }, {\n      key: \"clear\",\n      value: function value() {\n        this.send({\n          action: \"stripe-user-clear\",\n          payload: {}\n        });\n      }\n    }, {\n      key: \"_createIFrame\",\n      value: function value(e) {\n        var n = Cn(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), \"_createIFrame\", this).call(this, e);\n        return n.setAttribute(\"title\", \"Secure payment input frame\"), on(n, Mn), n;\n      }\n    }]), t;\n  }(wn),\n      Ln = jn,\n      xn = function xn(e, t) {\n    var n = !1;\n    return function () {\n      if (n) throw new Te(t);\n      n = !0;\n\n      try {\n        return e.apply(void 0, arguments).then(function (e) {\n          return n = !1, e;\n        }, function (e) {\n          throw n = !1, e;\n        });\n      } catch (e) {\n        throw n = !1, e;\n      }\n    };\n  },\n      Dn = function Dn(e) {\n    var t = e;\n    return function () {\n      t && (t.apply(void 0, arguments), t = null);\n    };\n  },\n      qn = function qn() {\n    return sn(function (e) {\n      var t = e.style,\n          n = t.position,\n          r = t.top,\n          o = t.left,\n          i = t.bottom,\n          a = t.right,\n          s = t.overflow,\n          c = document.documentElement ? document.documentElement.style : {\n        overflow: \"\",\n        scrollBehavior: \"\"\n      },\n          u = c.overflow,\n          l = c.scrollBehavior,\n          p = window,\n          d = p.pageXOffset,\n          f = p.pageYOffset,\n          h = document.documentElement ? window.innerWidth - document.documentElement.offsetWidth : 0,\n          _ = document.documentElement ? window.innerHeight - document.documentElement.offsetHeight : 0;\n\n      return e.style.position = \"fixed\", e.style.overflow = \"hidden\", document.documentElement && (document.documentElement.style.overflow = \"visible\", document.documentElement.style.scrollBehavior = \"auto\"), e.style.top = -f + \"px\", e.style.left = -d + \"px\", e.style.right = h + \"px\", e.style.bottom = _ + \"px\", Dn(function () {\n        e.style.position = n, e.style.top = r, e.style.left = o, e.style.bottom = i, e.style.right = a, e.style.overflow = s, document.documentElement && (document.documentElement.style.overflow = u), window.scrollTo(d, f), document.documentElement && (document.documentElement.style.scrollBehavior = l);\n      });\n    });\n  },\n      Fn = function Fn(e, t) {\n    return e ? window.getComputedStyle(e, t) : null;\n  },\n      Bn = Fn,\n      Un = function Un(e, t) {\n    var n = Array.prototype.slice.call(document.querySelectorAll(\"a[href], area[href], input:not([disabled]),\\n  select:not([disabled]), textarea:not([disabled]), button:not([disabled]),\\n  object, embed, *[tabindex], *[contenteditable]\")).filter(function (e) {\n      var t = e.getAttribute(\"tabindex\"),\n          n = !t || parseInt(t, 10) >= 0,\n          r = e.getBoundingClientRect(),\n          o = Bn(e),\n          i = r.width > 0 && r.height > 0 && o && \"hidden\" !== o.getPropertyValue(\"visibility\");\n      return n && i;\n    });\n    return n[xe(n, function (t) {\n      return t === e || e.contains(t);\n    }) + (\"previous\" === t ? -1 : 1)];\n  },\n      Hn = function Hn(e) {\n    var t = [],\n        n = Fe(document.querySelectorAll(\"*\"), function (n) {\n      var r = n.getAttribute(\"tabindex\") || \"\";\n      e !== n && (n.tabIndex = -1), t.push({\n        element: n,\n        tabIndex: r\n      });\n    });\n    return Dn(function () {\n      n.then(function () {\n        return Fe(t, function (e) {\n          var t = e.element,\n              n = e.tabIndex;\n          \"\" === n ? t.removeAttribute(\"tabindex\") : t.setAttribute(\"tabindex\", n);\n        });\n      });\n    });\n  },\n      Yn = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Gn = {\n    display: \"block\",\n    position: \"fixed\",\n    \"z-index\": \"2147483647\",\n    background: \"rgba(40,40,40,0)\",\n    transition: \"background 400ms ease\",\n    \"will-change\": \"background\",\n    top: \"0\",\n    left: \"0\",\n    right: \"0\",\n    bottom: \"0\"\n  },\n      Wn = Yn({}, Gn, {\n    background: \"rgba(40,40,40,0.75)\"\n  }),\n      zn = function e(t) {\n    var n = this,\n        r = t.lockScrolling,\n        o = t.lockFocus,\n        i = t.lockFocusOn,\n        a = t.listenerRegistry;\n    S(this, e), this.domElement = document.createElement(\"div\"), this._runOnHide = [], this.mount = function () {\n      sn(function (e) {\n        n.domElement.style.display = \"none\", e.contains(n.domElement) || e.insertBefore(n.domElement, e.firstChild);\n      });\n    }, this.show = function () {\n      if (on(n.domElement, Gn), n._lockScrolling) {\n        var e = qn();\n\n        n._runOnHide.push(e);\n      }\n\n      if (n._lockFocus) {\n        var t = Hn(n._lockFocusOn);\n\n        n._runOnHide.push(t);\n      }\n    }, this.fadeIn = function () {\n      setTimeout(function () {\n        on(n.domElement, Wn);\n      });\n    }, this.fadeOut = function () {\n      return new Me(function (e) {\n        on(n.domElement, Gn), setTimeout(e, 500), n._listenerRegistry.addEventListener(n.domElement, \"transitionend\", e);\n      }).then(function () {\n        for (n.domElement.style.display = \"none\"; n._runOnHide.length;) {\n          n._runOnHide.pop()();\n        }\n      });\n    }, this.unmount = function () {\n      sn(function (e) {\n        e.removeChild(n.domElement);\n      });\n    }, this._lockScrolling = !!r, this._lockFocus = !!o, this._lockFocusOn = i || null, this._listenerRegistry = a;\n  },\n      Kn = zn,\n      Vn = function e(t, n, r) {\n    null === t && (t = Function.prototype);\n    var o = Object.getOwnPropertyDescriptor(t, n);\n\n    if (void 0 === o) {\n      var i = Object.getPrototypeOf(t);\n      return null === i ? void 0 : e(i, n, r);\n    }\n\n    if (\"value\" in o) return o.value;\n    var a = o.get;\n    if (void 0 !== a) return a.call(r);\n  },\n      Jn = {\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    height: \"100%\",\n    width: \"100%\"\n  },\n      Qn = function (e) {\n    function t(e, n, r, o) {\n      P(this, t);\n      var i = O(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e, n, r, o));\n      return i._autoMount = function () {\n        i.appendTo(i._backdrop.domElement), i._backdrop.mount();\n      }, i.show = function () {\n        i._backdrop.show(), on(i._iframe, Jn);\n      }, i.fadeInBackdrop = function () {\n        i._backdrop.fadeIn();\n      }, i._backdropFadeoutPromise = null, i.fadeOutBackdrop = function () {\n        return i._backdropFadeoutPromise || (i._backdropFadeoutPromise = i._backdrop.fadeOut()), i._backdropFadeoutPromise;\n      }, i.destroy = function () {\n        return i.fadeOutBackdrop().then(function () {\n          i._backdrop.unmount(), Vn(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), \"destroy\", i).call(i);\n        });\n      }, i._backdrop = new Kn({\n        lockScrolling: !0,\n        lockFocus: !0,\n        lockFocusOn: i._iframe,\n        listenerRegistry: r\n      }), i._autoMount(), i;\n    }\n\n    return k(t, e), t;\n  }(wn),\n      $n = Qn,\n      Xn = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Zn = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      er = function e(t, n, r) {\n    null === t && (t = Function.prototype);\n    var o = Object.getOwnPropertyDescriptor(t, n);\n\n    if (void 0 === o) {\n      var i = Object.getPrototypeOf(t);\n      return null === i ? void 0 : e(i, n, r);\n    }\n\n    if (\"value\" in o) return o.value;\n    var a = o.get;\n    if (void 0 !== a) return a.call(r);\n  },\n      tr = {\n    display: \"block\",\n    position: \"absolute\",\n    \"z-index\": \"1000\",\n    width: \"1px\",\n    \"min-width\": \"100%\",\n    margin: \"2px 0 0 0\",\n    padding: \"0\",\n    border: \"none\",\n    overflow: \"hidden\"\n  },\n      nr = function (e) {\n    function t() {\n      return A(this, t), T(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));\n    }\n\n    return R(t, e), Zn(t, [{\n      key: \"updateStyle\",\n      value: function value(e) {\n        var t = this;\n        Object.keys(e).forEach(function (n) {\n          t._iframe.style[n] = e[n];\n        });\n      }\n    }, {\n      key: \"update\",\n      value: function value(e) {\n        this.send({\n          action: \"stripe-user-update\",\n          payload: e\n        });\n      }\n    }, {\n      key: \"_createIFrame\",\n      value: function value(e) {\n        var n = er(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), \"_createIFrame\", this).call(this, Xn({}, e, {\n          isSecondaryFrame: !0\n        }));\n        return on(n, tr), n.style.height = \"0\", n;\n      }\n    }]), t;\n  }(wn),\n      rr = nr,\n      or = function or(e) {\n    var t = Je(e),\n        n = t ? t.host : \"\";\n    return \"stripe.com\" === n || !!n.match(/\\.stripe\\.(com|me)$/);\n  },\n      ir = function ir(e, t) {\n    var n = Je(e),\n        r = Je(t);\n    return !(!n || !r) && n.origin === r.origin;\n  },\n      ar = function ar(e) {\n    return ir(e, \"https://js.stripe.com/v3/\");\n  },\n      sr = function sr(e) {\n    return ar(e) || or(e);\n  },\n      cr = [\"button\", \"checkbox\", \"file\", \"hidden\", \"image\", \"submit\", \"radio\", \"reset\"],\n      ur = function ur(e) {\n    var t = e.tagName;\n    if (e.isContentEditable || \"TEXTAREA\" === t) return !0;\n    if (\"INPUT\" !== t) return !1;\n    var n = e.getAttribute(\"type\");\n    return -1 === cr.indexOf(n);\n  },\n      lr = ur,\n      pr = function pr(e) {\n    return /Edge\\//i.test(e);\n  },\n      dr = function dr(e) {\n    return /(MSIE ([0-9]{1,}[.0-9]{0,})|Trident\\/)/i.test(e);\n  },\n      fr = function fr(e) {\n    return /SamsungBrowser/.test(e);\n  },\n      hr = function hr(e) {\n    return /iPad|iPhone/i.test(e) && !dr(e);\n  },\n      _r = function _r(e) {\n    return /Android/i.test(e) && !dr(e);\n  },\n      mr = window.navigator.userAgent,\n      yr = pr(mr),\n      vr = (function (e) {\n    /Edge\\/((1[0-6]\\.)|0\\.)/i.test(e);\n  }(mr), dr(mr)),\n      br = (function (e) {\n    /MSIE ([0-9]{1,}[.0-9]{0,})/i.test(e);\n  }(mr), hr(mr)),\n      gr = (function (e) {\n    hr(e) || _r(e);\n  }(mr), _r(mr), function (e) {\n    /Android 4\\./i.test(e) && !/Chrome/i.test(e) && _r(e);\n  }(mr), function (e) {\n    return /^((?!chrome|android).)*safari/i.test(e) && !fr(e);\n  }(mr)),\n      Er = (function (e) {\n    /Firefox\\//i.test(e);\n  }(mr), function (e) {\n    /Firefox\\/(50|51|[0-4]?\\d)([^\\d]|$)/i.test(e);\n  }(mr), fr(mr)),\n      wr = (function (e) {\n    /Chrome\\/(6[6-9]|[7-9]\\d+|[1-9]\\d{2,})/i.test(e);\n  }(mr), function (e) {\n    return /AppleWebKit/i.test(e) && !/Chrome/i.test(e) && !pr(e) && !dr(e);\n  }(mr)),\n      Sr = function (e) {\n    return /Chrome/i.test(e) && !pr(e);\n  }(mr),\n      Pr = function Pr(e) {\n    var t = e.name,\n        n = e.value,\n        r = e.expiresIn,\n        o = e.path,\n        i = e.domain,\n        a = new Date(),\n        s = r || 31536e6;\n    a.setTime(a.getTime() + s);\n    var c = o || \"/\",\n        u = (n || \"\").replace(/[^!#-+\\--:<-[\\]-~]/g, encodeURIComponent),\n        l = encodeURIComponent(t) + \"=\" + u + \";expires=\" + a.toGMTString() + \";path=\" + c + \";SameSite=Lax\";\n    return i && (l += \";domain=\" + i), document.cookie = l, l;\n  },\n      Or = function Or(e) {\n    var t = Le(document.cookie.split(\"; \"), function (t) {\n      var n = t.indexOf(\"=\");\n      return decodeURIComponent(t.substr(0, n)) === e;\n    });\n\n    if (t) {\n      var n = t.indexOf(\"=\");\n      return decodeURIComponent(t.substr(n + 1));\n    }\n\n    return null;\n  },\n      kr = function kr(e) {\n    var t = {};\n    return e.replace(/\\+/g, \" \").split(\"&\").forEach(function (e, n) {\n      var r = e.split(\"=\"),\n          o = decodeURIComponent(r[0]),\n          i = void 0,\n          a = t,\n          s = 0,\n          c = o.split(\"][\"),\n          u = c.length - 1;\n      if (/\\[/.test(c[0]) && /\\]$/.test(c[u]) ? (c[u] = c[u].replace(/\\]$/, \"\"), c = c.shift().split(\"[\").concat(c), u = c.length - 1) : u = 0, 2 === r.length) {\n        if (i = decodeURIComponent(r[1]), u) for (; s <= u; s++) {\n          o = \"\" === c[s] ? a.length : c[s], a[o] = s < u ? a[o] || (c[s + 1] && isNaN(c[s + 1]) ? {} : []) : i, a = a[o];\n        } else Array.isArray(t[o]) ? t[o].push(i) : void 0 !== t[o] ? t[o] = [t[o], i] : t[o] = i;\n      } else o && (t[o] = \"\");\n    }), t;\n  },\n      Ar = kr,\n      Tr = n(8),\n      Rr = n.n(Tr),\n      Ir = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Nr = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      Cr = function Cr(e) {\n    return e && \"object\" === (void 0 === e ? \"undefined\" : Nr(e)) && (e.constructor === Array || e.constructor === Object);\n  },\n      Mr = function Mr(e) {\n    return Cr(e) ? Array.isArray(e) ? e.slice(0, e.length) : Ir({}, e) : e;\n  },\n      jr = function e(t) {\n    return function () {\n      for (var n = arguments.length, r = Array(n), o = 0; o < n; o++) {\n        r[o] = arguments[o];\n      }\n\n      if (Array.isArray(r[0]) && t) return Mr(r[0]);\n      var i = Array.isArray(r[0]) ? [] : {};\n      return r.forEach(function (n) {\n        n && Object.keys(n).forEach(function (r) {\n          var o = i[r],\n              a = n[r],\n              s = Cr(o) && !(t && Array.isArray(o));\n          \"object\" === (void 0 === a ? \"undefined\" : Nr(a)) && s ? i[r] = e(t)(o, Mr(a)) : void 0 !== a ? i[r] = Cr(a) ? e(t)(a) : Mr(a) : void 0 !== o && (i[r] = o);\n        });\n      }), i;\n    };\n  },\n      Lr = (jr(!1), jr(!0)),\n      xr = Ht.replace(/\\/$/, \"\"),\n      Dr = \"_1776170249\",\n      qr = function (e) {\n    var t = I({}, Dr, !0);\n\n    try {\n      var n = Ar(e.slice(e.indexOf(\"?\") + 1));\n      Object.keys(n).forEach(function (e) {\n        var r = Rr()(e),\n            o = n[e];\n\n        switch (r) {\n          case Dr:\n            \"false\" === o && (t[r] = !1);\n        }\n      });\n    } catch (e) {}\n\n    return t;\n  }(function (e) {\n    try {\n      if (e.currentScript) return e.currentScript.src;\n      var t = e.querySelectorAll('script[src^=\"' + xr + '\"]'),\n          n = Le(t, function (e) {\n        var t = e.getAttribute(\"src\") || \"\",\n            n = t.split(\"?\")[0];\n        return new RegExp(\"^\" + xr + \"/?$\").test(n);\n      });\n      return n && n.getAttribute(\"src\") || \"\";\n    } catch (e) {\n      return \"\";\n    }\n  }(document)),\n      Fr = qr[Dr],\n      Br = function () {\n    function e(e, t) {\n      var n = [],\n          r = !0,\n          o = !1,\n          i = void 0;\n\n      try {\n        for (var a, s = e[Symbol.iterator](); !(r = (a = s.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0) {\n          ;\n        }\n      } catch (e) {\n        o = !0, i = e;\n      } finally {\n        try {\n          !r && s[\"return\"] && s[\"return\"]();\n        } finally {\n          if (o) throw i;\n        }\n      }\n\n      return n;\n    }\n\n    return function (t, n) {\n      if (Array.isArray(t)) return t;\n      if (Symbol.iterator in Object(t)) return e(t, n);\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    };\n  }(),\n      Ur = function Ur() {\n    var e = [];\n    return {\n      addEventListener: function addEventListener(t, n, r) {\n        t.addEventListener(n, r), e.push([t, n, r]);\n      },\n      removeEventListener: function removeEventListener(t, n, r) {\n        t.removeEventListener(n, r), e = e.filter(function (e) {\n          var o = Br(e, 3),\n              i = o[0],\n              a = o[1],\n              s = o[2];\n          return i !== t || a !== n || s !== r;\n        });\n      }\n    };\n  },\n      Hr = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      Yr = \"__privateStripeMetricsController\",\n      Gr = {\n    MERCHANT: \"merchant\",\n    SESSION: \"session\"\n  },\n      Wr = function () {\n    function e() {\n      var t = this,\n          n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n\n      if (N(this, e), this._controllerFrame = null, n.checkoutIds) {\n        var r = n.checkoutIds,\n            o = r.muid,\n            i = r.sid;\n        this._muid = o, this._sid = i, this._doNotPersist = !0;\n      } else this._muid = this._getID(Gr.MERCHANT), this._sid = this._getID(Gr.SESSION), this._doNotPersist = !1;\n\n      this._listenerRegistry = Ur(), this._guidPromise = new Me(function (e) {\n        t._establishMessageChannel(e);\n      }), this._id = Jt(Yr), Fr && (this._controllerFrame = new In(Nt.METRICS_CONTROLLER, this._id, this._listenerRegistry, {\n        autoload: !0,\n        queryString: this._buildFrameQueryString()\n      }), this._startIntervalCheck(), setTimeout(this._testLatency.bind(this), 2e3 + 500 * Math.random()));\n    }\n\n    return Hr(e, [{\n      key: \"ids\",\n      value: function value() {\n        return {\n          guid: this._guid || \"NA\",\n          muid: this._muid || \"NA\",\n          sid: this._sid || \"NA\"\n        };\n      }\n    }, {\n      key: \"idsPromise\",\n      value: function value() {\n        var e = this;\n        return this._guidPromise.then(function () {\n          return e.ids();\n        });\n      }\n    }, {\n      key: \"_establishMessageChannel\",\n      value: function value(e) {\n        var t = this;\n        if (!Fr) return this._guid = Qt(), void e();\n\n        this._listenerRegistry.addEventListener(window, \"message\", function (n) {\n          var r = n.data;\n          if (\"string\" == typeof r) try {\n            var o = JSON.parse(r),\n                i = o.originatingScript,\n                a = o.payload;\n            \"m\" === i && (t._guid = a, e());\n          } catch (e) {}\n        });\n      }\n    }, {\n      key: \"_startIntervalCheck\",\n      value: function value() {\n        var e = this,\n            t = window.location.href;\n        setInterval(function () {\n          var n = window.location.href;\n          n !== t && (e.send({\n            action: \"ping\",\n            payload: {\n              sid: e._getID(Gr.SESSION),\n              muid: e._getID(Gr.MERCHANT),\n              title: document.title,\n              referrer: document.referrer,\n              url: document.location.href\n            }\n          }), t = n);\n        }, 5e3);\n      }\n    }, {\n      key: \"report\",\n      value: function value(e, t) {\n        try {\n          this.send({\n            action: \"track\",\n            payload: {\n              sid: this._getID(Gr.SESSION),\n              muid: this._getID(Gr.MERCHANT),\n              url: document.location.href,\n              source: e,\n              data: t\n            }\n          });\n        } catch (e) {}\n      }\n    }, {\n      key: \"send\",\n      value: function value(e) {\n        var t = Lt(Nt.METRICS_CONTROLLER);\n        ar(t) && this._controllerFrame && this._controllerFrame.send(e);\n      }\n    }, {\n      key: \"safeSend\",\n      value: function value(e) {\n        var t = this;\n\n        this._guidPromise.then(function () {\n          t.send(e);\n        });\n      }\n    }, {\n      key: \"_testLatency\",\n      value: function value() {\n        var e = this,\n            t = [],\n            n = new Date(),\n            r = function r() {\n          try {\n            var o = new Date();\n            t.push(o - n), t.length >= 10 && (e.report(\"mouse-timings-10\", t), e._listenerRegistry.removeEventListener(document, \"mousemove\", r)), n = o;\n          } catch (e) {}\n        };\n\n        this._listenerRegistry.addEventListener(document, \"mousemove\", r);\n      }\n    }, {\n      key: \"_extractMetaReferrerPolicy\",\n      value: function value() {\n        var e = document.querySelector(\"meta[name=referrer]\");\n        return null != e && e instanceof HTMLMetaElement ? e.content.toLowerCase() : null;\n      }\n    }, {\n      key: \"_extractUrl\",\n      value: function value(e) {\n        var t = document.location.href;\n\n        switch (e) {\n          case \"origin\":\n          case \"strict-origin\":\n          case \"origin-when-cross-origin\":\n          case \"strict-origin-when-cross-origin\":\n            return document.location.origin;\n\n          case \"unsafe-url\":\n            return t.split(\"#\")[0];\n\n          default:\n            return t;\n        }\n      }\n    }, {\n      key: \"_buildFrameQueryString\",\n      value: function value() {\n        var e = this._extractMetaReferrerPolicy(),\n            t = this._extractUrl(e),\n            n = {\n          url: t,\n          title: document.title,\n          referrer: document.referrer,\n          muid: this._muid,\n          sid: this._sid,\n          preview: sr(t)\n        };\n\n        return null != e && (n.metaReferrerPolicy = e), Object.keys(n).map(function (e) {\n          return null != n[e] ? e + \"=\" + encodeURIComponent(n[e].toString()) : null;\n        }).join(\"&\");\n      }\n    }, {\n      key: \"_getID\",\n      value: function value(e) {\n        switch (e) {\n          case Gr.MERCHANT:\n            if (this._doNotPersist) return this._muid;\n\n            try {\n              var t = Fr && Or(\"__stripe_mid\") || Qt();\n              return Fr && Pr({\n                name: \"__stripe_mid\",\n                value: t,\n                domain: \".\" + document.location.hostname\n              }), t;\n            } catch (e) {\n              return \"NA\";\n            }\n\n          case Gr.SESSION:\n            if (this._doNotPersist) return this._sid;\n\n            try {\n              var n = Fr && Or(\"__stripe_sid\") || Qt();\n              return Fr && Pr({\n                name: \"__stripe_sid\",\n                value: n,\n                domain: \".\" + document.location.hostname,\n                expiresIn: 18e5\n              }), n;\n            } catch (e) {\n              return \"NA\";\n            }\n\n          default:\n            throw new Error(\"Invalid ID type specified: \" + e);\n        }\n      }\n    }]), e;\n  }(),\n      zr = null,\n      Kr = function Kr() {\n    return zr;\n  },\n      Vr = function Vr() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    return zr = new Wr(e);\n  },\n      Jr = !1,\n      Qr = function Qr() {\n    var e = Kr();\n    e && (Jr || (Jr = !0, e.safeSend({\n      action: \"ping\",\n      payload: {\n        v2: 2,\n        sid: e._getID(Gr.SESSION),\n        muid: e._getID(Gr.MERCHANT),\n        title: document.title,\n        referrer: document.referrer,\n        url: document.location.href\n      }\n    })));\n  },\n      $r = Qr,\n      Xr = (be = {}, C(be, Dt.card, {\n    unique: !0,\n    conflict: [Dt.cardNumber, Dt.cardExpiry, Dt.cardCvc, Dt.postalCode],\n    beta: !1\n  }), C(be, Dt.cardNumber, {\n    unique: !0,\n    conflict: [Dt.card],\n    beta: !1\n  }), C(be, Dt.cardExpiry, {\n    unique: !0,\n    conflict: [Dt.card],\n    beta: !1\n  }), C(be, Dt.cardCvc, {\n    unique: !0,\n    conflict: [Dt.card],\n    beta: !1\n  }), C(be, Dt.postalCode, {\n    unique: !0,\n    conflict: [Dt.card],\n    beta: !1\n  }), C(be, Dt.paymentRequestButton, {\n    unique: !0,\n    conflict: [],\n    beta: !1\n  }), C(be, Dt.iban, {\n    unique: !0,\n    conflict: [],\n    beta: !1\n  }), C(be, Dt.idealBank, {\n    unique: !0,\n    conflict: [],\n    beta: !1\n  }), C(be, Dt.auBankAccount, {\n    unique: !0,\n    beta: !1,\n    conflict: []\n  }), C(be, Dt.fpxBank, {\n    unique: !0,\n    beta: !1,\n    conflict: []\n  }), be),\n      Zr = Xr,\n      eo = (ge = {}, M(ge, Dt.card, Nt.CARD_ELEMENT), M(ge, Dt.cardNumber, Nt.CARD_ELEMENT), M(ge, Dt.cardExpiry, Nt.CARD_ELEMENT), M(ge, Dt.cardCvc, Nt.CARD_ELEMENT), M(ge, Dt.postalCode, Nt.CARD_ELEMENT), M(ge, Dt.paymentRequestButton, Nt.PAYMENT_REQUEST_ELEMENT), M(ge, Dt.iban, Nt.IBAN_ELEMENT), M(ge, Dt.idealBank, Nt.IDEAL_BANK_ELEMENT), M(ge, Dt.auBankAccount, Nt.AU_BANK_ACCOUNT_ELEMENT), M(ge, Dt.fpxBank, Nt.FPX_BANK_ELEMENT), ge),\n      to = eo,\n      no = [\"brand\"],\n      ro = [\"country\", \"bankName\"],\n      oo = [\"bankName\", \"branchName\"],\n      io = (Ee = {}, j(Ee, Dt.card, no), j(Ee, Dt.cardNumber, no), j(Ee, Dt.iban, ro), j(Ee, Dt.auBankAccount, oo), Ee),\n      ao = (we = {}, j(we, Dt.idealBank, {\n    secondary: Dt.idealBankSecondary\n  }), j(we, Dt.fpxBank, {\n    secondary: Dt.fpxBankSecondary\n  }), we),\n      so = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      co = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      uo = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      lo = \"__privateStripeController\",\n      po = !1,\n      fo = function fo(e, t) {\n    return document.activeElement === e._iframe || e._iframe.parentElement && document.activeElement === t;\n  },\n      ho = function ho(e) {\n    return \"object\" === (void 0 === e ? \"undefined\" : uo(e)) && null !== e && \"IntegrationError\" === e.name ? new Te(\"string\" == typeof e.message ? e.message : \"\") : e;\n  },\n      _o = function () {\n    function e(t) {\n      x(this, e), mo.call(this);\n      var n = t.listenerRegistry,\n          r = L(t, [\"listenerRegistry\"]),\n          o = r.apiKey,\n          i = r.stripeAccount,\n          a = r.stripeJsId,\n          s = r.locale;\n      this._id = Jt(lo), this._stripeJsId = a, this._apiKey = o, this._stripeAccount = i, this._listenerRegistry = n, this._controllerFrame = new In(Nt.CONTROLLER, this._id, this._listenerRegistry, so({}, r)), this._frames = {}, this._requests = {}, this._setupPostMessage(), this._handleMessage = fn(this._handleMessage, this), this.action.fetchLocale({\n        locale: s || \"auto\"\n      });\n    }\n\n    return co(e, [{\n      key: \"registerWrapper\",\n      value: function value(e) {\n        this._controllerFrame.send({\n          action: \"stripe-wrapper-register\",\n          payload: {\n            wrapperLibrary: e\n          }\n        });\n      }\n    }]), e;\n  }(),\n      mo = function mo() {\n    var e = this;\n    this._sendCAReq = function (t) {\n      var n = Jt(t.tag);\n      return new Me(function (r, o) {\n        e._requests[n] = {\n          resolve: r,\n          reject: o\n        }, e._controllerFrame.send({\n          action: \"stripe-safe-controller-action-request\",\n          payload: {\n            nonce: n,\n            caReq: t\n          }\n        });\n      });\n    }, this.livemode = function () {\n      var t = e._apiKey;\n      return /^pk_test_/.test(t) ? \"testmode\" : /^pk_live_/.test(t) ? \"livemode\" : \"unknown\";\n    }, this.action = {\n      retrievePaymentIntent: function retrievePaymentIntent(t) {\n        return e._sendCAReq({\n          tag: \"RETRIEVE_PAYMENT_INTENT\",\n          value: t\n        });\n      },\n      confirmPaymentIntent: function confirmPaymentIntent(t) {\n        return e._sendCAReq({\n          tag: \"CONFIRM_PAYMENT_INTENT\",\n          value: t\n        });\n      },\n      cancelPaymentIntentSource: function cancelPaymentIntentSource(t) {\n        return e._sendCAReq({\n          tag: \"CANCEL_PAYMENT_INTENT_SOURCE\",\n          value: t\n        });\n      },\n      confirmSetupIntent: function confirmSetupIntent(t) {\n        return e._sendCAReq({\n          tag: \"CONFIRM_SETUP_INTENT\",\n          value: t\n        });\n      },\n      retrieveSetupIntent: function retrieveSetupIntent(t) {\n        return e._sendCAReq({\n          tag: \"RETRIEVE_SETUP_INTENT\",\n          value: t\n        });\n      },\n      cancelSetupIntentSource: function cancelSetupIntentSource(t) {\n        return e._sendCAReq({\n          tag: \"CANCEL_SETUP_INTENT_SOURCE\",\n          value: t\n        });\n      },\n      fetchLocale: function fetchLocale(t) {\n        return e._sendCAReq({\n          tag: \"FETCH_LOCALE\",\n          value: t\n        });\n      },\n      updateCSSFonts: function updateCSSFonts(t) {\n        return e._sendCAReq({\n          tag: \"UPDATE_CSS_FONTS\",\n          value: t\n        });\n      },\n      createApplePaySession: function createApplePaySession(t) {\n        return e._sendCAReq({\n          tag: \"CREATE_APPLE_PAY_SESSION\",\n          value: t\n        });\n      },\n      retrieveSource: function retrieveSource(t) {\n        return e._sendCAReq({\n          tag: \"RETRIEVE_SOURCE\",\n          value: t\n        });\n      },\n      tokenizeWithElement: function tokenizeWithElement(t) {\n        return e._sendCAReq({\n          tag: \"TOKENIZE_WITH_ELEMENT\",\n          value: t\n        });\n      },\n      tokenizeCvcUpdate: function tokenizeCvcUpdate(t) {\n        return e._sendCAReq({\n          tag: \"TOKENIZE_CVC_UPDATE\",\n          value: t\n        });\n      },\n      tokenizeWithData: function tokenizeWithData(t) {\n        return e._sendCAReq({\n          tag: \"TOKENIZE_WITH_DATA\",\n          value: t\n        });\n      },\n      createSourceWithElement: function createSourceWithElement(t) {\n        return e._sendCAReq({\n          tag: \"CREATE_SOURCE_WITH_ELEMENT\",\n          value: t\n        });\n      },\n      createSourceWithData: function createSourceWithData(t) {\n        return e._sendCAReq({\n          tag: \"CREATE_SOURCE_WITH_DATA\",\n          value: t\n        });\n      },\n      createPaymentMethodWithElement: function createPaymentMethodWithElement(t) {\n        return e._sendCAReq({\n          tag: \"CREATE_PAYMENT_METHOD_WITH_ELEMENT\",\n          value: t\n        });\n      },\n      createPaymentMethodWithData: function createPaymentMethodWithData(t) {\n        return e._sendCAReq({\n          tag: \"CREATE_PAYMENT_METHOD_WITH_DATA\",\n          value: t\n        });\n      },\n      createPaymentPage: function createPaymentPage(t) {\n        return e._sendCAReq({\n          tag: \"CREATE_PAYMENT_PAGE\",\n          value: t\n        });\n      },\n      createPaymentPageWithSession: function createPaymentPageWithSession(t) {\n        return e._sendCAReq({\n          tag: \"CREATE_PAYMENT_PAGE_WITH_SESSION\",\n          value: t\n        });\n      },\n      createRadarSession: function createRadarSession(t) {\n        return e._sendCAReq({\n          tag: \"CREATE_RADAR_SESSION\",\n          value: t\n        });\n      },\n      authenticate3DS2: function authenticate3DS2(t) {\n        return e._sendCAReq({\n          tag: \"AUTHENTICATE_3DS2\",\n          value: t\n        });\n      },\n      verifyMicrodepositsForPayment: function verifyMicrodepositsForPayment(t) {\n        return e._sendCAReq({\n          tag: \"VERIFY_MICRODEPOSITS_FOR_PAYMENT\",\n          value: t\n        });\n      },\n      verifyMicrodepositsForSetup: function verifyMicrodepositsForSetup(t) {\n        return e._sendCAReq({\n          tag: \"VERIFY_MICRODEPOSITS_FOR_SETUP\",\n          value: t\n        });\n      }\n    }, this.createElementFrame = function (t, n) {\n      var r = n.groupId,\n          o = L(n, [\"groupId\"]),\n          i = new Ln(t, e._id, e._listenerRegistry, so({}, o, {\n        keyMode: We(e._apiKey),\n        apiKey: e._apiKey\n      }));\n      return e._setupFrame(i, t, r);\n    }, this.createSecondaryElementFrame = function (t, n) {\n      var r = n.groupId,\n          o = L(n, [\"groupId\"]),\n          i = new rr(t, e._id, e._listenerRegistry, so({}, o));\n      return e._setupFrame(i, t, r);\n    }, this.createHiddenFrame = function (t, n) {\n      var r = new An(t, e._id, e._listenerRegistry, n);\n      return e._setupFrame(r, t);\n    }, this.createLightboxFrame = function (t, n) {\n      var r = new $n(t, e._id, e._listenerRegistry, n);\n      return e._setupFrame(r, t);\n    }, this._setupFrame = function (t, n, r) {\n      return e._frames[t.id] = t, e._controllerFrame.sendPersistent({\n        action: \"stripe-user-createframe\",\n        payload: {\n          newFrameId: t.id,\n          frameType: n,\n          groupId: r\n        }\n      }), t._on(\"unload\", function () {\n        e._controllerFrame.sendPersistent({\n          action: \"stripe-frame-unload\",\n          payload: {\n            unloadedFrameId: t.id\n          }\n        });\n      }), t._on(\"destroy\", function () {\n        delete e._frames[t.id], e._controllerFrame.sendPersistent({\n          action: \"stripe-frame-destroy\",\n          payload: {\n            destroyedFrameId: t.id\n          }\n        });\n      }), t._on(\"load\", function () {\n        e._controllerFrame.sendPersistent({\n          action: \"stripe-frame-load\",\n          payload: {\n            loadedFrameId: t.id\n          }\n        }), e._controllerFrame.loaded && t.send({\n          action: \"stripe-controller-load\",\n          payload: {}\n        });\n      }), t;\n    }, this.report = function (t) {\n      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n\n      e._controllerFrame.send({\n        action: \"stripe-controller-report\",\n        payload: {\n          event: t,\n          data: n\n        }\n      });\n    }, this.warn = function () {\n      for (var t = arguments.length, n = Array(t), r = 0; r < t; r++) {\n        n[r] = arguments[r];\n      }\n\n      e._controllerFrame.send({\n        action: \"stripe-controller-warn\",\n        payload: {\n          args: n\n        }\n      });\n    }, this.controllerFor = function () {\n      return \"outer\";\n    }, this._setupPostMessage = function () {\n      e._listenerRegistry.addEventListener(window, \"message\", function (t) {\n        var n = t.data,\n            r = t.origin,\n            o = ln(n);\n        o && ir(Gt, r) && e._handleMessage(o);\n      });\n    }, this._handleMessage = function (t) {\n      var n = t.controllerId,\n          r = t.frameId,\n          o = t.message,\n          i = e._frames[r];\n      if (n === e._id) switch (o.action) {\n        case \"stripe-frame-event\":\n          var a = o.payload,\n              s = a.event,\n              c = a.data;\n\n          if (i) {\n            if (br) {\n              var u = i._iframe.parentElement,\n                  l = u && u.querySelector(\".__PrivateStripeElement-input\");\n\n              if (\"focus\" === s && !po && !fo(i, l)) {\n                l && l.focus(), po = !0;\n                break;\n              }\n\n              if (\"blur\" === s && po) {\n                po = !1;\n                break;\n              }\n\n              \"blur\" === s && setTimeout(function () {\n                var e = document.activeElement;\n\n                if (e && !fo(i, l) && !lr(e)) {\n                  var t = u && u.querySelector(\".__PrivateStripeElement-safariInput\");\n\n                  if (t) {\n                    var n = t;\n                    n.disabled = !1, n.focus(), n.blur(), n.disabled = !0;\n                  }\n\n                  e.focus();\n                }\n              }, 400);\n            }\n\n            i._emit(s, c);\n          }\n\n          break;\n\n        case \"stripe-frame-action-response\":\n          i && i.resolve(o.payload.nonce, o.payload.faRes);\n          break;\n\n        case \"stripe-frame-action-error\":\n          i && i.reject(o.payload.nonce, ho(o.payload.faErr));\n          break;\n\n        case \"stripe-frame-error\":\n          throw new Te(o.payload.message);\n\n        case \"stripe-integration-error\":\n          i && i._emit(\"__privateIntegrationError\", {\n            message: o.payload.message\n          });\n          break;\n\n        case \"stripe-controller-load\":\n          e._controllerFrame._emit(\"load\"), Object.keys(e._frames).forEach(function (t) {\n            return e._frames[t].send({\n              action: \"stripe-controller-load\",\n              payload: {}\n            });\n          });\n          break;\n\n        case \"stripe-safe-controller-action-response\":\n          e._requests[o.payload.nonce] && e._requests[o.payload.nonce].resolve(o.payload.caRes);\n          break;\n\n        case \"stripe-safe-controller-action-error\":\n          e._requests[o.payload.nonce] && e._requests[o.payload.nonce].reject(ho(o.payload.caErr));\n          break;\n\n        case \"stripe-api-call\":\n          $r();\n      }\n    };\n  },\n      yo = _o,\n      vo = function vo() {\n    var e = document.querySelectorAll(\"meta[name=viewport][content]\"),\n        t = e[e.length - 1];\n    return t && t instanceof HTMLMetaElement ? t.content : \"\";\n  },\n      bo = function bo(e) {\n    vo().match(/width=device-width/) || e('Elements requires \"width=device-width\" be set in your page\\'s viewport meta tag.\\n       For more information: https://stripe.com/docs/js/appendix/viewport_meta_requirements');\n  },\n      go = {\n    checkout_beta_2: \"checkout_beta_2\",\n    checkout_beta_3: \"checkout_beta_3\",\n    checkout_beta_4: \"checkout_beta_4\",\n    checkout_beta_testcards: \"checkout_beta_testcards\",\n    payment_intent_beta_1: \"payment_intent_beta_1\",\n    payment_intent_beta_2: \"payment_intent_beta_2\",\n    payment_intent_beta_3: \"payment_intent_beta_3\",\n    card_payment_method_beta_1: \"card_payment_method_beta_1\",\n    acknowledge_ie9_deprecation: \"acknowledge_ie9_deprecation\",\n    cvc_update_beta_1: \"cvc_update_beta_1\",\n    google_pay_beta_1: \"google_pay_beta_1\",\n    acss_debit_beta_1: \"acss_debit_beta_1\",\n    alipay_pm_beta_1: \"alipay_pm_beta_1\",\n    au_bank_account_beta_1: \"au_bank_account_beta_1\",\n    au_bank_account_beta_2: \"au_bank_account_beta_2\",\n    bacs_debit_beta: \"bacs_debit_beta\",\n    bancontact_pm_beta_1: \"bancontact_pm_beta_1\",\n    eps_pm_beta_1: \"eps_pm_beta_1\",\n    fpx_bank_beta_1: \"fpx_bank_beta_1\",\n    giropay_pm_beta_1: \"giropay_pm_beta_1\",\n    grabpay_pm_beta_1: \"grabpay_pm_beta_1\",\n    ideal_pm_beta_1: \"ideal_pm_beta_1\",\n    oxxo_pm_beta_1: \"oxxo_pm_beta_1\",\n    p24_pm_beta_1: \"p24_pm_beta_1\",\n    sepa_pm_beta_1: \"sepa_pm_beta_1\",\n    sofort_pm_beta_1: \"sofort_pm_beta_1\",\n    checkout_beta_locales: \"checkout_beta_locales\",\n    stripe_js_beta_locales: \"stripe_js_beta_locales\",\n    ideal_sepa_beta_1: \"ideal_sepa_beta_1\"\n  },\n      Eo = Object.keys(go),\n      wo = function wo(e, t) {\n    return e.indexOf(t) >= 0;\n  },\n      So = function (e) {\n    function t() {\n      D(this, t);\n      var e = q(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));\n      return e.name = \"NetworkError\", e.type = \"network_error\", e;\n    }\n\n    return F(t, e), t;\n  }(Error),\n      Po = So,\n      Oo = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      ko = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  },\n      Ao = function Ao(e) {\n    return Object.keys(ko).forEach(function (t) {\n      e.setRequestHeader(t, ko[t]);\n    }), e;\n  },\n      To = function e(t) {\n    return new Me(function (n, r) {\n      var o = t.method,\n          i = t.url,\n          a = t.data,\n          s = t.withCredentials,\n          c = a ? Zt(a) : \"\",\n          u = \"GET\" === o && c ? i + \"?\" + c : i,\n          l = \"GET\" === o ? \"\" : c,\n          p = new XMLHttpRequest();\n      s && (p.withCredentials = s), p.open(o, u, !0), Ao(p), p.onreadystatechange = function () {\n        4 === p.readyState && (p.onreadystatechange = function () {}, 0 === p.status ? s ? r(new Po()) : e(Oo({}, t, {\n          withCredentials: !0\n        })).then(n, r) : n(p));\n      };\n\n      try {\n        p.send(l);\n      } catch (e) {\n        r(e);\n      }\n    });\n  },\n      Ro = To,\n      Io = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      No = function No(e, t) {\n    var n = /@font-face[ ]?{[^}]*}/g,\n        r = e.match(n);\n    if (!r) throw new Te(\"No @font-face rules found in file from \" + t);\n    return r;\n  },\n      Co = function Co(e) {\n    var t = e.match(/@font-face[ ]?{([^}]*)}/);\n    return t ? t[1] : \"\";\n  },\n      Mo = function Mo(e, t) {\n    var n = e.replace(/\\/\\*.*\\*\\//g, \"\").trim(),\n        r = n.length && /;$/.test(n) ? n : n + \";\",\n        o = r.match(/((([^;(]*\\([^()]*\\)[^;)]*)|[^;]+)+)(?=;)/g);\n    if (!o) throw new Te(\"Found @font-face rule containing no valid font-properties in file from \" + t);\n    return o;\n  },\n      jo = function jo(e, t) {\n    var n = e.indexOf(\":\");\n    if (-1 === n) throw new Te(\"Invalid css declaration in file from \" + t + ': \"' + e + '\"');\n    var r = e.slice(0, n).trim(),\n        o = zt[r];\n    if (!o) throw new Te(\"Unsupported css property in file from \" + t + ': \"' + r + '\"');\n    return {\n      property: o,\n      value: e.slice(n + 1).trim()\n    };\n  },\n      Lo = function Lo(e, t) {\n    var n = e.reduce(function (e, n) {\n      var r = jo(n, t),\n          o = r.property,\n          i = r.value;\n      return Io({}, e, B({}, o, i));\n    }, {});\n    return [\"family\", \"src\"].forEach(function (e) {\n      if (!n[e]) throw new Te(\"Missing css property in file from \" + t + ': \"' + Wt[e] + '\"');\n    }), n;\n  },\n      xo = function xo(e) {\n    return Ro({\n      url: e,\n      method: \"GET\"\n    }).then(function (e) {\n      return e.responseText;\n    }).then(function (t) {\n      return No(t, e).map(function (t) {\n        var n = Co(t),\n            r = Mo(n, e);\n        return Lo(r, e);\n      });\n    });\n  },\n      Do = xo,\n      qo = function qo(e, t) {\n    return e.reduce(function (e, n) {\n      return e.then(function (e) {\n        return \"SATISFIED\" === e.type ? e : n().then(function (e) {\n          return t(e) ? {\n            type: \"SATISFIED\",\n            value: e\n          } : {\n            type: \"UNSATISFIED\"\n          };\n        });\n      });\n    }, Me.resolve({\n      type: \"UNSATISFIED\"\n    }));\n  },\n      Fo = qo,\n      Bo = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Uo = {\n    success: \"success\",\n    fail: \"fail\",\n    invalid_shipping_address: \"invalid_shipping_address\"\n  },\n      Ho = {\n    fail: \"fail\",\n    invalid_payer_name: \"invalid_payer_name\",\n    invalid_payer_email: \"invalid_payer_email\",\n    invalid_payer_phone: \"invalid_payer_phone\",\n    invalid_shipping_address: \"invalid_shipping_address\"\n  },\n      Yo = {\n    shipping: \"shipping\",\n    delivery: \"delivery\",\n    pickup: \"pickup\"\n  },\n      Go = Bo({\n    success: \"success\"\n  }, Ho),\n      Wo = {\n    merchantCapabilities: [\"supports3DS\"],\n    displayItems: []\n  },\n      zo = kt({\n    amount: bt,\n    label: dt,\n    pending: ot(ht)\n  }),\n      Ko = kt({\n    amount: vt,\n    label: dt,\n    pending: ot(ht)\n  }),\n      Vo = kt({\n    amount: vt,\n    label: dt,\n    pending: ot(ht),\n    id: ft(dt, function () {\n      return Jt(\"shippingOption\");\n    }),\n    detail: ft(dt, function () {\n      return \"\";\n    })\n  }),\n      Jo = ct.apply(void 0, U(Object.keys(Yo))),\n      Qo = kt({\n    origin: dt,\n    name: dt\n  }),\n      $o = kt({\n    displayItems: ot(Et(Ko)),\n    shippingOptions: ot(wt(\"id\")(Et(Vo))),\n    total: zo,\n    requestShipping: ot(ht),\n    requestPayerName: ot(ht),\n    requestPayerEmail: ot(ht),\n    requestPayerPhone: ot(ht),\n    shippingType: ot(Jo),\n    currency: pt,\n    country: lt,\n    jcbEnabled: ot(ht),\n    __billingDetailsEmailOverride: ot(dt),\n    __minApplePayVersion: ot(_t),\n    __merchantDetails: ot(Qo),\n    __skipGooglePayInPaymentRequest: ot(ht),\n    __isCheckout: ot(ht)\n  }),\n      Xo = Ot({\n    currency: ot(pt),\n    displayItems: ot(Et(Ko)),\n    shippingOptions: ot(wt(\"id\")(Et(Vo))),\n    total: ot(zo)\n  }),\n      Zo = function Zo(e, t) {\n    var n = [\"invalid_payer_name\", \"invalid_payer_email\", \"invalid_payer_phone\"];\n    return ct.apply(void 0, U(Object.keys(Uo)))(-1 !== n.indexOf(e) ? \"fail\" : e, t);\n  },\n      ei = kt({\n    displayItems: ot(Et(Ko)),\n    shippingOptions: ot(wt(\"id\")(Et(Vo))),\n    total: ot(zo),\n    status: Zo\n  }),\n      ti = ct.apply(void 0, U(Object.keys(Go))),\n      ni = function ni(e) {\n    var t = wo(e, go.google_pay_beta_1);\n    return gr ? t ? [\"APPLE_PAY\", \"GOOGLE_PAY\"] : [\"APPLE_PAY\"] : t ? [\"GOOGLE_PAY\", \"BROWSER\"] : [\"BROWSER\"];\n  },\n      ri = ni,\n      oi = function oi() {\n    try {\n      return window.location.origin === window.top.location.origin;\n    } catch (e) {\n      return !1;\n    }\n  },\n      ii = 2,\n      ai = function (e) {\n    var t = {};\n    return function (n) {\n      var r = \"_\" + n;\n      if (void 0 !== t[r]) return t[r];\n      var o = e(n);\n      return t[r] = o, o;\n    };\n  }(function (e) {\n    return window.ApplePaySession.canMakePaymentsWithActiveCard(e);\n  }),\n      si = function si(e) {\n    if (!window.ApplePaySession) return !1;\n\n    try {\n      return window.ApplePaySession.supportsVersion(e);\n    } catch (e) {\n      return !1;\n    }\n  },\n      ci = function ci(e, t, n, r) {\n    var o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : ii,\n        i = Math.max(ii, o);\n\n    if (window.ApplePaySession) {\n      if (oi()) {\n        if (window.ApplePaySession.supportsVersion(i)) {\n          var a = t ? [e, t] : [e],\n              s = \"merchant.\" + a.join(\".\") + \".stripe\";\n          return ai(s).then(function (o) {\n            if (r(\"pr.apple_pay.can_make_payment_native_response\", {\n              available: o\n            }), n && !o && window.console) {\n              var i = t ? \"or stripeAccount parameter (\" + t + \") \" : \"\";\n              window.console.warn(\"Either you do not have a card saved to your Wallet or the current domain (\" + e + \") \" + i + \"is not registered for Apple Pay. Visit https://dashboard.stripe.com/account/apple_pay to register this domain.\");\n            }\n\n            return o;\n          });\n        }\n\n        return n && window.console && window.console.warn(\"This version of Safari does not support ApplePay JS version \" + i + \".\"), Me.resolve(!1);\n      }\n\n      return Me.resolve(!1);\n    }\n\n    return Me.resolve(!1);\n  },\n      ui = [\"mastercard\", \"visa\"],\n      li = [\"AT\", \"AU\", \"BE\", \"CA\", \"CH\", \"DE\", \"DK\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"HK\", \"IE\", \"IT\", \"JP\", \"LT\", \"LU\", \"LV\", \"MX\", \"NL\", \"NO\", \"NZ\", \"PL\", \"PT\", \"SE\", \"SG\", \"US\"],\n      pi = function pi(e, t) {\n    var n = \"US\" === e || t ? [\"discover\", \"diners\", \"jcb\"].concat(ui) : ui;\n    return -1 !== li.indexOf(e) ? [\"amex\"].concat(H(n)) : n;\n  },\n      di = function di(e, t) {\n    return pi(e, t).reduce(function (e, t) {\n      return \"mastercard\" === t ? [].concat(H(e), [\"masterCard\"]) : \"diners\" === t ? e : [].concat(H(e), [t]);\n    }, []);\n  },\n      fi = {\n    bif: 1,\n    clp: 1,\n    djf: 1,\n    gnf: 1,\n    jpy: 1,\n    kmf: 1,\n    krw: 1,\n    mga: 1,\n    pyg: 1,\n    rwf: 1,\n    vnd: 1,\n    vuv: 1,\n    xaf: 1,\n    xof: 1,\n    xpf: 1\n  },\n      hi = function hi(e) {\n    var t = fi[e.toLowerCase()] || 100;\n    return {\n      unitSize: 1 / t,\n      fractionDigits: Math.log(t) / Math.log(10)\n    };\n  },\n      _i = function _i(e, t) {\n    var n = hi(t);\n    return (e * n.unitSize).toFixed(n.fractionDigits);\n  },\n      mi = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      yi = function yi(e, t) {\n    return {\n      amount: _i(e.amount, t.currency),\n      label: e.label,\n      type: e.pending ? \"pending\" : \"final\"\n    };\n  },\n      vi = function vi(e, t) {\n    return {\n      amount: _i(e.amount, t.currency),\n      label: e.label,\n      detail: e.detail,\n      identifier: e.id\n    };\n  },\n      bi = function bi(e, t) {\n    return new window.ApplePayError(e, t);\n  },\n      gi = function gi(e) {\n    return function (t) {\n      return t[e] && \"string\" == typeof t[e] ? t[e].toUpperCase() : null;\n    };\n  },\n      Ei = (Se = {}, Y(Se, Go.success, 0), Y(Se, Go.fail, 1), Y(Se, Go.invalid_payer_name, 2), Y(Se, Go.invalid_shipping_address, 3), Y(Se, Go.invalid_payer_phone, 4), Y(Se, Go.invalid_payer_email, 4), Se),\n      wi = (Pe = {}, Y(Pe, Go.success, function () {\n    return null;\n  }), Y(Pe, Go.fail, function () {\n    return null;\n  }), Y(Pe, Go.invalid_payer_name, function () {\n    return bi(\"billingContactInvalid\", \"name\");\n  }), Y(Pe, Go.invalid_shipping_address, function () {\n    return bi(\"shippingContactInvalid\", \"postalAddress\");\n  }), Y(Pe, Go.invalid_payer_phone, function () {\n    return bi(\"shippingContactInvalid\", \"phoneNumber\");\n  }), Y(Pe, Go.invalid_payer_email, function () {\n    return bi(\"shippingContactInvalid\", \"emailAddress\");\n  }), Pe),\n      Si = (Oe = {}, Y(Oe, Yo.pickup, \"storePickup\"), Y(Oe, Yo.shipping, \"shipping\"), Y(Oe, Yo.delivery, \"delivery\"), Oe),\n      Pi = {\n    total: function total(e) {\n      return yi(e.total, e);\n    },\n    lineItems: function lineItems(e) {\n      return e.displayItems ? e.displayItems.map(function (t) {\n        return yi(t, e);\n      }) : [];\n    },\n    shippingMethods: function shippingMethods(e) {\n      return e.shippingOptions ? e.shippingOptions.map(function (t) {\n        return vi(t, e);\n      }) : [];\n    }\n  },\n      Oi = {\n    shippingType: function shippingType(e) {\n      var t = e.shippingType;\n      if (!t) return null;\n      var n = Si[t];\n      if (void 0 !== n) return n;\n      throw new Te(\"Invalid value for shippingType: \" + t);\n    },\n    requiredBillingContactFields: function requiredBillingContactFields(e) {\n      return e.requestPayerName ? [\"postalAddress\"] : null;\n    },\n    requiredShippingContactFields: function requiredShippingContactFields(e) {\n      var t = [];\n      return e.requestShipping && t.push(\"postalAddress\"), e.requestPayerEmail && t.push(\"email\"), e.requestPayerPhone && t.push(\"phone\"), t.length ? t : null;\n    },\n    countryCode: gi(\"country\"),\n    currencyCode: gi(\"currency\"),\n    merchantCapabilities: function (e) {\n      return function (t) {\n        return t[e] || null;\n      };\n    }(\"merchantCapabilities\"),\n    supportedNetworks: function supportedNetworks(e) {\n      var t = di(e.country, e.jcbEnabled || !1);\n      return si(4) && t.push(\"maestro\"), t;\n    }\n  },\n      ki = {\n    status: function status(e) {\n      var t = Ei[e.status];\n      return si(3) && t > 1 ? 1 : t;\n    },\n    error: function error(e) {\n      return si(3) ? wi[e.status]() : null;\n    }\n  },\n      Ai = mi({}, Pi, Oi),\n      Ti = mi({}, Pi, ki),\n      Ri = function Ri(e) {\n    var t = mi({}, Wo, e);\n    return Object.keys(Ai).reduce(function (e, n) {\n      var r = Ai[n],\n          o = r(t);\n      return null !== o ? mi({}, e, Y({}, n, o)) : e;\n    }, {});\n  },\n      Ii = function Ii(e) {\n    return Object.keys(Ti).reduce(function (t, n) {\n      var r = Ti[n],\n          o = r(e);\n      return null !== o ? mi({}, t, Y({}, n, o)) : t;\n    }, {});\n  },\n      Ni = function Ni(e) {\n    return \"string\" == typeof e ? e : null;\n  },\n      Ci = function Ci(e) {\n    return e ? Ni(e.phoneNumber) : null;\n  },\n      Mi = function Mi(e) {\n    return e ? Ni(e.emailAddress) : null;\n  },\n      ji = function ji(e) {\n    return e ? [e.givenName, e.familyName].filter(function (e) {\n      return e && \"string\" == typeof e;\n    }).join(\" \") : null;\n  },\n      Li = function Li(e) {\n    var t = e.addressLines,\n        n = e.countryCode,\n        r = e.postalCode,\n        o = e.administrativeArea,\n        i = e.locality,\n        a = e.phoneNumber,\n        s = Ni(n);\n    return {\n      addressLine: Array.isArray(t) ? t.reduce(function (e, t) {\n        return \"string\" == typeof t ? [].concat(G(e), [t]) : e;\n      }, []) : [],\n      country: s ? s.toUpperCase() : \"\",\n      postalCode: Ni(r) || \"\",\n      recipient: ji(e) || \"\",\n      region: Ni(o) || \"\",\n      city: Ni(i) || \"\",\n      phone: Ni(a) || \"\",\n      sortingCode: \"\",\n      dependentLocality: \"\",\n      organization: \"\"\n    };\n  },\n      xi = function xi(e, t) {\n    var n = e.identifier,\n        r = e.label;\n    return t.filter(function (e) {\n      return e.id === n && e.label === r;\n    })[0];\n  },\n      Di = function Di(e, t) {\n    var n = e.shippingContact,\n        r = e.shippingMethod,\n        o = e.billingContact;\n    return {\n      shippingOption: r && t.shippingOptions && t.shippingOptions.length ? xi(r, t.shippingOptions) : null,\n      shippingAddress: n ? Li(n) : null,\n      payerEmail: Mi(n),\n      payerPhone: Ci(n),\n      payerName: ji(o),\n      methodName: \"apple-pay\"\n    };\n  },\n      qi = Di,\n      Fi = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Bi = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      Ui = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      Hi = {\n    australia: \"AU\",\n    austria: \"AT\",\n    canada: \"CA\",\n    schweiz: \"CH\",\n    deutschland: \"DE\",\n    hongkong: \"HK\",\n    saudiarabia: \"SA\",\n    espaa: \"ES\",\n    singapore: \"SG\",\n    us: \"US\",\n    usa: \"US\",\n    unitedstatesofamerica: \"US\",\n    unitedstates: \"US\",\n    england: \"GB\",\n    gb: \"GB\",\n    uk: \"GB\",\n    unitedkingdom: \"GB\"\n  },\n      Yi = function Yi(e, t) {\n    return e && \"object\" === (void 0 === e ? \"undefined\" : Ui(e)) ? t(e) : null;\n  },\n      Gi = function () {\n    function e(t) {\n      var n = this;\n      W(this, e), this._onEvent = function () {}, this.setEventHandler = function (e) {\n        n._onEvent = e;\n      }, this.canMakePayment = function () {\n        return ci(window.location.hostname, n._authentication.accountId, We(n._authentication.apiKey) === Ge.test, n._report, n._minimumVersion);\n      }, this.update = function (e) {\n        n._initialPaymentRequest = Lr(n._paymentRequestOptions, e), n._initializeSessionState();\n      }, this.show = function () {\n        n._initializeSessionState();\n\n        var e = void 0;\n\n        try {\n          e = new window.ApplePaySession(n._minimumVersion, Ri(n._paymentRequestOptions));\n        } catch (e) {\n          throw \"Must create a new ApplePaySession from a user gesture handler.\" === e.message ? new Te(\"show() must be called from a user gesture handler (such as a click handler, after the user clicks a button).\") : e;\n        }\n\n        n._privateSession = e, n._setupSession(e, n._usesButtonElement()), e.begin(), n._isShowing = !0;\n      }, this.abort = function () {\n        n._privateSession && n._privateSession.abort();\n      }, this._warn = function (e) {}, this._report = function (e, t) {\n        n._controller.report(e, Fi({}, t, {\n          backingLibrary: \"APPLE_PAY\",\n          usesButtonElement: n._usesButtonElement()\n        }));\n      }, this._validateMerchant = function (e, t) {\n        return function (r) {\n          n._controller.action.createApplePaySession({\n            data: {\n              validation_url: r.validationURL,\n              domain_name: window.location.hostname,\n              display_name: n._paymentRequestOptions.total.label\n            },\n            usesButtonElement: t\n          }).then(function (t) {\n            if (n._isShowing) switch (t.type) {\n              case \"object\":\n                e.completeMerchantValidation(JSON.parse(t.object.session));\n                break;\n\n              case \"error\":\n                n._handleValidationError(e)(t.error);\n\n                break;\n\n              default:\n                Re(t);\n            }\n          }, n._handleValidationError(e));\n        };\n      }, this._handleValidationError = function (e) {\n        return function (t) {\n          n._report(\"error.pr.apple_pay.session_creation_failed\", {\n            error: t\n          }), e.abort();\n          var r = t.message;\n          \"string\" == typeof r && n._controller.warn(r);\n        };\n      }, this._paymentAuthorized = function (e) {\n        return function (t) {\n          var r = t.payment,\n              o = n._usesButtonElement() ? Dt.paymentRequestButton : null;\n\n          n._controller.action.tokenizeWithData({\n            type: \"apple_pay\",\n            elementName: o,\n            tokenData: Fi({}, r, {\n              billingContact: Yi(r.billingContact, n._normalizeContact)\n            }),\n            mids: n._mids\n          }).then(function (t) {\n            if (\"error\" === t.type) e.completePayment(window.ApplePaySession.STATUS_FAILURE), n._report(\"error.pr.create_token_failed\", {\n              error: t.error\n            });else {\n              var o = Yi(r.shippingContact, n._normalizeContact),\n                  i = Yi(r.billingContact, n._normalizeContact);\n              o && n._paymentRequestOptions.requestShipping && !o.countryCode && e.completePayment(window.ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS);\n              var a = qi({\n                shippingContact: o,\n                billingContact: i\n              }, n._paymentRequestOptions);\n\n              n._onToken(e)(Fi({}, a, {\n                shippingOption: n._privateShippingOption,\n                token: t.object\n              }));\n            }\n          });\n        };\n      }, this._normalizeContact = function (e) {\n        if (e.country && \"string\" == typeof e.country) {\n          var t = e.country.toLowerCase().replace(/[^a-z]+/g, \"\"),\n              r = void 0;\n          return e.countryCode ? \"string\" == typeof e.countryCode && (r = e.countryCode.toUpperCase()) : (r = Hi[t]) || n._report(\"warn.pr.apple_pay.missing_country_code\", {\n            country: e.country\n          }), Fi({}, e, {\n            countryCode: r\n          });\n        }\n\n        return e;\n      }, this._onToken = function (e) {\n        return function (t) {\n          n._onEvent({\n            type: \"paymentresponse\",\n            payload: Fi({}, t, {\n              complete: n._completePayment(e)\n            })\n          });\n        };\n      }, this._completePayment = function (e) {\n        return function (t) {\n          n._paymentRequestOptions = Lr(n._paymentRequestOptions, {\n            status: t\n          });\n          var r = Ii(n._paymentRequestOptions),\n              o = r.status,\n              i = r.error;\n          i ? e.completePayment({\n            status: o,\n            errors: [i]\n          }) : e.completePayment(o), (0 === o || 1 === o && null == i) && (n._isShowing = !1, n._onEvent && n._onEvent({\n            type: \"close\"\n          }));\n        };\n      }, this._shippingContactSelected = function (e) {\n        return function (t) {\n          n._onEvent({\n            type: \"shippingaddresschange\",\n            payload: {\n              shippingAddress: Li(n._normalizeContact(t.shippingContact)),\n              updateWith: n._completeShippingContactSelection(e)\n            }\n          });\n        };\n      }, this._completeShippingContactSelection = function (e) {\n        return function (t) {\n          n._paymentRequestOptions = Lr(n._paymentRequestOptions, t), n._paymentRequestOptions.shippingOptions && n._paymentRequestOptions.shippingOptions.length && (n._privateShippingOption = n._paymentRequestOptions.shippingOptions[0]);\n          var r = Ii(n._paymentRequestOptions),\n              o = r.status,\n              i = r.shippingMethods,\n              a = r.total,\n              s = r.lineItems;\n          e.completeShippingContactSelection(o, i, a, s);\n        };\n      }, this._shippingMethodSelected = function (e) {\n        return function (t) {\n          if (n._paymentRequestOptions.shippingOptions) {\n            var r = xi(t.shippingMethod, n._paymentRequestOptions.shippingOptions);\n            n._privateShippingOption = r, n._onEvent({\n              type: \"shippingoptionchange\",\n              payload: {\n                shippingOption: r,\n                updateWith: n._completeShippingMethodSelection(e)\n              }\n            });\n          }\n        };\n      }, this._completeShippingMethodSelection = function (e) {\n        return function (t) {\n          n._paymentRequestOptions = Lr(n._paymentRequestOptions, t);\n          var r = Ii(n._paymentRequestOptions),\n              o = r.status,\n              i = r.total,\n              a = r.lineItems;\n          e.completeShippingMethodSelection(o, i, a);\n        };\n      };\n      var r = t.controller,\n          o = t.authentication,\n          i = t.mids,\n          a = t.options,\n          s = t.usesButtonElement,\n          c = t.listenerRegistry;\n      this._controller = r, this._authentication = o, this._mids = i, this._minimumVersion = a.__minApplePayVersion || ii, this._usesButtonElement = s, this._listenerRegistry = c, this._initialPaymentRequest = a, this._isShowing = !1, this._initializeSessionState();\n    }\n\n    return Bi(e, [{\n      key: \"_initializeSessionState\",\n      value: function value() {\n        this._paymentRequestOptions = Fi({}, Wo, this._initialPaymentRequest, {\n          status: Go.success\n        }), this._privateSession = null, this._privateShippingOption = null;\n        var e = this._paymentRequestOptions.shippingOptions;\n        e && e.length && (this._privateShippingOption = e[0]);\n      }\n    }, {\n      key: \"_setupSession\",\n      value: function value(e, t) {\n        var n = this;\n        this._listenerRegistry.addEventListener(e, \"validatemerchant\", fn(this._validateMerchant(e, t))), this._listenerRegistry.addEventListener(e, \"paymentauthorized\", fn(this._paymentAuthorized(e))), this._listenerRegistry.addEventListener(e, \"cancel\", fn(function () {\n          n._isShowing = !1, n._onEvent({\n            type: \"cancel\"\n          }), n._onEvent({\n            type: \"close\"\n          });\n        })), this._listenerRegistry.addEventListener(e, \"shippingcontactselected\", fn(this._shippingContactSelected(e))), this._listenerRegistry.addEventListener(e, \"shippingmethodselected\", fn(this._shippingMethodSelected(e)));\n      }\n    }]), e;\n  }(),\n      Wi = Gi,\n      zi = null,\n      Ki = function Ki(e) {\n    return null !== zi ? Me.resolve(zi) : e().then(function (e) {\n      return zi = e;\n    });\n  },\n      Vi = Ki,\n      Ji = function Ji() {\n    return !(!wr && !Sr);\n  },\n      Qi = Ji,\n      $i = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Xi = function e(t) {\n    var n = this;\n    z(this, e), this._mids = null, this._frame = null, this._initFrame = function (e) {\n      var t = n._controller.createHiddenFrame(Nt.PAYMENT_REQUEST_GOOGLE_PAY, {\n        authentication: n._authentication,\n        mids: n._mids\n      });\n\n      t.send({\n        action: \"stripe-pr-initialize\",\n        payload: {\n          data: e\n        }\n      }), n._initFrameEventHandlers(t), n._frame = t;\n    }, this._initFrameEventHandlers = function (e) {\n      e._on(\"pr-cancel\", function () {\n        n._onEvent({\n          type: \"cancel\"\n        });\n      }), e._on(\"pr-close\", function () {\n        n._backdrop.fadeOut().then(function () {\n          n._backdrop.unmount();\n        }), n._onEvent({\n          type: \"close\"\n        });\n      }), e._on(\"pr-error\", function (e) {\n        n._onEvent({\n          type: \"error\",\n          payload: {\n            errorMessage: e.errorMessage,\n            errorCode: e.errorCode\n          }\n        });\n      }), e._on(\"pr-callback\", function (t) {\n        var r = t.event,\n            o = t.options,\n            i = t.nonce;\n\n        switch (r) {\n          case \"paymentresponse\":\n            n._handlePaymentResponse(e, o, i);\n\n            break;\n\n          case \"shippingaddresschange\":\n            n._handleShippingAddressChange(e, o, i);\n\n            break;\n\n          case \"shippingoptionchange\":\n            n._handleShippingOptionChange(e, o, i);\n\n            break;\n\n          default:\n            throw new Error(\"Unexpected event name: \" + r);\n        }\n      });\n    }, this._handlePaymentResponse = function (e, t, r) {\n      var o = function o(t) {\n        e.send({\n          action: \"stripe-pr-callback-complete\",\n          payload: {\n            nonce: r,\n            data: {\n              status: t\n            }\n          }\n        });\n      };\n\n      n._onEvent({\n        type: \"paymentresponse\",\n        payload: $i({}, t, {\n          complete: o\n        })\n      });\n    }, this._handleShippingAddressChange = function (e, t, r) {\n      var o = function o(t) {\n        e.send({\n          action: \"stripe-pr-callback-complete\",\n          payload: {\n            nonce: r,\n            data: t\n          }\n        });\n      };\n\n      n._onEvent({\n        type: \"shippingaddresschange\",\n        payload: $i({}, t, {\n          updateWith: o\n        })\n      });\n    }, this._handleShippingOptionChange = function (e, t, r) {\n      var o = function o(t) {\n        e.send({\n          action: \"stripe-pr-callback-complete\",\n          payload: {\n            nonce: r,\n            data: t\n          }\n        });\n      };\n\n      n._onEvent({\n        type: \"shippingoptionchange\",\n        payload: $i({}, t, {\n          updateWith: o\n        })\n      });\n    }, this.setEventHandler = function (e) {\n      n._onEvent = e;\n    }, this.canMakePayment = function () {\n      if (!Qi()) return Me.resolve(!1);\n      if (!n._frame) throw new Error(\"Frame not initialized.\");\n      var e = n._frame;\n      return Vi(function () {\n        return e.action.checkCanMakePayment().then(function (e) {\n          return !0 === e.available;\n        });\n      });\n    }, this.show = function () {\n      n._frame && (n._frame.send({\n        action: \"stripe-pr-show\",\n        payload: {\n          data: {\n            usesButtonElement: n._usesButtonElement()\n          }\n        }\n      }), n._backdrop.mount(), n._backdrop.show(), n._backdrop.fadeIn());\n    }, this.update = function (e) {\n      n._frame && n._frame.send({\n        action: \"stripe-pr-update\",\n        payload: {\n          data: e\n        }\n      });\n    }, this.abort = function () {\n      n._frame && n._frame.send({\n        action: \"stripe-pr-abort\",\n        payload: {}\n      });\n    }, this._controller = t.controller, this._authentication = t.authentication, this._mids = t.mids, this._usesButtonElement = t.usesButtonElement, this._backdrop = new Kn({\n      lockScrolling: !1,\n      lockFocus: !0,\n      lockFocusOn: null,\n      listenerRegistry: t.listenerRegistry\n    }), Qi() && this._controller && (this._controller.action.fetchLocale({\n      locale: \"auto\"\n    }), this._initFrame(t.options));\n  },\n      Zi = Xi,\n      ea = function () {\n    if (!window.PaymentRequest) return null;\n    if (/CriOS\\/59/.test(navigator.userAgent)) return null;\n    if (/.*\\(.*; wv\\).*Chrome\\/(?:53|54)\\.\\d.*/g.test(navigator.userAgent)) return null;\n    if (Er) return null;\n    var e = window.PaymentRequest;\n    return e.prototype.canMakePayment || (e.prototype.canMakePayment = function () {\n      return Me.resolve(!1);\n    }), e;\n  }(),\n      ta = null,\n      na = function na(e, t) {\n    return null !== ta ? Me.resolve(ta) : ea && e ? e.action.checkCanMakePayment().then(function (e) {\n      var t = e.available;\n      return ta = !0 === t;\n    }) : Me.resolve(!1);\n  },\n      ra = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      oa = function e(t) {\n    K(this, e), ia.call(this);\n    var n = t.authentication,\n        r = t.controller,\n        o = t.mids,\n        i = t.usesButtonElement,\n        a = t.options;\n\n    if (this._authentication = n, this._controller = r, this._mids = o, this._usesButtonElement = i, ea && \"https:\" === window.location.protocol) {\n      this._controller.action.fetchLocale({\n        locale: \"auto\"\n      });\n\n      var s = this._controller.createHiddenFrame(Nt.PAYMENT_REQUEST_BROWSER, {\n        authentication: n,\n        mids: this._mids\n      });\n\n      this._setupPrFrame(s, a), this._prFrame = s;\n    } else this._prFrame = null;\n  },\n      ia = function ia() {\n    var e = this;\n    this._onEvent = function () {}, this.setEventHandler = function (t) {\n      e._onEvent = t;\n    }, this.canMakePayment = function () {\n      return na(e._prFrame, (We(e._authentication.apiKey), Ge.test));\n    }, this.update = function (t) {\n      var n = e._prFrame;\n      n && n.send({\n        action: \"stripe-pr-update\",\n        payload: {\n          data: t\n        }\n      });\n    }, this.show = function () {\n      if (!e._prFrame) throw new Te(\"Payment Request is not available in this browser.\");\n\n      e._prFrame.send({\n        action: \"stripe-pr-show\",\n        payload: {\n          data: {\n            usesButtonElement: e._usesButtonElement()\n          }\n        }\n      });\n    }, this.abort = function () {\n      e._prFrame && e._prFrame.send({\n        action: \"stripe-pr-abort\",\n        payload: {}\n      });\n    }, this._setupPrFrame = function (t, n) {\n      t.send({\n        action: \"stripe-pr-initialize\",\n        payload: {\n          data: n\n        }\n      }), t._on(\"pr-cancel\", function () {\n        e._onEvent({\n          type: \"cancel\"\n        });\n      }), t._on(\"pr-close\", function () {\n        e._onEvent({\n          type: \"close\"\n        });\n      }), t._on(\"pr-error\", function (t) {\n        e._onEvent({\n          type: \"error\",\n          payload: {\n            errorMessage: t.message || \"\",\n            errorCode: t.code || \"\"\n          }\n        });\n      }), t._on(\"pr-callback\", function (n) {\n        var r = n.event,\n            o = n.nonce,\n            i = n.options;\n\n        switch (r) {\n          case \"token\":\n            e._onEvent({\n              type: \"paymentresponse\",\n              payload: ra({}, i, {\n                complete: function complete(e) {\n                  t.send({\n                    action: \"stripe-pr-callback-complete\",\n                    payload: {\n                      data: {\n                        status: e\n                      },\n                      nonce: o\n                    }\n                  });\n                }\n              })\n            });\n\n            break;\n\n          case \"shippingaddresschange\":\n            e._onEvent({\n              type: \"shippingaddresschange\",\n              payload: {\n                shippingAddress: i.shippingAddress,\n                updateWith: function updateWith(e) {\n                  t.send({\n                    action: \"stripe-pr-callback-complete\",\n                    payload: {\n                      nonce: o,\n                      data: e\n                    }\n                  });\n                }\n              }\n            });\n\n            break;\n\n          case \"shippingoptionchange\":\n            e._onEvent({\n              type: \"shippingoptionchange\",\n              payload: {\n                shippingOption: i.shippingOption,\n                updateWith: function updateWith(e) {\n                  t.send({\n                    action: \"stripe-pr-callback-complete\",\n                    payload: {\n                      nonce: o,\n                      data: e\n                    }\n                  });\n                }\n              }\n            });\n\n            break;\n\n          default:\n            throw new Error(\"Unexpected event from PaymentRequest inner: \" + r);\n        }\n      });\n    };\n  },\n      aa = oa,\n      sa = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      ca = function (e) {\n    function t(e) {\n      Q(this, t);\n      var n = $(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));\n      ua.call(n), n._controller = e.controller, n._authentication = e.authentication, n._mids = e.mids, n._listenerRegistry = e.listenerRegistry, n._report(\"pr.options\", {\n        options: e.rawOptions\n      });\n      var r = Rt($o, e.rawOptions || {}, \"paymentRequest()\"),\n          o = r.value;\n      if (r.warnings.forEach(function (e) {\n        return n._warn(e);\n      }), o.__billingDetailsEmailOverride && o.requestPayerEmail) throw new Te(\"When providing `__billingDetailsEmailOverride`, `requestPayerEmail` has to be `false` so that the customer is not prompted for their email in the payment sheet.\");\n      return n._queryStrategy = e.queryStrategyOverride || ri(e.betas), n._report(\"pr.query_strategy\", {\n        queryStrategy: n._queryStrategy\n      }), n._initialOptions = sa({}, o, {\n        __skipGooglePayInPaymentRequest: -1 !== n._queryStrategy.indexOf(\"GOOGLE_PAY\")\n      }), n._initBackingLibraries(n._initialOptions), n;\n    }\n\n    return X(t, e), t;\n  }(vn),\n      ua = function ua() {\n    var e = this;\n    this._usedByButtonElement = null, this._showCalledByButtonElement = !1, this._isShowing = !1, this._backingLibraries = {\n      APPLE_PAY: null,\n      GOOGLE_PAY: null,\n      BROWSER: null\n    }, this._activeBackingLibraryName = null, this._activeBackingLibrary = null, this._canMakePaymentAvailability = {\n      APPLE_PAY: null,\n      GOOGLE_PAY: null,\n      BROWSER: null\n    }, this._canMakePaymentResolved = !1, this._validateUserOn = function (t, n) {\n      \"string\" == typeof t && (\"source\" === t && e._hasRegisteredListener(\"paymentmethod\") || \"paymentmethod\" === t && e._hasRegisteredListener(\"source\")) && (e._report(\"pr.double_callback_registration\"), e._controller.warn(\"Do not register event listeners for both `source` or `paymentmethod`. Only one of them will succeed.\"));\n    }, this._report = function (t, n) {\n      e._controller.report(t, sa({}, n, {\n        activeBackingLibrary: e._activeBackingLibraryName,\n        usesButtonElement: e._usedByButtonElement || !1\n      }));\n    }, this._warn = function (t) {\n      e._controller.warn(t);\n    }, this._registerElement = function () {\n      e._usedByButtonElement = !0;\n    }, this._elementShow = function () {\n      e._showCalledByButtonElement = !0, e.show();\n    }, this._initBackingLibraries = function (t) {\n      e._queryStrategy.forEach(function (n) {\n        var r = {\n          controller: e._controller,\n          authentication: e._authentication,\n          mids: e._mids,\n          options: t,\n          usesButtonElement: function usesButtonElement() {\n            return !0 === e._usedByButtonElement;\n          },\n          listenerRegistry: e._listenerRegistry\n        };\n\n        switch (n) {\n          case \"APPLE_PAY\":\n            e._backingLibraries.APPLE_PAY = new Wi(r), e._backingLibraries.APPLE_PAY.setEventHandler(e._handleInternalEvent);\n            break;\n\n          case \"GOOGLE_PAY\":\n            e._backingLibraries.GOOGLE_PAY = new Zi(r), e._backingLibraries.GOOGLE_PAY.setEventHandler(e._handleInternalEvent);\n            break;\n\n          case \"BROWSER\":\n            e._backingLibraries.BROWSER = new aa(r), e._backingLibraries.BROWSER.setEventHandler(e._handleInternalEvent);\n            break;\n\n          default:\n            Re(n);\n        }\n      });\n    }, this._handleInternalEvent = function (t) {\n      switch (t.type) {\n        case \"paymentresponse\":\n          e._emitPaymentResponse(t.payload);\n\n          break;\n\n        case \"error\":\n          e._report(\"error.pr.internal_error\", {\n            error: t.payload\n          });\n\n          break;\n\n        case \"close\":\n          e._isShowing = !1;\n          break;\n\n        default:\n          e._emitExternalEvent(t);\n\n      }\n    }, this._emitExternalEvent = function (t) {\n      switch (t.type) {\n        case \"cancel\":\n          e._emit(\"cancel\");\n\n          break;\n\n        case \"shippingoptionchange\":\n        case \"shippingaddresschange\":\n          var n = t.type,\n              r = t.payload,\n              o = null,\n              i = !1,\n              a = !1,\n              s = function s(_s2) {\n            if (a && i) return e._report(\"pr.update_with_called_after_timeout\", {\n              event: n\n            }), void e._controller.warn(\"Call to updateWith() was ignored because it has already timed out. Please ensure that updateWith is called within 30 seconds.\");\n            if (i) return e._report(\"pr.update_with_double_call\", {\n              event: n\n            }), void e._controller.warn(\"Call to updateWith() was ignored because it has already been called. Do not call updateWith more than once.\");\n            o && clearTimeout(o), i = !0, e._report(\"pr.update_with\", {\n              event: n,\n              updates: _s2\n            });\n            var c = Rt(ei, _s2 || {}, n + \" callback\"),\n                u = c.value;\n            c.warnings.forEach(function (t) {\n              return e._controller.warn(t);\n            });\n            var l = u,\n                p = !1;\n\n            if (e._initialOptions.__isCheckout && \"APPLE_PAY\" === e._activeBackingLibraryName && u.shippingOptions && 1 === u.shippingOptions.length && 0 === u.shippingOptions[0].amount) {\n              u.shippingOptions;\n              l = J(u, [\"shippingOptions\"]), p = !0;\n            }\n\n            var d = u.shippingOptions || e._initialOptions.shippingOptions;\n            if (!(p || \"shippingaddresschange\" !== t.type || u.status !== Go.success || d && d.length)) throw new Te(\"When requesting shipping information, you must specify shippingOptions once a shipping address is selected.\\nEither provide shippingOptions in stripe.paymentRequest(...) or listen for the shippingaddresschange event and provide shippingOptions to the updateWith callback there.\");\n            r.updateWith(l);\n          };\n\n          e._hasRegisteredListener(t.type) ? (o = setTimeout(function () {\n            a = !0, e._report(\"pr.update_with_timed_out\", {\n              event: n\n            }), e._controller.warn('Timed out waiting for a call to updateWith(). If you listen to \"' + t.type + '\" events, then you must call event.updateWith in the \"' + t.type + '\" handler within 30 seconds.'), s({\n              status: \"fail\"\n            });\n          }, 29900), e._emit(n, sa({}, r, {\n            updateWith: s\n          }))) : s({\n            status: \"success\"\n          });\n          break;\n\n        case \"token\":\n        case \"source\":\n        case \"paymentmethod\":\n          var c = t.type,\n              u = t.payload,\n              l = null,\n              p = !1,\n              d = !1,\n              f = function f(t) {\n            if (p && d) return e._report(\"pr.complete_called_after_timeout\"), void e._controller.warn(\"Call to complete() was ignored because it has already timed out. Please ensure that complete is called within 30 seconds.\");\n            if (d) return e._report(\"pr.complete_double_call\"), void e._controller.warn(\"Call to complete() was ignored because it has already been called. Do not call complete more than once.\");\n            l && clearTimeout(l), d = !0;\n            var n = Rt(ti, t, \"status for PaymentRequest completion\"),\n                r = n.value;\n            n.warnings.forEach(function (t) {\n              return e._controller.warn(t);\n            }), u.complete(r);\n          };\n\n          l = setTimeout(function () {\n            p = !0, e._report(\"pr.complete_timed_out\"), e._controller.warn('Timed out waiting for a call to complete(). Once you have processed the payment in the \"' + t.type + '\" handler, you must call event.complete within 30 seconds.'), f(\"fail\");\n          }, 29900), e._emit(c, sa({}, u, {\n            complete: f\n          }));\n          break;\n\n        default:\n          Re(t);\n      }\n    }, this._maybeEmitPaymentResponse = function (t) {\n      e._isShowing && e._emitExternalEvent(t);\n    }, this._emitPaymentResponse = function (t) {\n      e._report(\"pr.payment_authorized\");\n\n      var n = t.token,\n          r = J(t, [\"token\"]),\n          o = r.payerEmail,\n          i = r.payerPhone,\n          a = r.complete,\n          s = e._showCalledByButtonElement ? Dt.paymentRequestButton : null;\n      e._hasRegisteredListener(\"token\") && e._maybeEmitPaymentResponse({\n        type: \"token\",\n        payload: t\n      }), e._hasRegisteredListener(\"source\") && e._controller.action.createSourceWithData({\n        elementName: s,\n        type: \"card\",\n        sourceData: {\n          token: n.id,\n          owner: {\n            email: e._initialOptions.__billingDetailsEmailOverride || o,\n            phone: i\n          }\n        },\n        mids: null\n      }).then(function (t) {\n        \"error\" === t.type ? t.error.code && \"email_invalid\" === t.error.code ? a(\"invalid_payer_email\") : (e._report(\"fatal.pr.token_to_source_failed\", {\n          error: t.error,\n          token: n.id\n        }), a(\"fail\")) : e._maybeEmitPaymentResponse({\n          type: \"source\",\n          payload: sa({}, r, {\n            source: t.object\n          })\n        });\n      }), e._hasRegisteredListener(\"paymentmethod\") && e._controller.action.createPaymentMethodWithData({\n        elementName: s,\n        type: \"card\",\n        paymentMethodData: {\n          card: {\n            token: n.id\n          },\n          billing_details: {\n            email: e._initialOptions.__billingDetailsEmailOverride || o,\n            phone: i\n          }\n        },\n        mids: null\n      }).then(function (t) {\n        \"error\" === t.type ? t.error.code && \"email_invalid\" === t.error.code ? a(\"invalid_payer_email\") : (e._report(\"fatal.pr.token_to_payment_method_failed\", {\n          error: t.error,\n          token: n.id\n        }), a(\"fail\")) : e._maybeEmitPaymentResponse({\n          type: \"paymentmethod\",\n          payload: sa({}, r, {\n            paymentMethod: t.object\n          })\n        });\n      });\n    }, this._canMakePaymentForBackingLibrary = function (t) {\n      var n = e._backingLibraries[t];\n      if (!n) throw new Error(\"Unexpectedly calling canMakePayment on uninitialized backing library.\");\n      return Me.race([new Me(function (e) {\n        return setTimeout(e, 1e4);\n      }).then(function () {\n        return !1;\n      }), n.canMakePayment().then(function (e) {\n        return !!e;\n      })]).then(function (n) {\n        return e._canMakePaymentAvailability = sa({}, e._canMakePaymentAvailability, V({}, t, n)), {\n          backingLibraryName: t,\n          available: n\n        };\n      });\n    }, this._constructCanMakePaymentResponse = function () {\n      return sa({\n        applePay: !!e._canMakePaymentAvailability.APPLE_PAY\n      }, -1 !== e._queryStrategy.indexOf(\"GOOGLE_PAY\") ? {\n        googlePay: !!e._canMakePaymentAvailability.GOOGLE_PAY\n      } : {});\n    }, this.canMakePayment = fn(function () {\n      if (e._report(\"pr.can_make_payment\"), e._canMakePaymentResolved) {\n        var t = null !== e._activeBackingLibrary ? e._constructCanMakePaymentResponse() : null;\n        return e._report(\"pr.can_make_payment_response\", {\n          response: t,\n          cached: !0\n        }), Me.resolve(t);\n      }\n\n      if (\"https:\" !== window.location.protocol) return e._controller.warn(\"If you are testing the PaymentRequest button (to accept Apple Pay, Google Pay, etc.) you must serve this page over HTTPS as it will not work over HTTP. Please read https://stripe.com/docs/stripe-js/elements/payment-request-button#html-js-prerequisites for more details.\"), e._canMakePaymentResolved = !0, Me.resolve(null);\n\n      var n = e._queryStrategy.map(function (t) {\n        return function () {\n          return e._canMakePaymentForBackingLibrary(t);\n        };\n      }),\n          r = Date.now();\n\n      return Fo(n, function (t) {\n        var n = t.backingLibraryName,\n            r = t.available;\n        return r && (e._activeBackingLibraryName = n, e._activeBackingLibrary = e._backingLibraries[n]), r;\n      }).then(function (t) {\n        var n = Date.now();\n        e._canMakePaymentResolved = !0;\n        var o = null;\n        return \"SATISFIED\" === t.type && (o = e._constructCanMakePaymentResponse()), e._report(\"pr.can_make_payment_response\", {\n          response: o,\n          cached: !1,\n          duration: n - r\n        }), o;\n      });\n    }), this.update = fn(function (t) {\n      if (e._isShowing) throw e._report(\"pr.update_called_while_showing\"), new Te(\"You cannot update Payment Request options while the payment sheet is showing.\");\n\n      e._report(\"pr.update\", {\n        updates: t\n      });\n\n      var n = Rt(Xo, t, \"PaymentRequest update()\"),\n          r = n.value;\n      n.warnings.forEach(function (t) {\n        return e._warn(t);\n      }), e._activeBackingLibrary && e._activeBackingLibrary.update(r);\n    }), this.show = fn(function () {\n      if (e._usedByButtonElement && !e._showCalledByButtonElement && (e._report(\"pr.show_called_with_button\"), e._warn(\"Do not call show() yourself if you are using the paymentRequestButton Element. The Element handles showing the payment sheet.\")), !e._canMakePaymentResolved) throw e._report(\"pr.show_called_before_can_make_payment\"), new Te(\"You must first check the Payment Request API's availability using paymentRequest.canMakePayment() before calling show().\");\n      if (!e._activeBackingLibrary) throw e._report(\"pr.show_called_with_can_make_payment_false\"), new Te(\"Payment Request is not available in this browser.\");\n      var t = e._activeBackingLibrary;\n      e._report(\"pr.show\", {\n        listeners: Object.keys(e._callbacks).sort()\n      }), e._isShowing = !0, t.show();\n    }), this.abort = fn(function () {\n      if (e._activeBackingLibrary) {\n        var t = e._activeBackingLibrary;\n        e._report(\"pr.abort\"), t.abort();\n      }\n    });\n  },\n      la = ca,\n      pa = {\n    base: ot(gt),\n    complete: ot(gt),\n    empty: ot(gt),\n    invalid: ot(gt),\n    paymentRequestButton: ot(gt)\n  },\n      da = {\n    classes: ot(kt({\n      base: ot(dt),\n      complete: ot(dt),\n      empty: ot(dt),\n      focus: ot(dt),\n      invalid: ot(dt),\n      webkitAutofill: ot(dt)\n    })),\n    hidePostalCode: ot(ht),\n    hideIcon: ot(ht),\n    showIcon: ot(ht),\n    style: ot(kt(pa)),\n    iconStyle: ot(ct(\"solid\", \"default\")),\n    value: ot(it(dt, gt)),\n    __privateCvcOptional: ot(ht),\n    __privateValue: ot(it(dt, gt)),\n    __privateEmitIbanValue: ot(ht),\n    error: ot(kt({\n      type: dt,\n      code: ot(dt),\n      decline_code: ot(dt),\n      param: ot(dt)\n    })),\n    locale: St(\"elements()\"),\n    fonts: St(\"elements()\"),\n    placeholder: ot(dt),\n    disabled: ot(ht),\n    placeholderCountry: ot(dt),\n    paymentRequest: ot(function (e, t) {\n      return function (n, r) {\n        return n instanceof e ? et(n) : rt(\"a \" + t + \" instance\", n, r);\n      };\n    }(la, \"stripe.paymentRequest(...)\")),\n    supportedCountries: ot(Et(dt)),\n    accountHolderType: ot(ct(\"individual\", \"company\"))\n  },\n      fa = kt(da),\n      ha = [\"hu\", \"mt\", \"tr\", \"th\"],\n      _a = function (e) {\n    return function (t, n) {\n      return wo(n, go.stripe_js_beta_locales) ? t : -1 === e.indexOf(t) ? t : \"auto\";\n    };\n  }(ha),\n      ma = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      ya = function ya(e) {\n    return \"string\" == typeof e ? Le(Object.keys(Zr), function (t) {\n      return t === e;\n    }) || null : null;\n  },\n      va = function va(e) {\n    return null != e && e.__elementType && \"string\" == typeof e.__elementType && \"function\" == typeof e ? e.__elementType : null;\n  },\n      ba = function ba(e, t) {\n    var n = ya(e);\n    if (!n) throw new Te(\"A valid Element name must be provided. Valid Elements are:\\n\" + Object.keys(Zr).filter(function (e) {\n      return !Zr[e].beta;\n    }).join(\", \") + \"; you passed: \" + (n || (void 0 === e ? \"undefined\" : ma(e))) + \".\");\n  },\n      ga = function ga(e, t, n) {\n    if (ba(e), Zr[e].unique && -1 !== t.indexOf(e)) throw new Te(\"Can only create one Element of type \" + e + \".\");\n    var r = Zr[e].conflict,\n        o = qe(t, r);\n\n    if (o.length) {\n      var i = o[0];\n      throw new Te(\"Cannot create an Element of type \" + e + \" after an Element of type \" + i + \" has already been created.\");\n    }\n  },\n      Ea = \"14px\",\n      wa = function wa(e) {\n    var t = e.split(\" \").map(function (e) {\n      return parseInt(e.trim(), 10);\n    });\n    return 1 === t.length || 2 === t.length ? 2 * t[0] : 3 === t.length || 4 === t.length ? t[0] + t[2] : 0;\n  },\n      Sa = function Sa() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"1.2em\",\n        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ea,\n        n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"0\",\n        r = wa(n);\n\n    if (\"string\" == typeof e && /^[0-9.]+px$/.test(e)) {\n      return parseFloat(e.toString().replace(/[^0-9.]/g, \"\")) + r + \"px\";\n    }\n\n    var o = parseFloat(e.toString().replace(/[^0-9.]/g, \"\")),\n        i = parseFloat(Ea.replace(/[^0-9.]/g, \"\")),\n        a = parseFloat(t.toString().replace(/[^0-9.]/g, \"\")),\n        s = void 0;\n    if (\"string\" == typeof t && /^(\\d+|\\d*\\.\\d+)px$/.test(t)) s = a;else if (\"string\" == typeof t && /^(\\d+|\\d*\\.\\d+)em$/.test(t)) s = a * i;else if (\"string\" == typeof t && /^(\\d+|\\d*\\.\\d+)%$/.test(t)) s = a / 100 * i;else {\n      if (\"string\" != typeof t || !/^[\\d.]+$/.test(t) && !/^\\d*\\.(px|em|%)$/.test(t)) return \"100%\";\n      s = i;\n    }\n    var c = o * s + r,\n        u = c + \"px\";\n    return /^[0-9.]+px$/.test(u) ? u : \"100%\";\n  },\n      Pa = Sa,\n      Oa = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      ka = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      Aa = {\n    base: \"StripeElement\",\n    focus: \"StripeElement--focus\",\n    invalid: \"StripeElement--invalid\",\n    complete: \"StripeElement--complete\",\n    empty: \"StripeElement--empty\",\n    webkitAutofill: \"StripeElement--webkit-autofill\"\n  },\n      Ta = {\n    margin: \"0\",\n    padding: \"0\",\n    border: \"none\",\n    display: \"block\",\n    background: \"transparent\",\n    position: \"relative\",\n    opacity: \"1\"\n  },\n      Ra = {\n    border: \"none\",\n    display: \"block\",\n    position: \"absolute\",\n    height: \"1px\",\n    top: \"0\",\n    left: \"0\",\n    padding: \"0\",\n    margin: \"0\",\n    width: \"100%\",\n    opacity: \"0\",\n    background: \"transparent\",\n    \"pointer-events\": \"none\",\n    \"font-size\": \"16px\"\n  },\n      Ia = function Ia(e) {\n    return parseFloat(e.toFixed(1));\n  },\n      Na = function Na(e) {\n    return /^\\d+(\\.\\d*)?px$/.test(e);\n  },\n      Ca = function (e) {\n    function t(e, n) {\n      te(this, t);\n      var r = ne(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));\n      Ma.call(r);\n      var o = e.controller,\n          i = e.componentName,\n          a = e.paymentRequest;\n      r._controller = o, r._listenerRegistry = n, r._componentName = i;\n      var s = \"paymentRequestButton\" === r._componentName;\n\n      if (s) {\n        if (!a) throw new Te(\"You must pass in a stripe.paymentRequest object in order to use this Element.\");\n        r._paymentRequest = a, r._paymentRequest._registerElement();\n      }\n\n      return r._createComponent(e, i), r._classes = Aa, r._computeCustomClasses(e.classes || {}), r._lastBackgroundColor = \"\", r._destroyed = !1, r._focused = !1, r._empty = !s, r._invalid = !1, r._complete = !1, r._autofilled = !1, r._lastSubmittedAt = null, r;\n    }\n\n    return re(t, e), ka(t, [{\n      key: \"_checkDestroyed\",\n      value: function value() {\n        if (this._destroyed) throw new Te(\"This Element has already been destroyed. Please create a new one.\");\n      }\n    }, {\n      key: \"_isMounted\",\n      value: function value() {\n        return !!document.body && document.body.contains(this._component);\n      }\n    }, {\n      key: \"_mountToParent\",\n      value: function value(e) {\n        var t = this._component.parentElement,\n            n = this._isMounted();\n\n        if (e === t) {\n          if (n) return;\n          this.unmount(), this._mountTo(e);\n        } else if (t) {\n          if (n) throw new Te(\"This Element is already mounted. Use `unmount()` to unmount the Element before re-mounting.\");\n          this.unmount(), this._mountTo(e);\n        } else this._mountTo(e);\n      }\n    }, {\n      key: \"_mountTo\",\n      value: function value(e) {\n        var t = Date.now(),\n            n = Bn(e, null),\n            r = !!n && \"rtl\" === n.getPropertyValue(\"direction\"),\n            o = this._paymentRequest ? this._paymentRequest._activeBackingLibraryName : null;\n\n        for (this._parent = e; e.firstChild;) {\n          e.removeChild(e.firstChild);\n        }\n\n        e.appendChild(this._component), this._frame.send({\n          action: \"stripe-user-mount\",\n          payload: {\n            mountTime: t,\n            rtl: r,\n            paymentRequestButtonType: o\n          }\n        }), this._findPossibleLabel(), this._updateClasses();\n      }\n    }, {\n      key: \"_updateClasses\",\n      value: function value() {\n        this._parent && rn(this._parent, [[this._classes.base, !0], [this._classes.empty, this._empty], [this._classes.focus, this._focused], [this._classes.invalid, this._invalid], [this._classes.complete, this._complete], [this._classes.webkitAutofill, this._autofilled]]);\n      }\n    }, {\n      key: \"_removeClasses\",\n      value: function value() {\n        this._parent && rn(this._parent, [[this._classes.base, !1], [this._classes.empty, !1], [this._classes.focus, !1], [this._classes.invalid, !1], [this._classes.complete, !1], [this._classes.webkitAutofill, !1]]);\n      }\n    }, {\n      key: \"_findPossibleLabel\",\n      value: function value() {\n        var e = this._parent;\n\n        if (e) {\n          var t = e.getAttribute(\"id\"),\n              n = void 0;\n          if (t && (n = document.querySelector(\"label[for='\" + t + \"']\")), n) this._listenerRegistry.addEventListener(e, \"click\", this.focus);else for (n = n || e.parentElement; n && \"LABEL\" !== n.nodeName;) {\n            n = n.parentElement;\n          }\n          n ? (this._label = n, this._listenerRegistry.addEventListener(n, \"click\", this.focus)) : this._listenerRegistry.addEventListener(e, \"click\", this.focus);\n        }\n      }\n    }, {\n      key: \"_computeCustomClasses\",\n      value: function value(e) {\n        var t = {};\n        return Object.keys(e).forEach(function (n) {\n          if (!Aa[n]) throw new Te(n + \" is not a customizable class name.\\nYou can customize: \" + Object.keys(Aa).join(\", \"));\n          var r = e[n] || Aa[n];\n          t[n] = r.replace(/\\./g, \" \");\n        }), this._classes = Oa({}, this._classes, t), this;\n      }\n    }, {\n      key: \"_emitEvent\",\n      value: function value(e, t) {\n        return this._emit(e, Oa({\n          elementType: this._componentName\n        }, t));\n      }\n    }, {\n      key: \"_setupEvents\",\n      value: function value() {\n        var e = this;\n        this._frame._on(\"redirectfocus\", function (t) {\n          var n = t.focusDirection,\n              r = Un(e._component, n);\n          r && r.focus();\n        }), this._frame._on(\"focus\", function () {\n          e._focused = !0, e._updateClasses();\n        }), this._frame._on(\"blur\", function () {\n          e._focused = !1, e._updateClasses(), e._lastSubmittedAt && \"paymentRequestButton\" === e._componentName && (e._controller.report(\"payment_request_button.sheet_visible\", {\n            latency: new Date() - e._lastSubmittedAt\n          }), e._lastSubmittedAt = null);\n        }), this._frame._on(\"submit\", function () {\n          if (\"paymentRequestButton\" === e._componentName) {\n            e._lastSubmittedAt = new Date();\n            var t = !1,\n                n = !1;\n            $r(), e._emitEvent(\"click\", {\n              preventDefault: function preventDefault() {\n                e._controller.report(\"payment_request_button.default_prevented\"), t && e._controller.warn(\"event.preventDefault() was called after the payment sheet was shown. Make sure to call it synchronously when handling the `click` event.\"), n = !0;\n              }\n            }), !n && e._paymentRequest && (e._paymentRequest._elementShow(), t = !0);\n          } else e._emitEvent(\"submit\"), e._formSubmit();\n        }), [\"ready\", \"focus\", \"blur\", \"escape\"].forEach(function (t) {\n          e._frame._on(t, function () {\n            e._emitEvent(t);\n          });\n        }), this._frame._on(\"change\", function (t) {\n          $r();\n          var n = {};\n          [\"error\", \"value\", \"empty\", \"complete\"].concat(ee(io[e._componentName] || [])).forEach(function (e) {\n            return n[e] = t[e];\n          }), e._emitEvent(\"change\", n), e._empty = n.empty, e._invalid = !!n.error, e._complete = n.complete, e._updateClasses();\n        }), this._frame._on(\"__privateIntegrationError\", function (t) {\n          var n = t.message;\n\n          e._emitEvent(\"__privateIntegrationError\", {\n            message: n\n          });\n        }), this._frame._on(\"dimensions\", function (t) {\n          if (e._parent) {\n            var n = Bn(e._parent, null);\n\n            if (n) {\n              var r = parseFloat(n.getPropertyValue(\"height\")),\n                  o = t.height;\n\n              if (\"border-box\" === n.getPropertyValue(\"box-sizing\")) {\n                var i = parseFloat(n.getPropertyValue(\"padding-top\")),\n                    a = parseFloat(n.getPropertyValue(\"padding-bottom\"));\n                r = r - parseFloat(n.getPropertyValue(\"border-top\")) - parseFloat(n.getPropertyValue(\"border-bottom\")) - i - a;\n              }\n\n              0 !== r && Ia(r) < Ia(o) && e._controller.report(\"wrapper_height_mismatch\", {\n                height: o,\n                outer_height: r\n              });\n\n              var s = e._component.getBoundingClientRect().height;\n\n              0 !== s && 0 !== o && Ia(s) !== Ia(o) && (e._frame.updateStyle({\n                height: o + \"px\"\n              }), e._controller.report(\"iframe_height_update\", {\n                height: o,\n                calculated_height: s\n              }));\n            }\n          }\n        }), this._frame._on(\"autofill\", function () {\n          if (e._parent) {\n            var t = e._parent.style.backgroundColor,\n                n = \"#faffbd\" === t || \"rgb(250, 255, 189)\" === t;\n            e._lastBackgroundColor = n ? e._lastBackgroundColor : t, e._parent.style.backgroundColor = \"#faffbd\", e._autofilled = !0, e._updateClasses();\n          }\n        }), this._frame._on(\"autofill-cleared\", function () {\n          e._autofilled = !1, e._parent && (e._parent.style.backgroundColor = e._lastBackgroundColor), e._updateClasses();\n        });\n      }\n    }, {\n      key: \"_handleOutsideClick\",\n      value: function value() {\n        this._secondaryFrame && this._secondaryFrame.send({\n          action: \"stripe-outside-click\",\n          payload: {}\n        });\n      }\n    }, {\n      key: \"_createSecondFrame\",\n      value: function value(e, t, n) {\n        var r = this._controller.createSecondaryElementFrame(e, Oa({}, n, {\n          componentName: t\n        }));\n\n        return r && r.on && r.on(\"height-change\", function (e) {\n          r.updateStyle({\n            height: e.height + \"px\"\n          });\n        }), r;\n      }\n    }, {\n      key: \"_createComponent\",\n      value: function value(e, t) {\n        this._createElement(e, t), this._setupEvents(), this._updateFrameHeight(e, !0);\n      }\n    }, {\n      key: \"_updateFrameHeight\",\n      value: function value(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n\n        if (\"paymentRequestButton\" === this._componentName) {\n          var n = e.style && e.style.paymentRequestButton || {},\n              r = n.height,\n              o = \"string\" == typeof r ? r : void 0;\n          (t || o) && (this._frame.updateStyle({\n            height: o || this._lastHeight || \"40px\"\n          }), this._lastHeight = o || this._lastHeight);\n        } else {\n          var i = e.style && e.style.base || {},\n              a = i.lineHeight,\n              s = i.fontSize,\n              c = i.padding,\n              u = \"string\" != typeof a || isNaN(parseFloat(a)) ? void 0 : a,\n              l = \"string\" == typeof s ? s : void 0,\n              p = \"string\" == typeof c ? c : void 0;\n\n          if (l && !Na(l) && this._controller.warn(\"The fontSize style you specified (\" + l + \") is not in px. We do not recommend using relative css units, as they will be calculated relative to our iframe's styles rather than your site's.\"), t || u || l) {\n            var d = -1 === Kt.indexOf(this._componentName) ? void 0 : p || this._lastPadding,\n                f = Pa(u || this._lastHeight, l || this._lastFontSize, d);\n            this._frame.updateStyle({\n              height: f\n            }), this._lastFontSize = l || this._lastFontSize, this._lastHeight = u || this._lastHeight, this._lastPadding = d;\n          }\n        }\n      }\n    }, {\n      key: \"_createElement\",\n      value: function value(e, t) {\n        var n = this,\n            r = (e.classes, e.controller, e.paymentRequest, Z(e, [\"classes\", \"controller\", \"paymentRequest\"])),\n            o = document.createElement(\"div\");\n        o.className = \"__PrivateStripeElement\";\n        var i = document.createElement(\"input\");\n        i.className = \"__PrivateStripeElement-input\", i.setAttribute(\"aria-hidden\", \"true\"), i.setAttribute(\"aria-label\", \" \"), i.setAttribute(\"autocomplete\", \"false\"), i.maxLength = 1, i.disabled = !0, on(o, Ta), on(i, Ra);\n\n        var a = Bn(document.body),\n            s = !!a && \"rtl\" === a.getPropertyValue(\"direction\"),\n            c = to[t],\n            u = Oa({}, r, {\n          rtl: s\n        }),\n            l = this._controller.createElementFrame(c, u);\n\n        if (l._on(\"load\", function () {\n          i.disabled = !1;\n        }), this._listenerRegistry.addEventListener(i, \"focus\", function () {\n          l.focus();\n        }), l.appendTo(o), ao[t]) {\n          var p = ao[t].secondary;\n          this._secondaryFrame = this._createSecondFrame(c, p, Oa({}, u, {\n            primaryElementType: t\n          })), this._secondaryFrame.appendTo(o), this._listenerRegistry.addEventListener(window, \"click\", function () {\n            return n._handleOutsideClick();\n          });\n        }\n\n        if (o.appendChild(i), br && t !== Dt.paymentRequestButton) {\n          var d = document.createElement(\"input\");\n          d.className = \"__PrivateStripeElement-safariInput\", d.setAttribute(\"aria-hidden\", \"true\"), d.setAttribute(\"tabindex\", \"-1\"), d.setAttribute(\"autocomplete\", \"false\"), d.maxLength = 1, d.disabled = !0, on(d, Ra), o.appendChild(d);\n        }\n\n        this._component = o, this._frame = l, this._fakeInput = i;\n      }\n    }]), t;\n  }(vn),\n      Ma = function Ma() {\n    var e = this;\n    this._paymentRequest = null, this.mount = fn(function (t) {\n      e._checkDestroyed();\n\n      var n = void 0;\n      if (!t) throw new Te(\"Missing argument. Make sure to call mount() with a valid DOM element or selector.\");\n\n      if (\"string\" == typeof t) {\n        var r = document.querySelectorAll(t);\n        if (r.length > 1 && e._controller.warn(\"The selector you specified (\" + t + \") applies to \" + r.length + \" DOM elements that are currently on the page.\\nThe Stripe Element will be mounted to the first one.\"), !r.length) throw new Te(\"The selector you specified (\" + t + \") applies to no DOM elements that are currently on the page.\\nMake sure the element exists on the page before calling mount().\");\n        n = r[0];\n      } else {\n        if (!t.appendChild) throw new Te(\"Invalid DOM element. Make sure to call mount() with a valid DOM element or selector.\");\n        n = t;\n      }\n\n      if (\"INPUT\" === n.nodeName) throw new Te(\"Stripe Elements must be mounted in a DOM element that\\ncan contain child nodes. `input` elements are not permitted to have child\\nnodes. Try using a `div` element instead.\");\n\n      if (n.children.length && e._controller.warn(\"This Element will be mounted to a DOM element that contains child nodes.\"), e._paymentRequest) {\n        if (!e._paymentRequest._canMakePaymentResolved) throw new Te(\"For the paymentRequestButton Element, you must first check availability using paymentRequest.canMakePayment() before mounting the Element.\");\n        if (!e._paymentRequest._activeBackingLibraryName) throw new Te(\"The paymentRequestButton Element is not available in the current environment.\");\n\n        e._mountToParent(n);\n      } else e._mountToParent(n);\n    }), this.update = fn(function (t) {\n      e._checkDestroyed();\n\n      var n = Rt(fa, t || {}, \"element.update()\"),\n          r = n.value;\n\n      if (n.warnings.forEach(function (t) {\n        return e._controller.warn(t);\n      }), r) {\n        var o = r.classes,\n            i = Z(r, [\"classes\"]);\n        o && (e._removeClasses(), e._computeCustomClasses(o), e._updateClasses()), e._updateFrameHeight(r), Object.keys(i).length && (e._frame.update(i), e._secondaryFrame && e._secondaryFrame.update(i));\n      }\n\n      return e;\n    }), this.focus = fn(function (t) {\n      return e._checkDestroyed(), t && t.preventDefault(), document.activeElement && document.activeElement.blur && document.activeElement.blur(), e._fakeInput.focus(), e;\n    }), this.blur = fn(function () {\n      return e._checkDestroyed(), e._frame.blur(), e._fakeInput.blur(), e;\n    }), this.clear = fn(function () {\n      return e._checkDestroyed(), e._frame.clear(), e;\n    }), this.unmount = fn(function () {\n      e._checkDestroyed();\n\n      var t = e._component.parentElement,\n          n = e._label;\n      return t && (t.removeChild(e._component), e._listenerRegistry.removeEventListener(t, \"click\", e.focus), e._removeClasses()), e._parent = null, n && (e._listenerRegistry.removeEventListener(n, \"click\", e.focus), e._label = null), e._secondaryFrame && (e._secondaryFrame.unmount(), e._listenerRegistry.removeEventListener(window, \"click\", e._handleOutsideClick)), e._fakeInput.disabled = !0, e._frame.unmount(), e;\n    }), this.destroy = fn(function () {\n      return e._checkDestroyed(), e.unmount(), e._destroyed = !0, e._emitEvent(\"destroy\"), e;\n    }), this._formSubmit = function () {\n      for (var t = e._component.parentElement; t && \"FORM\" !== t.nodeName;) {\n        t = t.parentElement;\n      }\n\n      if (t) {\n        var n = document.createEvent(\"Event\");\n        n.initEvent(\"submit\", !0, !0), t.dispatchEvent(n);\n      }\n    };\n  },\n      ja = Ca,\n      La = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      xa = {\n    locale: ot(dt),\n    fonts: ot(Et(gt)),\n    betas: ot(Et(ut.apply(void 0, ae(Eo))))\n  },\n      Da = kt(xa),\n      qa = function e(t, n, r) {\n    var o = this;\n    ie(this, e), Fa.call(this);\n    var i = Rt(Da, r || {}, \"elements()\"),\n        a = i.value;\n    i.warnings.forEach(function (e) {\n      return t.warn(e);\n    }), bo(t.warn), t.report(\"elements\", {\n      options: r\n    }), this._elements = [], this._id = Jt(\"elements\"), this._controller = t, this._betas = a.betas || [], this._listenerRegistry = n, a.locale = _a(a.locale, this._betas);\n    var s = a.locale,\n        c = a.fonts || [];\n\n    this._controller.action.fetchLocale({\n      locale: s || \"auto\"\n    });\n\n    var u = c.filter(function (e) {\n      return !e.cssSrc || \"string\" != typeof e.cssSrc;\n    }).map(function (e) {\n      return La({}, e, {\n        __resolveFontRelativeTo: window.location.href\n      });\n    }),\n        l = c.map(function (e) {\n      return e.cssSrc;\n    }).reduce(function (e, t) {\n      return \"string\" == typeof t ? [].concat(ae(e), [t]) : e;\n    }, []).map(function (e) {\n      return Ve(e) ? e : Qe(window.location.href, e);\n    });\n    this._pendingFonts = l.length;\n    var p = (a.betas, oe(a, [\"betas\"]));\n    return this._commonOptions = La({}, p, {\n      fonts: u\n    }), l.forEach(function (e) {\n      if (\"string\" == typeof e) {\n        var t = Date.now();\n        Do(e).then(function (n) {\n          o._controller.report(\"font.loaded\", {\n            load_time: Date.now() - t,\n            font_count: n.length,\n            css_src: e\n          });\n\n          var r = n.map(function (t) {\n            return La({}, t, {\n              __resolveFontRelativeTo: e\n            });\n          });\n          o._controller.action.updateCSSFonts({\n            fonts: r,\n            groupId: o._id\n          }), o._commonOptions = La({}, o._commonOptions, {\n            fonts: [].concat(ae(o._commonOptions.fonts ? o._commonOptions.fonts : []), ae(r))\n          });\n        })[\"catch\"](function (n) {\n          o._controller.report(\"error.font.not_loaded\", {\n            load_time: Date.now() - t,\n            message: n && n.message && n.message,\n            css_src: e\n          }), o._controller.warn(\"Failed to load CSS file at \" + e + \".\");\n        });\n      }\n    }), this;\n  },\n      Fa = function Fa() {\n    var e = this;\n    this.getElement = fn(function (t) {\n      var n = va(t) || t;\n      return ba(n, e._betas), Le(e._elements, function (e) {\n        return e._componentName === n;\n      }) || null;\n    }), this.create = hn(function (t, n) {\n      ga(t, e._elements.map(function (e) {\n        return e._componentName;\n      }), e._betas);\n      var r = Rt(fa, n || {}, \"create()\"),\n          o = r.value;\n      r.warnings.forEach(function (t) {\n        return e._controller.warn(t);\n      });\n      var i = La({}, o, e._commonOptions, {\n        componentName: t,\n        groupId: e._id\n      }),\n          a = (i.paymentRequest, oe(i, [\"paymentRequest\"])),\n          s = (yr || vr) && Zt(a).length > 2e3,\n          c = !!e._pendingFonts || s,\n          u = new ja(La({}, i, {\n        fonts: s ? null : e._commonOptions.fonts,\n        controller: e._controller,\n        wait: c\n      }), e._listenerRegistry);\n      return e._elements = [].concat(ae(e._elements), [u]), u._on(\"destroy\", function () {\n        e._elements = e._elements.filter(function (e) {\n          return e._componentName !== t;\n        });\n      }), s && u._frame.send({\n        action: \"stripe-user-update\",\n        payload: {\n          fonts: e._commonOptions.fonts\n        }\n      }), u;\n    });\n  },\n      Ba = qa,\n      Ua = function Ua(e, t, n, r, o, i, a) {\n    return new la({\n      controller: e,\n      authentication: t,\n      mids: n,\n      rawOptions: r,\n      betas: o,\n      queryStrategyOverride: i,\n      listenerRegistry: a\n    });\n  },\n      Ha = Ua,\n      Ya = {\n    _componentName: dt,\n    _frame: kt({\n      id: dt\n    })\n  },\n      Ga = kt(Ya),\n      Wa = function Wa(e) {\n    var t = Tt(Ga, e, \"\");\n    return \"error\" === t.type ? null : t.value;\n  },\n      za = {\n    alipay: \"alipay\",\n    au_becs_debit: \"au_becs_debit\",\n    acss_debit: \"acss_debit\",\n    bacs_debit: \"bacs_debit\",\n    bancontact: \"bancontact\",\n    card: \"card\",\n    eps: \"eps\",\n    fpx: \"fpx\",\n    giropay: \"giropay\",\n    grabpay: \"grabpay\",\n    ideal: \"ideal\",\n    oxxo: \"oxxo\",\n    p24: \"p24\",\n    sepa_debit: \"sepa_debit\",\n    sofort: \"sofort\",\n    three_d_secure: \"three_d_secure\"\n  },\n      Ka = (ke = {}, se(ke, Dt.auBankAccount, za.au_becs_debit), se(ke, Dt.card, za.card), se(ke, Dt.cardNumber, za.card), se(ke, Dt.cardExpiry, za.card), se(ke, Dt.cardCvc, za.card), se(ke, Dt.postalCode, za.card), se(ke, Dt.iban, za.sepa_debit), se(ke, Dt.idealBank, za.ideal), se(ke, Dt.fpxBank, za.fpx), ke),\n      Va = function Va(e) {\n    return -1 === Ut.indexOf(e);\n  },\n      Ja = function Ja(e, t) {\n    return null != t ? t : Va(e) ? null : Ka[e] || null;\n  },\n      Qa = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      $a = function $a(e, t) {\n    switch (e.type) {\n      case \"object\":\n        return {\n          paymentIntent: e.object\n        };\n\n      case \"error\":\n        return {\n          error: Qa({}, t ? {\n            payment_intent: t\n          } : {}, e.error)\n        };\n\n      default:\n        return Re(e);\n    }\n  },\n      Xa = function Xa(e) {\n    switch (e.type) {\n      case \"error\":\n        return {\n          error: e.error\n        };\n\n      case \"object\":\n        return {\n          setupIntent: e.object\n        };\n\n      default:\n        return Re(e);\n    }\n  },\n      Za = function Za(e) {\n    var t = e.trim().match(/^([a-z]+_[^_]+)_secret_[^-]+$/);\n    return t ? {\n      id: t[1],\n      clientSecret: t[0]\n    } : null;\n  },\n      es = function es(e) {\n    return {\n      id: e.id,\n      clientSecret: e.client_secret\n    };\n  },\n      ts = function ts(e) {\n    return \"requires_source_action\" === e || \"requires_action\" === e;\n  },\n      ns = function ns(e) {\n    return \"requires_source_action\" === e.status || \"requires_action\" === e.status ? e.next_action : null;\n  },\n      rs = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      os = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      is = function is(e, t) {\n    if (\"string\" != typeof e) return rt(\"a client_secret string\", e, t);\n    var n = Za(e);\n    return null === n ? rt(\"a client secret of the form ${id}_secret_${secret}\", e, t) : et(n, []);\n  },\n      as = function as(e, t) {\n    if (null === e) return nt(\"object\", \"null\", t);\n    if (\"object\" !== (void 0 === e ? \"undefined\" : os(e))) return nt(\"object\", void 0 === e ? \"undefined\" : os(e), t);\n    var n = e.client_secret,\n        r = e.status,\n        o = e.next_action,\n        i = is(n, At(t, \"client_secret\"));\n    if (\"error\" === i.type) return i;\n    if (\"string\" != typeof r) return nt(\"string\", void 0 === r ? \"undefined\" : os(r), At(t, \"status\"));\n    if ((\"requires_source_action\" === r || \"requires_action\" === r) && \"object\" !== (void 0 === o ? \"undefined\" : os(o))) return nt(\"object\", void 0 === o ? \"undefined\" : os(o), At(t, \"next_action\"));\n\n    if (\"payment_intent\" === e.object) {\n      return et(e, []);\n    }\n\n    return et(e, []);\n  },\n      ss = function ss(e) {\n    return function (t, n) {\n      if (\"object\" !== (void 0 === t ? \"undefined\" : os(t))) return nt(\"object\", void 0 === t ? \"undefined\" : os(t), n);\n      if (null === t) return nt(\"object\", \"null\", n);\n      var r = t.type,\n          o = ue(t, [\"type\"]),\n          i = void 0;\n\n      if (null === e) {\n        if (\"string\" != typeof r) return nt(\"string\", void 0 === r ? \"undefined\" : os(r), At(n, \"type\"));\n        i = r;\n      } else {\n        if (void 0 !== r && r !== e) return \"string\" != typeof r ? nt(\"string\", void 0 === r ? \"undefined\" : os(r), At(n, \"type\")) : nt('\"' + r + '\"', '\"' + e + '\"', At(n, \"type\"));\n        i = e;\n      }\n\n      var a = [\"alipay\", \"bancontact\", \"eps\", \"giropay\", \"grabpay\", \"oxxo\", \"p24\"],\n          s = o[i],\n          c = (o[i], ue(o, [i]));\n      if (-1 !== a.indexOf(i) && void 0 === s && (s = {}), \"object\" !== (void 0 === s ? \"undefined\" : os(s))) return nt(\"object or element\", os(t[i]), At(n, i));\n      if (null === s) return nt(\"object or element\", \"null\", At(n, i));\n      var u = Wa(s);\n\n      if (u) {\n        var l = u._componentName;\n\n        if (Ka[l] !== i) {\n          var p = [].concat(ce(n.path), [i]).join(\".\"),\n              d = n.label,\n              f = new Te(\"Invalid value for \" + d + \": \" + p + \" was `\" + l + \"` Element, which cannot be used to create \" + i + \" PaymentMethods.\");\n          return tt(f);\n        }\n\n        return et({\n          type: i,\n          element: u,\n          data: c\n        });\n      }\n\n      return et({\n        type: i,\n        element: null,\n        data: o\n      });\n    };\n  },\n      cs = function cs(e) {\n    return function (t, n) {\n      if (null == t) return et(null);\n      if (\"object\" !== (void 0 === t ? \"undefined\" : os(t))) return nt(\"object\", void 0 === t ? \"undefined\" : os(t), n);\n      var r = t.card,\n          o = ue(t, [\"card\"]);\n      if (!r || \"object\" !== (void 0 === r ? \"undefined\" : os(r))) return et(t);\n      var i = r.cvc,\n          a = ue(r, [\"cvc\"]);\n      if (null == i) return et(t);\n      var s = Wa(i),\n          c = s ? s._componentName : \"\";\n      return Dt.cardCvc !== c ? nt(\"`\" + Dt.cardCvc + \"` Element\", c ? \"`\" + c + \"` Element\" : void 0 === i ? \"undefined\" : os(i), At(n, e + \".cvc\")) : et(rs({}, o, {\n        card: rs({}, a, {\n          cvc: s\n        })\n      }));\n    };\n  },\n      us = ft(kt({\n    handleActions: ft(ht, function () {\n      return !0;\n    })\n  }), function () {\n    return {\n      handleActions: !0\n    };\n  }),\n      ls = function ls(e, t) {\n    return function (n, r) {\n      if (void 0 === n) return et({\n        paymentMethodData: null,\n        paymentMethodOptions: null,\n        source: null,\n        paymentMethod: null,\n        otherParams: {}\n      });\n      if (\"object\" !== (void 0 === n ? \"undefined\" : os(n))) return nt(\"object\", void 0 === n ? \"undefined\" : os(n), r);\n      if (null === n) return nt(\"object\", \"null\", r);\n      var o = n.source,\n          i = n.source_data,\n          a = n.payment_method_data,\n          s = n.payment_method_options,\n          c = n.payment_method,\n          u = ue(n, [\"source\", \"source_data\", \"payment_method_data\", \"payment_method_options\", \"payment_method\"]);\n      if (null != i) throw new Te(t + \": Expected payment_method, or source, not source_data.\");\n      if (null != a) throw new Te(t + \": Expected payment_method, or source, not payment_method_data.\");\n      if (null != o && null != c) throw new Te(t + \": Expected either payment_method or source, but not both.\");\n      if (null != o) return \"string\" != typeof o ? nt(\"string\", void 0 === o ? \"undefined\" : os(o), At(r, \"source\")) : et({\n        source: o,\n        paymentMethodData: null,\n        paymentMethodOptions: null,\n        paymentMethod: null,\n        otherParams: u\n      });\n      if (null != c && \"string\" != typeof c && \"object\" !== (void 0 === c ? \"undefined\" : os(c))) return nt(\"string or object\", void 0 === c ? \"undefined\" : os(c), At(r, \"payment_method\"));\n      var l = Tt(cs(e), s, t, {\n        path: [].concat(ce(r.path), [\"payment_method_options\"])\n      });\n      if (\"error\" === l.type) return l;\n      if (\"string\" == typeof c) return et({\n        source: null,\n        paymentMethodData: null,\n        paymentMethodOptions: l.value,\n        paymentMethod: c,\n        otherParams: u\n      });\n\n      if (\"object\" === (void 0 === c ? \"undefined\" : os(c)) && null !== c) {\n        var p = Tt(ss(e), c, t, {\n          path: [].concat(ce(r.path), [\"payment_method\"])\n        });\n        if (\"error\" === p.type) return p;\n        var d = p.value;\n        return et({\n          source: null,\n          paymentMethod: null,\n          paymentMethodOptions: l.value,\n          paymentMethodData: d,\n          otherParams: u\n        });\n      }\n\n      return et({\n        source: null,\n        paymentMethodData: null,\n        paymentMethodOptions: null,\n        paymentMethod: null,\n        otherParams: u\n      });\n    };\n  },\n      ps = kt({\n    name: ct(\"react-stripe-js\", \"stripe-js\", \"react-stripe-elements\"),\n    version: function (e) {\n      return function (t, n) {\n        return null === t ? et(t) : e(t, n);\n      };\n    }(dt)\n  }),\n      ds = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      fs = [\"elements\", \"createToken\", \"createPaymentMethod\"],\n      hs = [\"elements\", \"createSource\", \"createToken\", \"createPaymentMethod\"],\n      _s = function () {\n    function e(t) {\n      var n = this;\n      le(this, e), this._gets = [], this._didDetect = !1, this._onDetection = function (e) {\n        n._didDetect = !0, t(e);\n      }, window.Stripe && window.Stripe.__cachedInstances && this._onDetection(\"react-stripe-elements\");\n    }\n\n    return ds(e, [{\n      key: \"got\",\n      value: function value(e) {\n        this._didDetect || (\"elements\" === e ? this._gets = [\"elements\"] : this._gets.push(e), this._checkForWrapper());\n      }\n    }, {\n      key: \"called\",\n      value: function value(e) {\n        this._didDetect || (this._gets = this._gets.filter(function (t) {\n          return t !== e;\n        }));\n      }\n    }, {\n      key: \"_checkForWrapper\",\n      value: function value() {\n        De(this._gets, fs) ? this._onDetection(\"react-stripe-js\") : De(this._gets, hs) && this._onDetection(\"react-stripe-elements\");\n      }\n    }]), e;\n  }(),\n      ms = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      ys = function ys(e) {\n    if (!e || \"object\" !== (void 0 === e ? \"undefined\" : ms(e))) return null;\n    var t = e.type,\n        n = pe(e, [\"type\"]);\n    return {\n      type: \"string\" == typeof t ? t : null,\n      data: n\n    };\n  },\n      vs = function vs(e) {\n    switch (e.type) {\n      case \"object\":\n        return {\n          source: e.object\n        };\n\n      case \"error\":\n        return {\n          error: e.error\n        };\n\n      default:\n        return Re(e);\n    }\n  },\n      bs = {\n    source: kt({\n      id: st(\"src_\"),\n      client_secret: st(\"src_client_secret_\")\n    })\n  },\n      gs = kt(bs),\n      Es = function Es(e) {\n    switch (e.type) {\n      case \"object\":\n        return {\n          paymentMethod: e.object\n        };\n\n      case \"error\":\n        return {\n          error: e.error\n        };\n\n      default:\n        return Re(e);\n    }\n  },\n      ws = function ws(e) {\n    return Rt(ss(null), e, \"createPaymentMethod\").value;\n  },\n      Ss = function Ss(e, t, n, r, o) {\n    var i = Wa(r),\n        a = ys(i ? o : r),\n        s = a || {\n      type: null,\n      data: {}\n    },\n        c = s.type,\n        u = s.data;\n    if (c && n !== c) return Me.reject(new Te(\"The type supplied in payment_method_data is not consistent.\"));\n\n    if (i) {\n      var l = i._frame.id,\n          p = i._componentName;\n      return e.action.createPaymentMethodWithElement({\n        frameId: l,\n        elementName: p,\n        type: n,\n        paymentMethodData: u,\n        mids: t\n      }).then(Es);\n    }\n\n    return a ? e.action.createPaymentMethodWithData({\n      elementName: null,\n      type: n,\n      paymentMethodData: u,\n      mids: t\n    }).then(Es) : Me.reject(new Te(\"Please provide either an Element or PaymentMethod creation parameters to createPaymentMethod.\"));\n  },\n      Ps = function Ps(e, t, n, r, o) {\n    if (\"string\" == typeof n) return Ss(e, t, n, r, o);\n\n    try {\n      var i = ws(n),\n          a = i.element,\n          s = i.type,\n          c = i.data;\n\n      if (a) {\n        var u = a._frame.id,\n            l = a._componentName;\n        return e.action.createPaymentMethodWithElement({\n          frameId: u,\n          elementName: l,\n          type: s,\n          paymentMethodData: c,\n          mids: t\n        }).then(Es);\n      }\n\n      return e.action.createPaymentMethodWithData({\n        elementName: null,\n        type: s,\n        paymentMethodData: c,\n        mids: t\n      }).then(Es);\n    } catch (e) {\n      return Me.reject(e);\n    }\n  },\n      Os = function Os(e) {\n    return \"https://stripe.com/docs/stripe-js/reference#stripe-\" + e.split(/(?=[A-Z])/).join(\"-\").toLowerCase();\n  },\n      ks = function ks(e, t) {\n    return Rt(is, e, \"stripe.\" + t + \" intent secret\").value;\n  },\n      As = function As(e, t) {\n    return Rt(us, t, e).value;\n  },\n      Ts = function Ts(e, t, n) {\n    if (\"valid\" === Tt(Ga, n, t).type) throw new Te(\"Do not pass an Element to stripe.\" + t + \"() directly.\\nFor more information: \" + Os(t));\n    var r = Rt(ls(e, t), n, t),\n        o = r.value,\n        i = o.source,\n        a = o.paymentMethodData,\n        s = o.paymentMethodOptions,\n        c = o.paymentMethod,\n        u = o.otherParams;\n    if (null != i && (null != a || null != c)) throw new Te(t + \": Expected either source or payment_method, but not both.\");\n    return a ? a.element ? {\n      confirmMode: {\n        tag: \"paymentMethod-from-element\",\n        type: e,\n        elementName: a.element._componentName,\n        frameId: a.element._frame.id,\n        data: a.data,\n        options: s\n      },\n      otherParams: u\n    } : {\n      confirmMode: {\n        tag: \"paymentMethod-from-data\",\n        type: e,\n        data: a.data,\n        options: s\n      },\n      otherParams: u\n    } : c ? {\n      confirmMode: {\n        tag: \"paymentMethod\",\n        paymentMethod: c,\n        options: s\n      },\n      otherParams: u\n    } : i ? {\n      confirmMode: {\n        tag: \"source\",\n        source: i\n      },\n      otherParams: u\n    } : {\n      confirmMode: {\n        tag: \"none\"\n      },\n      otherParams: u\n    };\n  },\n      Rs = function Rs(e, t) {\n    var n = {\n      skipFingerprint: !1,\n      sandboxFingerprintFrame: !1,\n      sandboxChallengeFrame: !1\n    };\n    return -1 !== e.indexOf(\"Y\") && (t.report(\"3ds2.optimization.Y\"), n.skipFingerprint = !0), -1 !== e.indexOf(\"k\") && (t.report(\"3ds2.optimization.k\"), n.sandboxFingerprintFrame = !0), -1 !== e.indexOf(\"5\") && (t.report(\"3ds2.optimization.5\"), n.sandboxChallengeFrame = !0), n;\n  },\n      Is = function Is(e) {\n    return {\n      american_express: \"amex\",\n      visa: \"visa\",\n      mastercard: \"mastercard\",\n      discover: \"discover\"\n    }[e] || \"unknown\";\n  },\n      Ns = function Ns(e, t, n) {\n    if (!e) return null;\n\n    if (\"use_stripe_sdk\" === e.type) {\n      var r = e.use_stripe_sdk;\n\n      switch (r.type) {\n        case \"stripe_3ds2_fingerprint\":\n          return {\n            type: \"3ds2-fingerprint\",\n            threeDS2Source: r.three_d_secure_2_source,\n            cardBrand: Is(r.directory_server_name),\n            transactionId: r.server_transaction_id,\n            optimizations: Rs(r.three_ds_optimizations, n),\n            methodUrl: r.three_ds_method_url\n          };\n\n        case \"stripe_3ds2_challenge\":\n          return {\n            type: \"3ds2-challenge\",\n            threeDS2Source: r.stripe_js.three_d_secure_2_source,\n            cardBrand: Is(r.stripe_js.directory_server_name),\n            transactionId: r.stripe_js.server_transaction_id,\n            optimizations: Rs(r.stripe_js.three_ds_optimizations, n),\n            acsTransactionId: r.stripe_js.acs_transaction_id,\n            acsUrl: r.stripe_js.acs_url,\n            creq: r.stripe_js.creq\n          };\n\n        case \"three_d_secure_redirect\":\n          return {\n            type: \"3ds1-modal\",\n            url: r.stripe_js,\n            source: r.source\n          };\n      }\n    }\n\n    if (\"redirect_to_url\" === e.type) return {\n      type: \"redirect\",\n      redirectUrl: e.redirect_to_url.url\n    };\n    if (\"display_oxxo_details\" === e.type) return {\n      type: \"oxxo-display\"\n    };\n\n    if (\"authorize_with_url\" === e.type) {\n      var o = e.authorize_with_url.url;\n\n      switch (t) {\n        case za.card:\n          return {\n            type: \"3ds1-modal\",\n            url: o,\n            source: null\n          };\n\n        case za.ideal:\n          return {\n            type: \"redirect\",\n            redirectUrl: o\n          };\n      }\n    }\n\n    return null;\n  },\n      Cs = function Cs(e) {\n    switch (e.type) {\n      case \"error\":\n        return {\n          error: e.error\n        };\n\n      case \"object\":\n        switch (e.object.object) {\n          case \"payment_intent\":\n            return {\n              paymentIntent: e.object\n            };\n\n          case \"setup_intent\":\n            return {\n              setupIntent: e.object\n            };\n\n          default:\n            return Re(e.object);\n        }\n\n      default:\n        return Re(e);\n    }\n  },\n      Ms = function Ms(e, t, n, r) {\n    return t === Ft.PAYMENT_INTENT ? n.action.retrievePaymentIntent({\n      hosted: !1,\n      intentSecret: e,\n      locale: r,\n      asErrorIfNotSucceeded: !0\n    }).then(Cs) : n.action.retrieveSetupIntent({\n      hosted: !1,\n      intentSecret: e,\n      locale: r,\n      asErrorIfNotSucceeded: !0\n    }).then(Cs);\n  },\n      js = function js(e, t, n, r, o) {\n    return t === Ft.PAYMENT_INTENT ? n.action.cancelPaymentIntentSource({\n      intentSecret: e,\n      locale: o,\n      sourceId: r\n    }).then(Cs) : n.action.cancelSetupIntentSource({\n      intentSecret: e,\n      locale: o,\n      sourceId: r\n    }).then(Cs);\n  },\n      Ls = function Ls(e) {\n    return (e.error ? e.error.payment_intent || e.error.setup_intent : e.paymentIntent || e.setupIntent) || null;\n  },\n      xs = function xs(e, t, n, r, o) {\n    var i = !0,\n        a = 3,\n        s = void 0;\n    return function c() {\n      Ms(e, t, n, r).then(function (e) {\n        if (i) {\n          var t = Ls(e);\n          if (null !== t) switch (a = 3, t.status) {\n            case \"requires_action\":\n            case \"requires_source_action\":\n              return void (s = setTimeout(c, 5e3));\n\n            case \"processing\":\n              return void (s = setTimeout(c, 1e3));\n\n            default:\n              o(e);\n          } else if (a > 0) {\n            var n = 500 * Math.pow(2, 3 - a);\n            s = setTimeout(c, n), a -= 1;\n          } else o(e);\n        }\n      });\n    }(), function () {\n      clearTimeout(s), i = !1;\n    };\n  },\n      Ds = function () {\n    function e(e, t) {\n      var n = [],\n          r = !0,\n          o = !1,\n          i = void 0;\n\n      try {\n        for (var a, s = e[Symbol.iterator](); !(r = (a = s.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0) {\n          ;\n        }\n      } catch (e) {\n        o = !0, i = e;\n      } finally {\n        try {\n          !r && s[\"return\"] && s[\"return\"]();\n        } finally {\n          if (o) throw i;\n        }\n      }\n\n      return n;\n    }\n\n    return function (t, n) {\n      if (Array.isArray(t)) return t;\n      if (Symbol.iterator in Object(t)) return e(t, n);\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    };\n  }(),\n      qs = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Fs = function Fs(e, t, n, r, o) {\n    return e.createLightboxFrame(Nt.AUTHORIZE_WITH_URL, qs({\n      url: t,\n      locale: o,\n      intentId: n\n    }, r ? {\n      source: r\n    } : {}));\n  },\n      Bs = function Bs(e, t, n, r, o) {\n    var i = vo(),\n        a = Date.now(),\n        s = Fs(r, e.url, t.id, e.source, o);\n    return s.show(), r.report(\"authorize_with_url.loading\", {\n      viewport: i,\n      intentId: t.id\n    }), s._on(\"load\", function () {\n      r.report(\"authorize_with_url.loaded\", {\n        loadDuration: Date.now() - a,\n        intentId: t.id\n      }), s.fadeInBackdrop();\n    }), s._on(\"challenge_complete\", function () {\n      s.fadeOutBackdrop();\n    }), new Me(function (i, c) {\n      var u = e.source;\n      u && s._once(\"cancel\", function () {\n        Me.all([js(t, n, r, u, o), s.destroy()]).then(function (e) {\n          var t = Ds(e, 1),\n              n = t[0];\n          return i(n);\n        });\n      }), s._once(\"authorize_with_url_done\", function () {\n        var e = s.destroy();\n        xs(t, n, r, o, function (n) {\n          e.then(function () {\n            r.report(\"authorize_with_url.done\", {\n              shownDuration: Date.now() - a,\n              success: !(\"error\" in n),\n              intentId: t.id\n            }), i(n);\n          });\n        });\n      });\n    });\n  },\n      Us = function () {\n    function e(e, t) {\n      var n = [],\n          r = !0,\n          o = !1,\n          i = void 0;\n\n      try {\n        for (var a, s = e[Symbol.iterator](); !(r = (a = s.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0) {\n          ;\n        }\n      } catch (e) {\n        o = !0, i = e;\n      } finally {\n        try {\n          !r && s[\"return\"] && s[\"return\"]();\n        } finally {\n          if (o) throw i;\n        }\n      }\n\n      return n;\n    }\n\n    return function (t, n) {\n      if (Array.isArray(t)) return t;\n      if (Symbol.iterator in Object(t)) return e(t, n);\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    };\n  }(),\n      Hs = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Ys = function Ys(e) {\n    return new Me(function (t) {\n      e._on(\"load\", function () {\n        return t(e);\n      });\n    });\n  },\n      Gs = function Gs(e, t, n, r) {\n    var o = e.createHiddenFrame(Nt.STRIPE_3DS2_FINGERPRINT, {\n      intentId: t,\n      locale: r,\n      hosted: n\n    });\n    e.report(\"3ds2.fingerprint_frame.loading\", {\n      hosted: n,\n      intentId: t\n    });\n    var i = Ys(o);\n    return i.then(function () {\n      e.report(\"3ds2.fingerprint_frame.loaded\", {\n        hosted: n,\n        intentId: t\n      });\n    }), i;\n  },\n      Ws = function Ws(e, t, n, r, o) {\n    var i = t.createLightboxFrame(Nt.STRIPE_3DS2_CHALLENGE, {\n      intentId: e,\n      hosted: r,\n      locale: o\n    });\n    t.report(\"3ds2.challenge_frame.loading\", {\n      intentId: e,\n      hosted: r\n    }), i._on(\"challenge_complete\", function () {\n      i.fadeOutBackdrop();\n    });\n    var a = Ys(i);\n    return a.then(function () {\n      return t.report(\"3ds2.challenge_frame.loaded\", {\n        intentId: e,\n        hosted: r\n      });\n    }), r && (i.show(), i.action.show3DS2Spinner({\n      cardBrand: n\n    })), a;\n  },\n      zs = function zs(e, t, n, r, o) {\n    return t.optimizations.skipFingerprint ? Me.resolve({\n      fingerprintAttempted: !1,\n      fingerprintData: null\n    }) : \"\" === t.methodUrl ? (n.report(\"3ds2.fingerprint.no_method_url\", {\n      hosted: r,\n      intentId: e.id\n    }), Me.resolve({\n      fingerprintAttempted: !1,\n      fingerprintData: null\n    })) : Gs(n, e.id, r, o).then(function (e) {\n      return e.action.perform3DS2Fingerprint({\n        transactionId: t.transactionId,\n        methodUrl: t.methodUrl,\n        shouldSandbox: t.optimizations.sandboxFingerprintFrame\n      }).then(function (t) {\n        return e.destroy(), t;\n      });\n    });\n  },\n      Ks = function Ks(e, t, n, r, o, i) {\n    var a = Date.now(),\n        s = Ws(e.id, r, n.cardBrand, i, o),\n        c = function c(a) {\n      return new Me(function (c) {\n        var u = xs(e, t, r, o, function (e) {\n          var t = Ls(e);\n          (t && \"requires_payment_method\" === t.status || t && \"requires_source\" === t.status) && c(e);\n        });\n        s.then(function (s) {\n          s._once(\"cancel\", function () {\n            s.fadeOutBackdrop(), u(), js(e, t, r, n.threeDS2Source, o).then(c);\n          }), i || (s.show(), s.fadeInBackdrop());\n          var l = (a.type, a.optimizations),\n              p = de(a, [\"type\", \"optimizations\"]);\n          s.action.perform3DS2Challenge(Hs({}, p, {\n            shouldSandbox: l.sandboxChallengeFrame\n          })).then(function () {\n            u(), c();\n          });\n        });\n      });\n    },\n        u = function u(t) {\n      return r.report(\"3ds2.authenticate\", {\n        hosted: i,\n        intentId: e.id\n      }), r.action.authenticate3DS2({\n        threeDS2Source: n.threeDS2Source,\n        outerWindowWidth: window.innerWidth,\n        hosted: i,\n        fingerprintResult: t\n      }).then(function (t) {\n        return \"error\" === t.type ? r.report(\"3ds2.authenticate.error\", {\n          error: t.error,\n          hosted: i,\n          intentId: e.id\n        }) : r.report(\"3ds2.authenticate.success\", {\n          hosted: i,\n          intentId: e.id\n        }), t;\n      });\n    },\n        l = function l(n) {\n      return Me.all([n ? Me.resolve(n) : Ms(e, t, r, o), s.then(function (e) {\n        return e.destroy();\n      })]).then(function (t) {\n        var n = Us(t, 1),\n            o = n[0];\n        return r.report(\"3ds2.done\", Hs({\n          intentId: e.id,\n          hosted: i,\n          totalDuration: Date.now() - a\n        }, o.error ? {\n          error: o.error,\n          success: !1\n        } : {\n          success: !0\n        })), o;\n      });\n    };\n\n    switch (n.type) {\n      case \"3ds2-challenge\":\n        return c(n).then(l);\n\n      case \"3ds2-fingerprint\":\n        return zs(e, n, r, i, o).then(u).then(function (t) {\n          if (\"error\" === t.type || null === t.object.ares) return l();\n          var o = t.object,\n              a = o.ares,\n              s = o.creq;\n          return \"C\" !== a.transStatus || null == s ? (r.report(\"3ds2.frictionless\", {\n            hosted: i,\n            intentId: e.id\n          }), l()) : c({\n            type: \"3ds2-challenge\",\n            threeDS2Source: n.threeDS2Source,\n            cardBrand: n.cardBrand,\n            transactionId: n.transactionId,\n            acsUrl: a.acsURL,\n            acsTransactionId: a.acsTransID,\n            optimizations: n.optimizations,\n            creq: s\n          }).then(l);\n        });\n\n      default:\n        return Re(n);\n    }\n  },\n      Vs = function Vs(e) {\n    return new Me(function (t, n) {\n      var r = setTimeout(function () {\n        t({\n          type: \"error\",\n          error: {\n            code: \"redirect_error\",\n            message: \"Failed to redirect to \" + e\n          },\n          locale: \"en\"\n        });\n      }, 3e3);\n      window.addEventListener(\"pagehide\", function () {\n        clearTimeout(r);\n      }), window.top.location.href = e;\n    });\n  },\n      Js = function Js(e, t, n) {\n    e.report(\"redirect_error\", {\n      initiator: t,\n      error: n.error\n    });\n  },\n      Qs = function Qs(e, t, n, r) {\n    return Vs(n).then(function (n) {\n      return Js(r, t + \" redirect\", n), $a(n, e);\n    });\n  },\n      $s = function $s(e, t, n, r) {\n    return Vs(n).then(function (e) {\n      return Js(r, t + \" redirect\", e), Xa(e);\n    });\n  },\n      Xs = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      Zs = function Zs(e) {\n    switch (e.type) {\n      case \"error\":\n        var t = e.error;\n\n        if (\"payment_intent_unexpected_state\" === t.code && \"object\" === Xs(t.payment_intent) && null != t.payment_intent && \"string\" == typeof t.payment_intent.status && ts(t.payment_intent.status)) {\n          var n = t.payment_intent;\n          return {\n            type: \"object\",\n            locale: e.locale,\n            object: n\n          };\n        }\n\n        return e;\n\n      case \"object\":\n        return e;\n\n      default:\n        return Re(e);\n    }\n  },\n      ec = function ec(e, t, n, r, o) {\n    var i = Ns(ns(t), n, e),\n        a = es(t);\n    if (!i) return Me.resolve({\n      paymentIntent: t\n    });\n\n    switch (i.type) {\n      case \"3ds1-modal\":\n        return Bs(i, a, Ft.PAYMENT_INTENT, e, r);\n\n      case \"3ds2-fingerprint\":\n      case \"3ds2-challenge\":\n        return Ks(a, Ft.PAYMENT_INTENT, i, e, r, o);\n\n      case \"redirect\":\n        return Qs(t, n, i.redirectUrl, e);\n\n      case \"oxxo-display\":\n        throw new Te(\"Expected option `handleActions` to be `false`. The OXXO private beta does not handle the next actions for you automatically (e.g. display OXXO details). Please refer to the Stripe OXXO integration guide for more info: \\n\\nhttps://stripe.com/docs/payments/oxxo\");\n\n      default:\n        return Me.resolve({\n          paymentIntent: t\n        });\n    }\n  },\n      tc = function tc(e, t, n, r, o) {\n    return ec(e, t, n, r, o).then(function (e) {\n      if (e.setupIntent) throw new Error(\"Got unexpected SetupIntent response\");\n      return e;\n    });\n  },\n      nc = function nc(e, t, n, r) {\n    return function (o) {\n      var i = Zs(o);\n\n      switch (i.type) {\n        case \"error\":\n          var a = i.error,\n              s = a.payment_intent;\n          return n && s && \"payment_intent_unexpected_state\" === a.code && (\"succeeded\" === s.status || \"requires_capture\" === s.status) ? Me.resolve({\n            paymentIntent: s\n          }) : Me.resolve($a(o));\n\n        case \"object\":\n          var c = i.object;\n          return tc(e, c, t, i.locale, r);\n\n        default:\n          return Re(i);\n      }\n    };\n  },\n      rc = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      oc = function oc(e, t) {\n    return function (n, r, o, i, a) {\n      var s = ks(o, e),\n          c = Ts(t, e, i),\n          u = As(e, a),\n          l = \"none\" === c.confirmMode.tag,\n          p = n.action.confirmPaymentIntent(rc({}, c, {\n        intentSecret: s,\n        expectedType: t,\n        options: u,\n        mids: r\n      }));\n      return u.handleActions ? p.then(nc(n, t, l, !1)) : p.then($a);\n    };\n  },\n      ic = oc(\"confirmAcssDebitPayment\", za.acss_debit),\n      ac = oc(\"confirmAuBecsDebitPayment\", za.au_becs_debit),\n      sc = oc(\"confirmBancontactPayment\", za.bancontact),\n      cc = oc(\"confirmCardPayment\", za.card),\n      uc = oc(\"confirmBacsDebitPayment\", za.bacs_debit),\n      lc = oc(\"confirmFpxPayment\", za.fpx),\n      pc = oc(\"confirmEpsPayment\", za.eps),\n      dc = oc(\"confirmGiropayPayment\", za.giropay),\n      fc = oc(\"confirmGrabPayPayment\", za.grabpay),\n      hc = oc(\"confirmIdealPayment\", za.ideal),\n      _c = oc(\"confirmOxxoPayment\", za.oxxo),\n      mc = oc(\"confirmAlipayPayment\", za.alipay),\n      yc = oc(\"confirmP24Payment\", za.p24),\n      vc = oc(\"confirmSepaDebitPayment\", za.sepa_debit),\n      bc = oc(\"confirmSofortPayment\", za.sofort),\n      gc = function gc(e, t) {\n    var n = ks(e, \"retrievePaymentIntent\");\n    return t.action.retrievePaymentIntent({\n      intentSecret: n,\n      hosted: !1\n    }).then($a);\n  },\n      Ec = function Ec(e, t, n) {\n    var r = ks(t, \"verifyMicrodepositsForSetup\"),\n        o = Rt(gt, n, \"stripe.verifyMicrodepositsForSetup\");\n    return e.action.verifyMicrodepositsForPayment({\n      intentSecret: r,\n      data: o.value\n    }).then($a);\n  },\n      wc = function wc(e, t) {\n    var n = ks(e, \"handleHosted3DS2Setup [internal]\");\n    return t.action.retrievePaymentIntent({\n      intentSecret: n,\n      hosted: !0\n    }).then(nc(t, za.card, !1, !0));\n  },\n      Sc = function Sc(e, t) {\n    var n = ks(e, \"handleCardAction\");\n    return t.action.retrievePaymentIntent({\n      intentSecret: n,\n      hosted: !1\n    }).then(function (e) {\n      var n = Zs(e);\n\n      switch (n.type) {\n        case \"error\":\n          return Me.resolve($a(e));\n\n        case \"object\":\n          var r = n.object;\n\n          if (ts(r.status)) {\n            if (\"manual\" !== r.confirmation_method) throw new Te(\"handleCardAction: The PaymentIntent supplied does not require manual server-side confirmation. Please use confirmCardPayment instead to complete the payment.\");\n            return tc(t, r, za.card, n.locale, !1);\n          }\n\n          throw new Te(\"handleCardAction: The PaymentIntent supplied is not in the requires_action state.\");\n\n        default:\n          return Re(n);\n      }\n    });\n  },\n      Pc = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Oc = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      kc = function kc(e, t) {\n    if (null == e) return et(null);\n    var n = e.type,\n        r = fe(e, [\"type\"]),\n        o = ft(dt, function () {\n      return null;\n    })(n, At(t, \"type\"));\n    return \"error\" === o.type ? o : et({\n      type: o.value,\n      data: r\n    });\n  },\n      Ac = function Ac(e, t, n, r) {\n    if (null === e) {\n      if (null === t) {\n        throw new Te(n + \": you must additionally specify the type of payment method to create within \" + (r ? \"source_data\" : \"payment_method_data\") + \".\");\n      }\n\n      return t;\n    }\n\n    if (null === t) return e;\n    if (t !== e) throw new Te(n + \": you specified `type: \" + t + \"`, but \" + n + \" will create a \" + e + \" payment method.\");\n    return e;\n  },\n      Tc = function Tc(e) {\n    return function (t, n) {\n      if (\"object\" === (void 0 === t ? \"undefined\" : Oc(t)) && null !== t) {\n        var r = t.source,\n            o = t.source_data,\n            i = t.payment_method,\n            a = t.payment_method_data,\n            s = fe(t, [\"source\", \"source_data\", \"payment_method\", \"payment_method_data\"]);\n        if (null != r && \"string\" != typeof r) return nt(\"string\", void 0 === r ? \"undefined\" : Oc(r), At(n, \"source\"));\n        if (null != i && \"string\" != typeof i) return nt(\"string\", void 0 === i ? \"undefined\" : Oc(i), At(n, \"payment_method\"));\n        if (null != o && \"object\" !== (void 0 === o ? \"undefined\" : Oc(o))) return nt(\"object\", void 0 === o ? \"undefined\" : Oc(o), At(n, \"source_data\"));\n        if (null != a && \"object\" !== (void 0 === a ? \"undefined\" : Oc(a))) return nt(\"object\", void 0 === a ? \"undefined\" : Oc(a), At(n, \"payment_method_data\"));\n        var c = kc(o, At(n, \"source_data\"));\n        if (\"error\" === c.type) return c;\n        var u = c.value,\n            l = kc(a, At(n, \"payment_method_data\"));\n        if (\"error\" === l.type) return l;\n        var p = l.value;\n        return et({\n          sourceData: u,\n          source: null == r ? null : r,\n          paymentMethodData: p,\n          paymentMethod: null == i ? null : i,\n          otherParams: Pc({}, e, s)\n        });\n      }\n\n      return null === t ? nt(\"object\", \"null\", n) : nt(\"object\", void 0 === t ? \"undefined\" : Oc(t), n);\n    };\n  },\n      Rc = function Rc(e) {\n    return function (t, n) {\n      if (void 0 === t) return et({\n        sourceData: null,\n        paymentMethodData: null,\n        source: null,\n        paymentMethod: null,\n        otherParams: {}\n      });\n      if (\"object\" !== (void 0 === t ? \"undefined\" : Oc(t))) return nt(\"object\", void 0 === t ? \"undefined\" : Oc(t), n);\n      if (null === t) return nt(\"object\", \"null\", n);\n\n      if (e) {\n        if (!t.payment_intent) return et({\n          sourceData: null,\n          paymentMethodData: null,\n          source: null,\n          paymentMethod: null,\n          otherParams: t\n        });\n        var r = t.payment_intent,\n            o = fe(t, [\"payment_intent\"]);\n        return Tc(o)(r, At(n, \"payment_intent\"));\n      }\n\n      return t.payment_intent ? tt(new Te(\"The payment_intent parameter has been removed. To fix, move everything nested under the payment_intent parameter to the top-level object.\")) : Tc({})(t, n);\n    };\n  },\n      Ic = function Ic(e, t, n, r, o, i) {\n    var a = Tt(Ga, o, r);\n    if (\"error\" === a.type) return null;\n    var s = a.value,\n        c = Rt(Rc(t), i, r),\n        u = c.value,\n        l = u.sourceData,\n        p = u.source,\n        d = u.paymentMethodData,\n        f = u.paymentMethod,\n        h = u.otherParams;\n    if (!e && l) throw new Te(r + \": Expected payment_method_data, not source_data.\");\n    if (null != p) throw new Te(\"When calling \" + r + \" on an Element, you can't pass in a pre-existing source ID, as a source will be created using the Element.\");\n    if (null != f) throw new Te(\"When calling \" + r + \" on an Element, you can't pass in a pre-existing PaymentMethod ID, as a PaymentMethod will be created using the Element.\");\n    var _ = s._componentName,\n        m = s._frame.id,\n        y = l || d || {\n      type: null,\n      data: {}\n    },\n        v = y.type,\n        b = y.data,\n        g = Ja(_, v),\n        E = e && !d,\n        w = Ac(n, g, r, E),\n        S = {\n      elementName: _,\n      frameId: m,\n      type: w,\n      data: b\n    };\n    return E ? {\n      confirmMode: Pc({\n        tag: \"source-from-element\"\n      }, S),\n      otherParams: h\n    } : {\n      confirmMode: Pc({\n        tag: \"paymentMethod-from-element\",\n        options: null\n      }, S),\n      otherParams: h\n    };\n  },\n      Nc = function Nc(e, t, n, r, o, i) {\n    var a = Rt(Rc(t), o, r),\n        s = a.value,\n        c = s.sourceData,\n        u = s.source,\n        l = s.paymentMethodData,\n        p = s.paymentMethod,\n        d = s.otherParams;\n    if (!e && c) throw new Te(r + \": Expected payment_method, source, or payment_method_data, not source_data.\");\n    if (null !== u && null !== c) throw new Te(r + \": Expected either source or source_data, but not both.\");\n    if (null !== p && null !== l) throw new Te(r + \": Expected either payment_method or payment_method_data, but not both.\");\n    if (null !== p && null !== u) throw new Te(r + \": Expected either payment_method or source, but not both.\");\n\n    if (c || l) {\n      var f = c || l || {},\n          h = f.type,\n          _ = f.data,\n          m = e && !l,\n          y = Ac(n, h, r, m);\n      return m ? {\n        confirmMode: {\n          tag: \"source-from-data\",\n          type: y,\n          data: _\n        },\n        otherParams: d\n      } : {\n        confirmMode: {\n          tag: \"paymentMethod-from-data\",\n          type: y,\n          data: _,\n          options: null\n        },\n        otherParams: d\n      };\n    }\n\n    return null !== u ? {\n      confirmMode: {\n        tag: \"source\",\n        source: u\n      },\n      otherParams: d\n    } : null !== p ? {\n      confirmMode: {\n        tag: \"paymentMethod\",\n        paymentMethod: p,\n        options: null\n      },\n      otherParams: d\n    } : {\n      confirmMode: {\n        tag: \"none\"\n      },\n      otherParams: d\n    };\n  },\n      Cc = function Cc(e, t, n, r) {\n    return function (o, i) {\n      var a = Ic(e, t, n, r, o, i);\n      if (a) return a;\n      var s = Nc(e, t, n, r, o);\n      if (s) return s;\n      throw new Te(\"Expected: stripe.\" + r + \"(intentSecret, element[, data]) or stripe.\" + r + \"(intentSecret[, data]). Please see the docs for more usage examples https://stripe.com/docs/payments/dynamic-authentication\");\n    };\n  },\n      Mc = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      jc = function jc(e, t, n, r, o, i) {\n    var a = Rt(is, r, \"stripe.confirmPaymentIntent intent secret\"),\n        s = a.value,\n        c = Cc(e, !1, null, \"confirmPaymentIntent\")(o, i);\n    return t.action.confirmPaymentIntent(Mc({}, c, {\n      intentSecret: s,\n      expectedType: null,\n      options: {\n        handleActions: !1\n      },\n      mids: n\n    })).then($a);\n  },\n      Lc = function Lc(e, t, n, r, o, i, a) {\n    var s = Rt(is, o, \"stripe.handleCardPayment intent secret\"),\n        c = s.value,\n        u = za.card,\n        l = Cc(e, r, u, \"handleCardPayment\")(i, a),\n        p = !i && !a;\n    return t.action.confirmPaymentIntent(Mc({}, l, {\n      intentSecret: c,\n      expectedType: u,\n      options: {\n        handleActions: !0\n      },\n      mids: n\n    })).then(nc(t, u, p, !1));\n  },\n      xc = function xc(e, t, n, r, o, i) {\n    var a = Rt(is, r, \"stripe.handleSepaDebitPayment intent secret\"),\n        s = a.value,\n        c = za.sepa_debit,\n        u = Cc(!1, n, c, \"handleSepaDebitPayment\")(o, i),\n        l = !o && !i;\n    return e.action.confirmPaymentIntent(Mc({}, u, {\n      intentSecret: s,\n      expectedType: c,\n      options: {\n        handleActions: !0\n      },\n      mids: t\n    })).then(nc(e, c, l, !1));\n  },\n      Dc = function Dc(e, t, n, r, o, i, a) {\n    var s = Rt(is, o, \"stripe.handleIdealPayment intent secret\"),\n        c = s.value,\n        u = za.ideal,\n        l = Cc(e, r, u, \"handleIdealPayment\")(i, a),\n        p = !i && !a;\n    return t.action.confirmPaymentIntent(Mc({}, l, {\n      intentSecret: c,\n      expectedType: u,\n      options: {\n        handleActions: !0\n      },\n      mids: n\n    })).then(nc(t, u, p, !1));\n  },\n      qc = function qc(e, t, n, r, o, i) {\n    var a = Rt(is, r, \"stripe.handleFpxPayment intent secret\"),\n        s = a.value,\n        c = za.fpx,\n        u = Cc(!1, n, c, \"handleFpxPayment\")(o, i),\n        l = !o && !i;\n    return e.action.confirmPaymentIntent(Mc({}, u, {\n      intentSecret: s,\n      expectedType: c,\n      options: {\n        handleActions: !0\n      },\n      mids: t\n    })).then(nc(e, c, l, !1));\n  },\n      Fc = function Fc(e, t, n, r, o) {\n    var i = Ns(ns(t), n, e),\n        a = es(t);\n    if (!i) return Me.resolve({\n      setupIntent: t\n    });\n\n    switch (i.type) {\n      case \"3ds1-modal\":\n        return Bs(i, a, Ft.SETUP_INTENT, e, r);\n\n      case \"3ds2-fingerprint\":\n      case \"3ds2-challenge\":\n        return Ks(a, Ft.SETUP_INTENT, i, e, r, o);\n\n      case \"redirect\":\n        return $s(0, n, i.redirectUrl, e);\n\n      default:\n        return Me.resolve({\n          setupIntent: t\n        });\n    }\n  },\n      Bc = function Bc(e, t, n, r, o) {\n    return Fc(e, t, n, r, o).then(function (e) {\n      if (e.paymentIntent) throw new Error(\"Got unexpected PaymentIntent response\");\n      return e;\n    });\n  },\n      Uc = function Uc(e, t, n, r) {\n    return function (o) {\n      switch (o.type) {\n        case \"error\":\n          var i = o.error,\n              a = i.setup_intent;\n          return n && a && \"succeeded\" === a.status ? Me.resolve({\n            setupIntent: a\n          }) : Me.resolve({\n            error: i\n          });\n\n        case \"object\":\n          var s = o.object;\n          return Bc(e, s, t, o.locale, r);\n\n        default:\n          return Re(o);\n      }\n    };\n  },\n      Hc = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Yc = function Yc(e, t) {\n    return function (n, r, o, i, a) {\n      var s = ks(o, e),\n          c = Ts(t, e, i),\n          u = As(e, a),\n          l = \"none\" === c.confirmMode.tag,\n          p = n.action.confirmSetupIntent(Hc({}, c, {\n        intentSecret: s,\n        expectedType: t,\n        options: u,\n        mids: r\n      }));\n      return u.handleActions ? p.then(Uc(n, t, l, !1)) : p.then(Xa);\n    };\n  },\n      Gc = Yc(\"confirmAcssDebitSetup\", za.acss_debit),\n      Wc = Yc(\"confirmCardSetup\", za.card),\n      zc = Yc(\"confirmSepaDebitSetup\", za.sepa_debit),\n      Kc = Yc(\"confirmAuBecsDebitSetup\", za.au_becs_debit),\n      Vc = Yc(\"confirmBacsDebitSetup\", za.bacs_debit),\n      Jc = Yc(\"confirmIdealSetup\", za.ideal),\n      Qc = function Qc(e, t) {\n    var n = ks(e, \"retrieveSetupIntent\");\n    return t.action.retrieveSetupIntent({\n      intentSecret: n,\n      hosted: !1\n    }).then(Xa);\n  },\n      $c = function $c(e, t, n) {\n    var r = ks(t, \"verifyMicrodepositsForSetup\"),\n        o = Rt(gt, n, \"stripe.verifyMicrodepositsForSetup\");\n    return e.action.verifyMicrodepositsForSetup({\n      intentSecret: r,\n      data: o.value\n    }).then(Xa);\n  },\n      Xc = function Xc(e, t) {\n    var n = ks(e, \"handleHosted3DS2Setup [internal]\");\n    return t.action.retrieveSetupIntent({\n      intentSecret: n,\n      hosted: !0\n    }).then(Uc(t, za.card, !1, !0));\n  },\n      Zc = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      eu = function eu(e, t, n, r, o) {\n    var i = Rt(is, n, \"stripe.handleCardSetup intent secret\"),\n        a = i.value,\n        s = za.card,\n        c = Cc(!1, !1, s, \"handleCardSetup\")(r, o),\n        u = !r && !o;\n    return e.action.confirmSetupIntent(Zc({}, c, {\n      intentSecret: a,\n      expectedType: s,\n      options: {\n        handleActions: !0\n      },\n      mids: t\n    })).then(Uc(e, s, u, !1));\n  },\n      tu = function tu(e, t, n, r, o) {\n    var i = Rt(is, n, \"stripe.handleSepaDebitSetup intent secret\"),\n        a = i.value,\n        s = za.sepa_debit,\n        c = Cc(!1, !1, s, \"handleSepaDebitSetup\")(r, o),\n        u = !r && !o;\n    return e.action.confirmSetupIntent(Zc({}, c, {\n      intentSecret: a,\n      expectedType: s,\n      options: {\n        handleActions: !0\n      },\n      mids: t\n    })).then(Uc(e, s, u, !1));\n  },\n      nu = function nu(e, t, n, r, o) {\n    var i = Rt(is, n, \"stripe.confirmSetupIntent intent secret\"),\n        a = i.value,\n        s = Cc(!1, !1, null, \"confirmSetupIntent\")(r, o);\n    return e.action.confirmSetupIntent(Zc({}, s, {\n      otherParams: Zc({}, s.otherParams),\n      intentSecret: a,\n      expectedType: null,\n      options: {\n        handleActions: !1\n      },\n      mids: t\n    })).then(Xa);\n  },\n      ru = [go.checkout_beta_2, go.checkout_beta_3, go.checkout_beta_4],\n      ou = [go.checkout_beta_2, go.checkout_beta_3, go.checkout_beta_4, go.checkout_beta_locales, go.checkout_beta_testcards],\n      iu = {\n    bg: \"bg\",\n    cs: \"cs\",\n    da: \"da\",\n    de: \"de\",\n    el: \"el\",\n    en: \"en\",\n    es: \"es\",\n    et: \"et\",\n    fi: \"fi\",\n    fr: \"fr\",\n    hu: \"hu\",\n    it: \"it\",\n    ja: \"ja\",\n    lt: \"lt\",\n    lv: \"lv\",\n    ms: \"ms\",\n    mt: \"mt\",\n    nb: \"nb\",\n    nl: \"nl\",\n    pl: \"pl\",\n    pt: \"pt\",\n    \"pt-BR\": \"pt-BR\",\n    ro: \"ro\",\n    ru: \"ru\",\n    sk: \"sk\",\n    sl: \"sl\",\n    sv: \"sv\",\n    tr: \"tr\",\n    zh: \"zh\"\n  },\n      au = {\n    id: \"id\",\n    th: \"th\"\n  },\n      su = Object.keys(iu),\n      cu = Object.keys(au),\n      uu = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      lu = {\n    sku: ot(dt),\n    plan: ot(dt),\n    clientReferenceId: ot(dt),\n    locale: ot(ct.apply(void 0, [\"auto\"].concat(_e(su)))),\n    customerEmail: ot(dt),\n    billingAddressCollection: ot(ct(\"required\", \"auto\")),\n    submitType: ot(ct(\"auto\", \"pay\", \"book\", \"donate\")),\n    allowIncompleteSubscriptions: ot(ht),\n    shippingAddressCollection: ot(Ot({\n      allowedCountries: Et(dt)\n    }))\n  },\n      pu = function pu(e, t, n) {\n    if (e && t || (e || t) && n) throw new Te(\"stripe.redirectToCheckout: Expected only one of sku, plan, or items.\");\n    if (\"string\" == typeof e) return [{\n      sku: e,\n      quantity: 1\n    }];\n    if (\"string\" == typeof t) return [{\n      plan: t,\n      quantity: 1\n    }];\n    if (n) return n.map(function (e) {\n      return \"sku\" === e.type ? {\n        sku: e.id,\n        quantity: e.quantity\n      } : {\n        plan: e.id,\n        quantity: e.quantity\n      };\n    });\n    throw new Te(\"stripe.redirectToCheckout: You must provide either sku, plan, or items.\");\n  },\n      du = function du(e, t) {\n    var n = Ot(uu({}, lu, {\n      items: ot(it(Et(Ot({\n        type: ct(\"plan\"),\n        quantity: mt(0),\n        id: dt\n      })), Et(Ot({\n        type: ct(\"sku\"),\n        quantity: mt(0),\n        id: dt\n      })))),\n      successUrl: dt,\n      cancelUrl: dt\n    })),\n        r = Rt(n, t, \"stripe.redirectToCheckout\"),\n        o = r.value,\n        i = o.sku,\n        a = o.plan,\n        s = o.items,\n        c = he(o, [\"sku\", \"plan\", \"items\"]),\n        u = pu(i, a, s);\n    return uu({\n      tag: \"no-session\",\n      items: u\n    }, c);\n  },\n      fu = function fu(e, t, n) {\n    var r = Ot(uu({}, lu, {\n      sessionId: ot(dt),\n      successUrl: ot(dt),\n      cancelUrl: ot(dt),\n      mode: ot(ct(\"subscription\", \"payment\")),\n      items: ot(it(Et(Ot({\n        quantity: mt(0),\n        plan: dt\n      })), Et(Ot({\n        quantity: mt(0),\n        sku: dt\n      })))),\n      lineItems: ot(Et(Ot({\n        quantity: mt(0),\n        price: dt\n      })))\n    }, -1 !== e.indexOf(\"checkout_beta_locales\") ? {\n      locale: ot(ct.apply(void 0, [\"auto\"].concat(_e(su), _e(cu))))\n    } : {})),\n        o = Rt(r, t, \"stripe.redirectToCheckout\"),\n        i = o.value;\n\n    if (i.sessionId) {\n      var a = i.sessionId;\n      if (Object.keys(i).length > 1) throw new Te(\"stripe.redirectToCheckout: Do not provide other parameters when providing sessionId. Specify all parameters on your server when creating the CheckoutSession.\");\n      if (!/^cs_/.test(a)) throw new Te(\"stripe.redirectToCheckout: Invalid value for sessionId. You specified '\" + a + \"'.\");\n      if (\"livemode\" === n && /^cs_test_/.test(a)) throw new Te(\"stripe.redirectToCheckout: the provided sessionId is for a test mode Checkout Session, whereas Stripe.js was initialized with a live mode publishable key.\");\n      if (\"testmode\" === n && /^cs_live_/.test(a)) throw new Te(\"stripe.redirectToCheckout: the provided sessionId is for a live mode Checkout Session, whereas Stripe.js was initialized with a test mode publishable key.\");\n      return {\n        tag: \"session\",\n        sessionId: a\n      };\n    }\n\n    var s = (i.sessionId, i.sku, i.plan, i.items),\n        c = i.lineItems,\n        u = i.successUrl,\n        l = i.cancelUrl,\n        p = i.mode,\n        d = he(i, [\"sessionId\", \"sku\", \"plan\", \"items\", \"lineItems\", \"successUrl\", \"cancelUrl\", \"mode\"]);\n    if (!c && !s) throw new Te(\"stripe.redirectToCheckout: You must provide one of lineItems, items, or sessionId.\");\n    if (!u || !l) throw new Te(\"stripe.redirectToCheckout: You must provide successUrl and cancelUrl.\");\n    return uu({\n      tag: \"no-session\",\n      items: s,\n      lineItems: c,\n      successUrl: u,\n      cancelUrl: l,\n      mode: p\n    }, d);\n  },\n      hu = function hu(e, t, n) {\n    var r = fu(e, t, n);\n\n    if (\"no-session\" === r.tag) {\n      var o = r.successUrl,\n          i = r.cancelUrl;\n      if (!Ve(o)) throw new Te(\"stripe.redirectToCheckout: successUrl must start with either http:// or https://.\");\n      if (!Ve(i)) throw new Te(\"stripe.redirectToCheckout: cancelUrl must start with either http:// or https://.\");\n      return r;\n    }\n\n    return r;\n  },\n      _u = function _u(e, t) {\n    return \"session\" === t.tag || null == e || t.locale || -1 === [\"auto\"].concat(_e(su)).indexOf(e) ? t : uu({}, t, {\n      locale: e\n    });\n  },\n      mu = function mu(e, t, n) {\n    var r = Le(ru, function (t) {\n      return wo(e, t);\n    });\n    if (t && t.lineItems && r) throw new Te(\"Prices cannot be used with \" + r);\n\n    switch (r) {\n      case \"checkout_beta_2\":\n        return du(0, t);\n\n      case \"checkout_beta_3\":\n        return fu(e, t, n);\n\n      case \"checkout_beta_4\":\n      default:\n        return hu(e, t, n);\n    }\n  },\n      yu = function yu(e, t, n) {\n    var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"unknown\";\n    return _u(t, mu(e, n, r));\n  },\n      vu = yu,\n      bu = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      gu = function gu(e, t) {\n    var n = function n(t) {\n      return Js(e, \"redirectToCheckout\", t), {\n        error: t.error\n      };\n    };\n\n    return Vs(t).then(n);\n  },\n      Eu = function Eu(e, t, n, r) {\n    return function (o) {\n      e.report(\"redirect_to_checkout.options\", {\n        betas: t,\n        options: o,\n        globalLocale: r\n      });\n      var i = vu(t, r, o, e.livemode());\n\n      if (\"session\" === i.tag) {\n        var a = i,\n            s = a.sessionId;\n        return e.action.createPaymentPageWithSession({\n          betas: t,\n          mids: n(),\n          sessionId: s\n        }).then(function (t) {\n          if (\"error\" === t.type) return {\n            error: t.error\n          };\n          var n = t.object.url;\n          return gu(e, n);\n        });\n      }\n\n      var c = i,\n          u = (c.tag, c.items),\n          l = c.lineItems,\n          p = c.mode,\n          d = c.successUrl,\n          f = c.cancelUrl,\n          h = c.clientReferenceId,\n          _ = c.customerEmail,\n          m = c.billingAddressCollection,\n          y = c.submitType,\n          v = c.allowIncompleteSubscriptions,\n          b = c.shippingAddressCollection,\n          g = me(c, [\"tag\", \"items\", \"lineItems\", \"mode\", \"successUrl\", \"cancelUrl\", \"clientReferenceId\", \"customerEmail\", \"billingAddressCollection\", \"submitType\", \"allowIncompleteSubscriptions\", \"shippingAddressCollection\"]),\n          E = [];\n      if (l && u) throw new Error(\"Only one of items, lineItems can be passed in.\");\n\n      if (l) {\n        if (!p) throw new Error(\"Expected `mode`\");\n        E = l.map(function (e) {\n          if (e.price) return {\n            type: \"price\",\n            id: e.price,\n            quantity: e.quantity\n          };\n          throw new Error(\"Unexpected item shape.\");\n        });\n      } else {\n        if (!u) throw new Error(\"An items field must be passed in.\");\n        E = u.map(function (e) {\n          if (e.sku) return {\n            type: \"sku\",\n            id: e.sku,\n            quantity: e.quantity\n          };\n          if (e.plan) return {\n            type: \"plan\",\n            id: e.plan,\n            quantity: e.quantity\n          };\n          throw new Error(\"Unexpected item shape.\");\n        });\n      }\n\n      var w = Le(ru, function (e) {\n        return wo(t, e);\n      });\n      return e.action.createPaymentPage(bu({\n        betas: t,\n        mids: n(),\n        items: E,\n        mode: p,\n        success_url: d,\n        cancel_url: f,\n        client_reference_id: h,\n        customer_email: _,\n        billing_address_collection: m,\n        submit_type: y,\n        use_payment_methods: !w,\n        allow_incomplete_subscriptions: v,\n        shipping_address_collection: b && {\n          allowed_countries: b.allowedCountries\n        }\n      }, g)).then(function (t) {\n        if (\"error\" === t.type) return {\n          error: t.error\n        };\n        var n = t.object.url;\n        return gu(e, n);\n      });\n    };\n  },\n      wu = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      Su = function Su(e) {\n    switch (e.type) {\n      case \"object\":\n        return {\n          token: e.object\n        };\n\n      case \"error\":\n        return {\n          error: e.error\n        };\n\n      default:\n        return Re(e);\n    }\n  },\n      Pu = function Pu(e) {\n    return \"object\" === (void 0 === e ? \"undefined\" : wu(e)) && null !== e ? e : {};\n  },\n      Ou = function Ou(e, t, n) {\n    var r = Wa(t);\n\n    if (r && \"cardCvc\" === r._componentName) {\n      var o = r._frame.id;\n      return e.action.tokenizeCvcUpdate({\n        frameId: o,\n        mids: n\n      }).then(Su);\n    }\n\n    throw new Te(\"You must provide a `cardCvc` Element to create a `cvc_update` token.\");\n  },\n      ku = function ku(e, t) {\n    return function (n, r) {\n      var o = Wa(n);\n\n      if (o) {\n        var i = o._frame.id,\n            a = o._componentName,\n            s = Pu(r);\n        return e.action.tokenizeWithElement({\n          frameId: i,\n          elementName: a,\n          tokenData: s,\n          mids: t\n        }).then(Su);\n      }\n\n      if (\"string\" == typeof n) {\n        var c = n,\n            u = Pu(r);\n        return e.action.tokenizeWithData({\n          elementName: null,\n          type: c,\n          tokenData: u,\n          mids: t\n        }).then(Su);\n      }\n\n      throw new Te(\"You must provide a Stripe Element or a valid token type to create a Token.\");\n    };\n  },\n      Au = function Au(e) {\n    switch (e.type) {\n      case \"object\":\n        return {\n          radarSession: e.object\n        };\n\n      case \"error\":\n        return {\n          error: e.error\n        };\n\n      default:\n        return Re(e);\n    }\n  },\n      Tu = function Tu(e, t) {\n    return e.action.createRadarSession({\n      mids: t\n    }).then(Au);\n  },\n      Ru = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Iu = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    return function (t, n, r) {\n      return n && e(t.prototype, n), r && e(t, r), t;\n    };\n  }(),\n      Nu = function () {\n    return window.performance && window.performance.now ? window.performance.now() : Date.now();\n  }(),\n      Cu = kt({\n    apiKey: dt,\n    stripeAccount: ot(dt),\n    locale: ot(dt),\n    apiVersion: ot(dt),\n    __privateApiUrl: ot(dt),\n    __checkout: ot(kt({\n      mids: kt({\n        muid: dt,\n        sid: dt\n      })\n    })),\n    __hosted3DS: ot(ht),\n    canCreateRadarSession: ot(ht),\n    betas: ot(Et(ut.apply(void 0, ve(Eo))))\n  }),\n      Mu = function Mu(e) {\n    return \"You have an in-flight \" + e + \"! Please be sure to disable your form submit button when \" + e + \" is called.\";\n  },\n      ju = function ju(e) {\n    return function () {\n      throw new Te(\"You cannot call `stripe.\" + e + \"` without supplying a PaymentIntents beta flag when initializing Stripe.js.    You can find more information including code snippets at https://www.stripe.com/docs/payments/payment-intents/quickstart.\");\n    };\n  },\n      Lu = function () {\n    function e(t, n) {\n      var r = this;\n      ye(this, e), xu.call(this);\n      var o = Rt(Cu, t || {}, \"Stripe()\"),\n          i = o.value,\n          a = o.warnings,\n          s = i.apiKey,\n          c = i.stripeAccount,\n          u = i.apiVersion,\n          l = i.locale,\n          p = i.__privateApiUrl,\n          d = i.__checkout,\n          f = i.__hosted3DS,\n          h = i.canCreateRadarSession,\n          _ = i.betas;\n      if (\"\" === s) throw new Te(\"Please call Stripe() with your publishable key. You used an empty string.\");\n      if (0 === s.indexOf(\"sk_\")) throw new Te(\"You should not use your secret key with Stripe.js.\\n        Please pass a publishable key instead.\");\n      d && d.mids && (e._ec = Vr({\n        checkoutIds: d.mids\n      })), this._apiKey = s.trim(), this._keyMode = We(this._apiKey), this._betas = _ || [], this._locale = _a(l, this._betas) || null, this._stripeAccount = c || null, this._isCheckout = !!d, this._controller = new yo(Ru({\n        apiKey: this._apiKey,\n        apiVersion: u,\n        __privateApiUrl: p,\n        stripeAccount: c,\n        betas: this._betas,\n        stripeJsId: e.stripeJsId,\n        startTime: Nu,\n        listenerRegistry: this._listenerRegistry\n      }, this._locale ? {\n        locale: this._locale\n      } : {})), a.forEach(function (e) {\n        return r._controller.warn(e);\n      }), this._ensureHTTPS(), this._ensureStripeHosted(n), this._attachPaymentIntentMethods(this._betas, !!f), this._attachLegacyPaymentIntentMethods(this._betas), this._attachCheckoutMethods(this._betas), this._attachPrivateMethodsForCheckout(this._isCheckout), this._attachCreateRadarSession(h || !1), this._attachGetters();\n    }\n\n    return Iu(e, [{\n      key: \"_attachCreateRadarSession\",\n      value: function value(e) {\n        var t = this;\n        e && (this.createRadarSession = dn(function () {\n          var e = t._mids();\n\n          return Tu(t._controller, e);\n        }));\n      }\n    }, {\n      key: \"_attachPaymentIntentMethods\",\n      value: function value(e, t) {\n        var n = this,\n            r = function r() {\n          return n._mids();\n        };\n\n        this.createPaymentMethod = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return Ps.apply(void 0, [n._controller, r()].concat(t));\n        }), this._createPaymentMethod = this.createPaymentMethod, this.retrievePaymentIntent = fn(function (e) {\n          return gc(e, n._controller);\n        }), this.retrieveSetupIntent = fn(function (e) {\n          return Qc(e, n._controller);\n        });\n        var o = xn(Sc, Mu(\"handleCardAction\"));\n        this.handleCardAction = fn(function (e) {\n          return o(e, n._controller);\n        });\n        var i = xn(cc, Mu(\"confirmCardPayment\"));\n        this.confirmCardPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return i.apply(void 0, [n._controller, r()].concat(t));\n        });\n        var a = xn(Wc, Mu(\"confirmCardSetup\"));\n        this.confirmCardSetup = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return a.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmIdealPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return hc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmSepaDebitPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return vc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmSepaDebitSetup = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return zc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmFpxPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return lc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmAuBecsDebitPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return ac.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmAuBecsDebitSetup = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return Kc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmBacsDebitPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return uc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmBacsDebitSetup = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return Vc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmBancontactPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return sc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmEpsPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return pc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmGiropayPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return dc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmP24Payment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return yc.apply(void 0, [n._controller, r()].concat(t));\n        }), wo(this._betas, go.acss_debit_beta_1) && (this.confirmAcssDebitPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return ic.apply(void 0, [n._controller, r()].concat(t));\n        }), this.confirmAcssDebitSetup = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return Gc.apply(void 0, [n._controller, r()].concat(t));\n        }), this.verifyMicrodepositsForPayment = hn(function () {\n          for (var e = arguments.length, t = Array(e), r = 0; r < e; r++) {\n            t[r] = arguments[r];\n          }\n\n          return Ec.apply(void 0, [n._controller].concat(t));\n        }), this.verifyMicrodepositsForSetup = hn(function () {\n          for (var e = arguments.length, t = Array(e), r = 0; r < e; r++) {\n            t[r] = arguments[r];\n          }\n\n          return $c.apply(void 0, [n._controller].concat(t));\n        })), this.confirmGrabPayPayment = ju(\"confirmGrabPayPayment\"), wo(this._betas, go.grabpay_pm_beta_1) && (this.confirmGrabPayPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return fc.apply(void 0, [n._controller, r()].concat(t));\n        })), this.confirmOxxoPayment = ju(\"confirmOxxoPayment\"), wo(this._betas, go.oxxo_pm_beta_1) && (this.confirmOxxoPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return _c.apply(void 0, [n._controller, r()].concat(t));\n        })), this.confirmAlipayPayment = ju(\"confirmAlipayPayment\"), wo(this._betas, go.alipay_pm_beta_1) && (this.confirmAlipayPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return mc.apply(void 0, [n._controller, r()].concat(t));\n        })), this.confirmSofortPayment = ju(\"confirmSofortPayment\"), wo(this._betas, go.sofort_pm_beta_1) && (this.confirmSofortPayment = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return bc.apply(void 0, [n._controller, r()].concat(t));\n        })), this.confirmIdealSetup = ju(\"confirmIdealSetup\"), wo(this._betas, go.ideal_sepa_beta_1) && (this.confirmIdealSetup = _n(function () {\n          for (var e = arguments.length, t = Array(e), o = 0; o < e; o++) {\n            t[o] = arguments[o];\n          }\n\n          return Jc.apply(void 0, [n._controller, r()].concat(t));\n        })), t && (this.handleHosted3DS2Payment = fn(function (e) {\n          return wc(e, n._controller);\n        }), this.handleHosted3DS2Setup = fn(function (e) {\n          return Xc(e, n._controller);\n        }));\n      }\n    }, {\n      key: \"_attachLegacyPaymentIntentMethods\",\n      value: function value(e) {\n        var t = this,\n            n = wo(this._betas, go.payment_intent_beta_1) || wo(this._betas, go.payment_intent_beta_2),\n            r = function r() {\n          return t._mids();\n        },\n            o = _n(function () {\n          for (var e = arguments.length, n = Array(e), o = 0; o < e; o++) {\n            n[o] = arguments[o];\n          }\n\n          return jc.apply(void 0, [!0, t._controller, r()].concat(n));\n        }),\n            i = _n(function () {\n          for (var e = arguments.length, n = Array(e), o = 0; o < e; o++) {\n            n[o] = arguments[o];\n          }\n\n          return jc.apply(void 0, [!1, t._controller, r()].concat(n));\n        }),\n            a = xn(Lc, Mu(\"handleCardPayment\")),\n            s = _n(function () {\n          for (var e = arguments.length, o = Array(e), i = 0; i < e; i++) {\n            o[i] = arguments[i];\n          }\n\n          return a.apply(void 0, [!0, t._controller, r(), n].concat(o));\n        }),\n            c = _n(function () {\n          for (var e = arguments.length, o = Array(e), i = 0; i < e; i++) {\n            o[i] = arguments[i];\n          }\n\n          return a.apply(void 0, [!1, t._controller, r(), n].concat(o));\n        }),\n            u = xn(eu, Mu(\"handleCardSetup\")),\n            l = _n(function () {\n          for (var e = arguments.length, n = Array(e), o = 0; o < e; o++) {\n            n[o] = arguments[o];\n          }\n\n          return u.apply(void 0, [t._controller, r()].concat(n));\n        }),\n            p = _n(function () {\n          for (var e = arguments.length, n = Array(e), o = 0; o < e; o++) {\n            n[o] = arguments[o];\n          }\n\n          return nu.apply(void 0, [t._controller, r()].concat(n));\n        }),\n            d = _n(function () {\n          for (var e = arguments.length, o = Array(e), i = 0; i < e; i++) {\n            o[i] = arguments[i];\n          }\n\n          return xc.apply(void 0, [t._controller, r(), n].concat(o));\n        }),\n            f = _n(function () {\n          for (var e = arguments.length, n = Array(e), o = 0; o < e; o++) {\n            n[o] = arguments[o];\n          }\n\n          return tu.apply(void 0, [t._controller, r()].concat(n));\n        }),\n            h = _n(function () {\n          for (var e = arguments.length, o = Array(e), i = 0; i < e; i++) {\n            o[i] = arguments[i];\n          }\n\n          return Dc.apply(void 0, [!0, t._controller, r(), n].concat(o));\n        }),\n            _ = _n(function () {\n          for (var e = arguments.length, o = Array(e), i = 0; i < e; i++) {\n            o[i] = arguments[i];\n          }\n\n          return Dc.apply(void 0, [!1, t._controller, r(), n].concat(o));\n        }),\n            m = _n(function () {\n          for (var e = arguments.length, o = Array(e), i = 0; i < e; i++) {\n            o[i] = arguments[i];\n          }\n\n          return qc.apply(void 0, [t._controller, r(), n].concat(o));\n        });\n\n        this.handleCardPayment = c, this.confirmPaymentIntent = i, this.handleCardSetup = l, this.confirmSetupIntent = p, this.fulfillPaymentIntent = ju(\"fulfillPaymentIntent\"), this.handleSepaDebitPayment = ju(\"handleSepaDebitPayment\"), this.handleSepaDebitSetup = ju(\"handleSepaDebitSetup\"), this.handleIdealPayment = ju(\"handleIdealPayment\"), this.handleFpxPayment = ju(\"handleFpxPayment\"), wo(this._betas, go.payment_intent_beta_1) ? this.fulfillPaymentIntent = s : (wo(this._betas, go.payment_intent_beta_3) || wo(this._betas, go.payment_intent_beta_2)) && (this.handleCardPayment = s), wo(this._betas, go.payment_intent_beta_3) && (this.confirmPaymentIntent = o, this.handleIdealPayment = h, this.handleSepaDebitPayment = d), wo(this._betas, go.fpx_bank_beta_1) && (this.handleFpxPayment = m), wo(this._betas, go.ideal_pm_beta_1) && (this.handleIdealPayment = _), wo(this._betas, go.sepa_pm_beta_1) && (this.handleSepaDebitPayment = d, this.handleSepaDebitSetup = f);\n      }\n    }, {\n      key: \"_attachPrivateMethodsForCheckout\",\n      value: function value(e) {\n        var t = this;\n        e && (this.sendInteractionEvent = $r, this.tryNextAction = hn(function (e, n) {\n          var r = Rt(as, e, \"Payment Intent\"),\n              o = r.value,\n              i = Object.keys(za).map(function (e) {\n            return za[e];\n          }),\n              a = Rt(ct.apply(void 0, ve(i)), n, \"Source type\"),\n              s = a.value;\n          return \"payment_intent\" === o.object ? tc(t._controller, o, s, \"auto\", !1) : Bc(t._controller, o, s, \"auto\", !1);\n        }));\n      }\n    }, {\n      key: \"_attachCheckoutMethods\",\n      value: function value(e) {\n        var t = this,\n            n = function n() {\n          return t._mids();\n        },\n            r = e.reduce(function (e, t) {\n          var n = Le(ou, function (e) {\n            return e === t;\n          });\n          return n ? [].concat(ve(e), [n]) : e;\n        }, []);\n\n        this.redirectToCheckout = Eu(this._controller, r, n, this._locale);\n      }\n    }, {\n      key: \"_attachGetters\",\n      value: function value() {\n        var e = this,\n            t = [\"elements\", \"createToken\", \"createSource\", \"createPaymentMethod\"],\n            n = new _s(function (t) {\n          e._registerWrapper({\n            name: t,\n            version: null\n          });\n        });\n        t.forEach(function (t) {\n          if (e.hasOwnProperty(t)) {\n            var r = e[t],\n                o = function o() {\n              n.called(t);\n\n              for (var e = arguments.length, o = Array(e), i = 0; i < e; i++) {\n                o[i] = arguments[i];\n              }\n\n              return r.apply(this, o);\n            };\n\n            Object.defineProperty(e, t, {\n              enumerable: !0,\n              get: function get() {\n                return n.got(t), o;\n              }\n            });\n          }\n        });\n      }\n    }, {\n      key: \"_ensureHTTPS\",\n      value: function value() {\n        var e = window.location.protocol,\n            t = -1 !== [\"https:\", \"file:\", \"ionic:\"].indexOf(e),\n            n = -1 !== [\"localhost\", \"127.0.0.1\", \"0.0.0.0\"].indexOf(window.location.hostname),\n            r = this._keyMode === Ge.live,\n            o = \"Live Stripe.js integrations must use HTTPS. For more information: https://stripe.com/docs/security#tls\";\n\n        if (!t) {\n          if (r && !n) throw this._controller.report(\"user_error.non_https_error\", {\n            protocol: e\n          }), new Te(o);\n          !r || n ? window.console && console.warn(\"You may test your Stripe.js integration over HTTP. However, live Stripe.js integrations must use HTTPS.\") : window.console && console.warn(o);\n        }\n      }\n    }, {\n      key: \"_ensureStripeHosted\",\n      value: function value(e) {\n        if (!e) throw this._controller.report(\"user_error.self_hosted\"), new Te(\"Stripe.js must be loaded from js.stripe.com. For more information https://stripe.com/docs/stripe-js/reference#including-stripejs\");\n      }\n    }, {\n      key: \"_mids\",\n      value: function value() {\n        return e._ec ? e._ec.ids() : null;\n      }\n    }, {\n      key: \"_registerWrapper\",\n      value: function value(e) {\n        var t = Tt(ps, e, \"WrapperLibrary\");\n        if (\"error\" === t.type) return void this._controller.report(\"register_wrapper.error\", {\n          error: t.error.message\n        });\n        var n = t.value,\n            r = n.name,\n            o = n.version;\n\n        this._controller.registerWrapper({\n          name: r,\n          version: o\n        });\n      }\n    }]), e;\n  }();\n\n  Lu.version = 3, Lu.stripeJsId = Qt(), Lu._ec = function () {\n    return \"https://checkout.stripe.com/\".match(new RegExp(document.location.protocol + \"//\" + document.location.host)) ? null : Vr();\n  }();\n\n  var xu = function xu() {\n    var e = this;\n    this._listenerRegistry = Ur(), this.elements = fn(function (t) {\n      return new Ba(e._controller, e._listenerRegistry, Ru({}, e._locale ? {\n        locale: e._locale\n      } : {}, t, {\n        betas: e._betas\n      }));\n    }), this.createToken = hn(function (t, n) {\n      var r = e._mids();\n\n      if (\"cvc_update\" === t) {\n        if (wo(e._betas, go.cvc_update_beta_1)) return Ou(e._controller, n, r);\n        throw new Te(\"You cannot create a 'cvc_update' token without using the 'cvc_update_beta_1' beta flag.\");\n      }\n\n      return ku(e._controller, r)(t, n);\n    }), this.createSource = hn(function (t, n) {\n      var r = Wa(t),\n          o = ys(r ? n : t),\n          i = o || {\n        type: null,\n        data: {}\n      },\n          a = i.type,\n          s = i.data;\n\n      if (r) {\n        var c = r._frame.id,\n            u = r._componentName;\n        return !o && Va(u) ? Me.reject(new Te(\"Please provide Source creation parameters to createSource.\")) : e._controller.action.createSourceWithElement({\n          frameId: c,\n          elementName: u,\n          type: a,\n          sourceData: s,\n          mids: e._mids()\n        }).then(vs);\n      }\n\n      return o ? a ? e._controller.action.createSourceWithData({\n        elementName: null,\n        type: a,\n        sourceData: s,\n        mids: e._mids()\n      }).then(vs) : Me.reject(new Te(\"Please provide a source type to createSource.\")) : Me.reject(new Te(\"Please provide either an Element or Source creation parameters to createSource.\"));\n    }), this.retrieveSource = fn(function (t) {\n      var n = Rt(gs, {\n        source: t\n      }, \"retrieveSource\"),\n          r = n.value;\n      return n.warnings.forEach(function (t) {\n        return e._controller.warn(t);\n      }), e._controller.action.retrieveSource(r).then(vs);\n    }), this.paymentRequest = hn(function (t, n) {\n      ze(e._keyMode);\n      var r = e._isCheckout && n ? n : null;\n      return Ha(e._controller, {\n        apiKey: e._apiKey,\n        accountId: e._stripeAccount\n      }, e._mids(), t, e._betas, r, e._listenerRegistry);\n    });\n  },\n      Du = Lu,\n      qu = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n    return _typeof(e);\n  } : function (e) {\n    return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n  },\n      Fu = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n\n    return e;\n  },\n      Bu = function () {\n    if (document.currentScript) {\n      var e = Je(document.currentScript.src);\n      return !e || sr(e.origin);\n    }\n\n    return !0;\n  }(),\n      Uu = function Uu(e, t) {\n    return new Du(Fu({\n      apiKey: e\n    }, t && \"object\" === (void 0 === t ? \"undefined\" : qu(t)) ? t : {}), Bu);\n  };\n\n  Uu.version = Du.version, window.Stripe && 2 === window.Stripe.version && !window.Stripe.StripeV3 ? window.Stripe.StripeV3 = Uu : window.Stripe ? window.console && console.warn(\"It looks like Stripe.js was loaded more than one time. Please only load it once per page.\") : window.Stripe = Uu;\n  t[\"default\"] = Uu;\n}, function (e, t, n) {\n  \"use strict\";\n\n  function r(e) {\n    var t = new o(o._61);\n    return t._81 = 1, t._65 = e, t;\n  }\n\n  var o = n(3);\n  e.exports = o;\n  var i = r(!0),\n      a = r(!1),\n      s = r(null),\n      c = r(void 0),\n      u = r(0),\n      l = r(\"\");\n  o.resolve = function (e) {\n    if (e instanceof o) return e;\n    if (null === e) return s;\n    if (void 0 === e) return c;\n    if (!0 === e) return i;\n    if (!1 === e) return a;\n    if (0 === e) return u;\n    if (\"\" === e) return l;\n    if (\"object\" == _typeof(e) || \"function\" == typeof e) try {\n      var t = e.then;\n      if (\"function\" == typeof t) return new o(t.bind(e));\n    } catch (e) {\n      return new o(function (t, n) {\n        n(e);\n      });\n    }\n    return r(e);\n  }, o.all = function (e) {\n    var t = Array.prototype.slice.call(e);\n    return new o(function (e, n) {\n      function r(a, s) {\n        if (s && (\"object\" == _typeof(s) || \"function\" == typeof s)) {\n          if (s instanceof o && s.then === o.prototype.then) {\n            for (; 3 === s._81;) {\n              s = s._65;\n            }\n\n            return 1 === s._81 ? r(a, s._65) : (2 === s._81 && n(s._65), void s.then(function (e) {\n              r(a, e);\n            }, n));\n          }\n\n          var c = s.then;\n\n          if (\"function\" == typeof c) {\n            return void new o(c.bind(s)).then(function (e) {\n              r(a, e);\n            }, n);\n          }\n        }\n\n        t[a] = s, 0 == --i && e(t);\n      }\n\n      if (0 === t.length) return e([]);\n\n      for (var i = t.length, a = 0; a < t.length; a++) {\n        r(a, t[a]);\n      }\n    });\n  }, o.reject = function (e) {\n    return new o(function (t, n) {\n      n(e);\n    });\n  }, o.race = function (e) {\n    return new o(function (t, n) {\n      e.forEach(function (e) {\n        o.resolve(e).then(t, n);\n      });\n    });\n  }, o.prototype[\"catch\"] = function (e) {\n    return this.then(null, e);\n  };\n}, function (e, t, n) {\n  \"use strict\";\n\n  function r() {}\n\n  function o(e) {\n    try {\n      return e.then;\n    } catch (e) {\n      return y = e, v;\n    }\n  }\n\n  function i(e, t) {\n    try {\n      return e(t);\n    } catch (e) {\n      return y = e, v;\n    }\n  }\n\n  function a(e, t, n) {\n    try {\n      e(t, n);\n    } catch (e) {\n      return y = e, v;\n    }\n  }\n\n  function s(e) {\n    if (\"object\" != _typeof(this)) throw new TypeError(\"Promises must be constructed via new\");\n    if (\"function\" != typeof e) throw new TypeError(\"not a function\");\n    this._45 = 0, this._81 = 0, this._65 = null, this._54 = null, e !== r && _(e, this);\n  }\n\n  function c(e, t, n) {\n    return new e.constructor(function (o, i) {\n      var a = new s(r);\n      a.then(o, i), u(e, new h(t, n, a));\n    });\n  }\n\n  function u(e, t) {\n    for (; 3 === e._81;) {\n      e = e._65;\n    }\n\n    if (s._10 && s._10(e), 0 === e._81) return 0 === e._45 ? (e._45 = 1, void (e._54 = t)) : 1 === e._45 ? (e._45 = 2, void (e._54 = [e._54, t])) : void e._54.push(t);\n    l(e, t);\n  }\n\n  function l(e, t) {\n    m(function () {\n      var n = 1 === e._81 ? t.onFulfilled : t.onRejected;\n      if (null === n) return void (1 === e._81 ? p(t.promise, e._65) : d(t.promise, e._65));\n      var r = i(n, e._65);\n      r === v ? d(t.promise, y) : p(t.promise, r);\n    });\n  }\n\n  function p(e, t) {\n    if (t === e) return d(e, new TypeError(\"A promise cannot be resolved with itself.\"));\n\n    if (t && (\"object\" == _typeof(t) || \"function\" == typeof t)) {\n      var n = o(t);\n      if (n === v) return d(e, y);\n      if (n === e.then && t instanceof s) return e._81 = 3, e._65 = t, void f(e);\n      if (\"function\" == typeof n) return void _(n.bind(t), e);\n    }\n\n    e._81 = 1, e._65 = t, f(e);\n  }\n\n  function d(e, t) {\n    e._81 = 2, e._65 = t, s._97 && s._97(e, t), f(e);\n  }\n\n  function f(e) {\n    if (1 === e._45 && (u(e, e._54), e._54 = null), 2 === e._45) {\n      for (var t = 0; t < e._54.length; t++) {\n        u(e, e._54[t]);\n      }\n\n      e._54 = null;\n    }\n  }\n\n  function h(e, t, n) {\n    this.onFulfilled = \"function\" == typeof e ? e : null, this.onRejected = \"function\" == typeof t ? t : null, this.promise = n;\n  }\n\n  function _(e, t) {\n    var n = !1,\n        r = a(e, function (e) {\n      n || (n = !0, p(t, e));\n    }, function (e) {\n      n || (n = !0, d(t, e));\n    });\n    n || r !== v || (n = !0, d(t, y));\n  }\n\n  var m = n(4),\n      y = null,\n      v = {};\n  e.exports = s, s._10 = null, s._97 = null, s._61 = r, s.prototype.then = function (e, t) {\n    if (this.constructor !== s) return c(this, e, t);\n    var n = new s(r);\n    return u(this, new h(e, t, n)), n;\n  };\n}, function (e, t, n) {\n  \"use strict\";\n\n  (function (t) {\n    function n(e) {\n      a.length || (i(), s = !0), a[a.length] = e;\n    }\n\n    function r() {\n      for (; c < a.length;) {\n        var e = c;\n\n        if (c += 1, a[e].call(), c > u) {\n          for (var t = 0, n = a.length - c; t < n; t++) {\n            a[t] = a[t + c];\n          }\n\n          a.length -= c, c = 0;\n        }\n      }\n\n      a.length = 0, c = 0, s = !1;\n    }\n\n    function o(e) {\n      return function () {\n        function t() {\n          clearTimeout(n), clearInterval(r), e();\n        }\n\n        var n = setTimeout(t, 0),\n            r = setInterval(t, 50);\n      };\n    }\n\n    e.exports = n;\n    var i,\n        a = [],\n        s = !1,\n        c = 0,\n        u = 1024,\n        l = void 0 !== t ? t : self,\n        p = l.MutationObserver || l.WebKitMutationObserver;\n    i = \"function\" == typeof p ? function (e) {\n      var t = 1,\n          n = new p(e),\n          r = document.createTextNode(\"\");\n      return n.observe(r, {\n        characterData: !0\n      }), function () {\n        t = -t, r.data = t;\n      };\n    }(r) : o(r), n.requestFlush = i, n.makeRequestCallFromTimer = o;\n  }).call(t, n(5));\n}, function (e, t) {\n  var n;\n\n  n = function () {\n    return this;\n  }();\n\n  try {\n    n = n || Function(\"return this\")() || (0, eval)(\"this\");\n  } catch (e) {\n    \"object\" == (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && (n = window);\n  }\n\n  e.exports = n;\n}, function (e, t, n) {\n  var r, o;\n  !function () {\n    \"use strict\";\n\n    var n = function () {\n      function e() {}\n\n      function t(e, t) {\n        for (var n = t.length, r = 0; r < n; ++r) {\n          i(e, t[r]);\n        }\n      }\n\n      function n(e, t) {\n        e[t] = !0;\n      }\n\n      function r(e, t) {\n        for (var n in t) {\n          s.call(t, n) && (e[n] = !!t[n]);\n        }\n      }\n\n      function o(e, t) {\n        for (var n = t.split(c), r = n.length, o = 0; o < r; ++o) {\n          e[n[o]] = !0;\n        }\n      }\n\n      function i(e, i) {\n        if (i) {\n          var a = _typeof(i);\n\n          \"string\" === a ? o(e, i) : Array.isArray(i) ? t(e, i) : \"object\" === a ? r(e, i) : \"number\" === a && n(e, i);\n        }\n      }\n\n      function a() {\n        for (var n = arguments.length, r = Array(n), o = 0; o < n; o++) {\n          r[o] = arguments[o];\n        }\n\n        var i = new e();\n        t(i, r);\n        var a = [];\n\n        for (var s in i) {\n          i[s] && a.push(s);\n        }\n\n        return a.join(\" \");\n      }\n\n      e.prototype = Object.create(null);\n      var s = {}.hasOwnProperty,\n          c = /\\s+/;\n      return a;\n    }();\n\n    void 0 !== e && e.exports ? e.exports = n : (r = [], void 0 !== (o = function () {\n      return n;\n    }.apply(t, r)) && (e.exports = o));\n  }();\n}, function (e, t) {}, function (e, t) {\n  var n = function n(e) {\n    return \"_\" + e.split(\"\").map(function (e) {\n      return e.charCodeAt(0);\n    }).reduce(function (e, t) {\n      return (e << 5) - e + t & (e << 5) - e + t;\n    }, 0).toString().replace(/[-.]/g, \"_\");\n  };\n\n  e.exports = n;\n}]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/stripe.js\n");

/***/ })

}]);